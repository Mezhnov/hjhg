import android.os.Bundle
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.lifecycle.lifecycleScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import java.sql.Connection
import java.sql.DriverManager
import java.sql.ResultSet
import java.sql.SQLException

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MyApplicationTheme {
                LoginScreen()
            }
        }
    }
}

@Composable
fun LoginScreen() {
    var showLogin by remember { mutableStateOf(true) }
    var isLoggedIn by remember { mutableStateOf(false) }

    when {
        isLoggedIn -> MessengerHome(onLogoutClick = {
            isLoggedIn = false
            showLogin = true
        })
        showLogin -> LoginContent(
            onLoginClick = { isLoggedIn = true },
            onRegisterClick = { showLogin = false }
        )
        else -> RegisterContent(onLoginClick = { showLogin = true })
    }
}

@Composable
fun LoginContent(onLoginClick: () -> Unit, onRegisterClick: () -> Unit) {
    val username = remember { mutableStateOf("") }
    val password = remember { mutableStateOf("") }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .padding(32.dp)
    ) {
        Column(
            modifier = Modifier.align(Alignment.Center),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text("Messenger App", modifier = Modifier.padding(bottom = 32.dp))

            OutlinedTextField(
                value = username.value,
                onValueChange = { username.value = it },
                label = { Text("Username") },
                modifier = Modifier.fillMaxWidth().padding(bottom = 16.dp)
            )

            OutlinedTextField(
                value = password.value,
                onValueChange = { password.value = it },
                label = { Text("Password") },
                visualTransformation = androidx.compose.ui.text.input.PasswordVisualTransformation(),
                modifier = Modifier.fillMaxWidth().padding(bottom = 24.dp)
            )

            Button(onClick = { onLoginClick() }, modifier = Modifier.fillMaxWidth()) {
                Text("Login")
            }

            Spacer(modifier = Modifier.height(16.dp))
            Text(
                text = "Don't have an account? Sign Up",
                color = Color.Blue,
                modifier = Modifier.clickable { onRegisterClick() }
            )
        }
    }
}

@Composable
fun RegisterContent(onLoginClick: () -> Unit) {
    val username = remember { mutableStateOf("") }
    val password = remember { mutableStateOf("") }
    val confirmPassword = remember { mutableStateOf("") }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .padding(32.dp)
    ) {
        Column(
            modifier = Modifier.align(Alignment.Center),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text("Create Account", modifier = Modifier.padding(bottom = 32.dp))

            OutlinedTextField(
                value = username.value,
                onValueChange = { username.value = it },
                label = { Text("Username") },
                modifier = Modifier.fillMaxWidth().padding(bottom = 16.dp)
            )

            OutlinedTextField(
                value = password.value,
                onValueChange = { password.value = it },
                label = { Text("Password") },
                visualTransformation = androidx.compose.ui.text.input.PasswordVisualTransformation(),
                modifier = Modifier.fillMaxWidth().padding(bottom = 16.dp)
            )

            OutlinedTextField(
                value = confirmPassword.value,
                onValueChange = { confirmPassword.value = it },
                label = { Text("Confirm Password") },
                visualTransformation = androidx.compose.ui.text.input.PasswordVisualTransformation(),
                modifier = Modifier.fillMaxWidth().padding(bottom = 24.dp)
            )

            Button(onClick = { /* Handle register logic */ }, modifier = Modifier.fillMaxWidth()) {
                Text("Register")
            }

            Spacer(modifier = Modifier.height(16.dp))
            Text(
                text = "Already have an account? Login",
                color = Color.Blue,
                modifier = Modifier.clickable { onLoginClick() }
            )
        }
    }
}

@Composable
fun MessengerHome(onLogoutClick: () -> Unit) {
    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFBBDEFB))
    ) {
        Column(
            modifier = Modifier.align(Alignment.Center),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text("Welcome to Messenger!", modifier = Modifier.padding(bottom = 16.dp))

            Button(onClick = { onLogoutClick() }, modifier = Modifier.padding(top = 16.dp)) {
                Text("Logout")
            }
        }
    }
}

fun connectToMySQL() {
    val url = "jdbc:mysql://your-database-url:3306/your-database"
    val user = "your-username"
    val password = "your-password"

    // Используем корутины для асинхронного подключения
    lifecycleScope.launch(Dispatchers.IO) {
        try {
            val connection: Connection = DriverManager.getConnection(url, user, password)
            val statement = connection.createStatement()
            val resultSet: ResultSet = statement.executeQuery("SELECT * FROM your_table")

            while (resultSet.next()) {
                // Вы можете получить данные из resultSet и обновить UI
                // Например, отобразить их в интерфейсе (в UI поток).
                val data = resultSet.getString("your_column_name")
                println("Data: $data")
            }
            resultSet.close()
            statement.close()
            connection.close()
        } catch (e: SQLException) {
            // Обработка ошибок
            e.printStackTrace()
        }
    }
}

@Preview(showBackground = true)
@Composable
fun DefaultPreview() {
    MyApplicationTheme {
        LoginScreen()
    }
}
