// Include необходимые заголовочные файлы
#include <windows.h>
#include <string>

// Глобальные переменные
const wchar_t CLASS_NAME[] = L"BIOSLikeWindowClass";

// Функция для рисования текста на окне
void DrawTextCenter(HDC hdc, RECT rect, const std::wstring& text, int fontSize = 24) {
    // Установка шрифта
    HFONT hFont = CreateFont(
        fontSize, 0, 0, 0, FW_NORMAL, FALSE, FALSE, FALSE,
        DEFAULT_CHARSET, OUT_OUTLINE_PRECIS, CLIP_DEFAULT_PRECIS,
        CLEARTYPE_QUALITY, VARIABLE_PITCH, L"Consolas");
    HFONT hOldFont = (HFONT)SelectObject(hdc, hFont);

    // Установка цвета текста
    SetTextColor(hdc, RGB(0, 255, 0)); // Зелёный текст
    SetBkMode(hdc, TRANSPARENT);

    // Рисование текста по центру
    DrawTextW(hdc, text.c_str(), -1, &rect, DT_CENTER | DT_VCENTER | DT_SINGLELINE);

    // Восстановление старого шрифта и удаление созданного
    SelectObject(hdc, hOldFont);
    DeleteObject(hFont);
}

// Процедура окна
LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
    switch (uMsg) {
    case WM_DESTROY:
        PostQuitMessage(0);
        return 0;

    case WM_KEYDOWN:
        if (wParam == VK_ESCAPE) {
            DestroyWindow(hwnd);
        }
        return 0;

    case WM_PAINT: {
        PAINTSTRUCT ps;
        HDC hdc = BeginPaint(hwnd, &ps);

        RECT rect;
        GetClientRect(hwnd, &rect);

        // Установка черного фона
        HBRUSH blackBrush = CreateSolidBrush(RGB(0, 0, 0));
        FillRect(hdc, &rect, blackBrush);
        DeleteObject(blackBrush);

        // Пример текста BIOS-подобного интерфейса
        std::wstring line1 = L"BIOS Setup Utility";
        std::wstring line2 = L"Press ESC to exit";

        // Рисуем первый заголовок
        DrawTextCenter(hdc, rect, line1, 36);

        // Сдвигаем координаты вниз для второго текста
        rect.top += 100;
        DrawTextCenter(hdc, rect, line2, 24);

        EndPaint(hwnd, &ps);
    }
                  return 0;

    }
    return DefWindowProc(hwnd, uMsg, wParam, lParam);
}

// Точка входа
int WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE, PWSTR, int nCmdShow) {
    // Регистрация класса окна
    WNDCLASS wc = {};
    wc.lpfnWndProc = WindowProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = CLASS_NAME;
    wc.hCursor = NULL; // Убираем курсор, чтобы создать эффект BIOS-подобного интерфейса

    RegisterClass(&wc);

    // Получение размеров экрана
    int screenWidth = GetSystemMetrics(SM_CXSCREEN);
    int screenHeight = GetSystemMetrics(SM_CYSCREEN);

    // Создание окна
    HWND hwnd = CreateWindowEx(
        0,
        CLASS_NAME,
        L"BIOS-like Screen",
        WS_POPUP, // Без рамок и заголовка
        0, 0, screenWidth, screenHeight,
        NULL,
        NULL,
        hInstance,
        NULL
    );

    if (hwnd == NULL) {
        return 0;
    }

    // Установка полной экранной поверхностной области
    ShowWindow(hwnd, SW_SHOW);
    UpdateWindow(hwnd);

    // Цикл сообщений
    MSG msg = {};
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    return 0;
}
