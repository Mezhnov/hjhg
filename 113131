#include <windows.h>
#include <gdiplus.h>
#include <wininet.h>
#include <string>
#include <vector>
#include <chrono>
#include <iomanip>
#include <sstream>
#include <locale>
#include <codecvt>
#include <windowsx.h>
#include <mmsystem.h>    // For PlaySound
#include <CommCtrl.h>    // For common controls
#include <richedit.h>    // For Rich Edit controls
#include "resource.h"    // Resource identifiers

#define IDR_WAVE1 101
#define IDR_WAVE2 102
#define IDR_WAVE3 103
#define IDR_WAVE4 104

#define ID_START_BUTTON   2000
#define ID_MENU_ITEM1     2001
#define ID_MENU_ITEM2     2002
#define ID_MENU_ITEM3     2003
#define ID_EXIT_APP       2004

#pragma comment(lib, "gdiplus.lib")
#pragma comment(lib, "wininet.lib")
#pragma comment(lib, "winmm.lib")     // Link with winmm.lib for PlaySound
#pragma comment(lib, "comctl32.lib")  // Link with comctl32.lib for common controls

// Global variables
HINSTANCE hInst;
HWND hWndStartButton;
HMENU hStartMenu;

// Function declarations
LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
void CreateStartMenu(HWND);
void InitializeGDIPlus();
void ShutdownGDIPlus();
ULONG_PTR gdiplusToken;

int APIENTRY wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPWSTR lpCmdLine, int nCmdShow)
{
    // Initialize GDI+
    InitializeGDIPlus();

    // Initialize common controls
    INITCOMMONCONTROLSEX icex = { sizeof(INITCOMMONCONTROLSEX), ICC_STANDARD_CLASSES };
    InitCommonControlsEx(&icex);

    hInst = hInstance;

    // Register window class
    WNDCLASSEXW wcex = {};

    wcex.cbSize        = sizeof(WNDCLASSEXW);
    wcex.style         = CS_HREDRAW | CS_VREDRAW;
    wcex.lpfnWndProc   = WndProc;
    wcex.hInstance     = hInstance;
    wcex.hIcon         = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_APPLICATION));
    wcex.hCursor       = LoadCursor(nullptr, IDC_ARROW);
    wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW+1);
    wcex.lpszMenuName  = nullptr;
    wcex.lpszClassName = L"StartMenuClass";
    wcex.hIconSm       = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_APPLICATION));

    if (!RegisterClassExW(&wcex))
    {
        MessageBox(nullptr, L"Window Class Registration Failed!", L"Error", MB_ICONERROR);
        return FALSE;
    }

    // Create Main Window
    HWND hWnd = CreateWindowW(L"StartMenuClass", L"Start Menu Application", WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, 0, 600, 400, nullptr, nullptr, hInstance, nullptr);

    if (!hWnd)
    {
        MessageBox(nullptr, L"Window Creation Failed!", L"Error", MB_ICONERROR);
        ShutdownGDIPlus();
        return FALSE;
    }

    ShowWindow(hWnd, nCmdShow);
    UpdateWindow(hWnd);

    // Main Message Loop
    MSG msg;
    while (GetMessage(&msg, nullptr, 0, 0))
    {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    ShutdownGDIPlus();
    return (int)msg.wParam;
}

// Initialize GDI+
void InitializeGDIPlus()
{
    Gdiplus::GdiplusStartupInput gdiplusStartupInput;
    Gdiplus::GdiplusStartup(&gdiplusToken, &gdiplusStartupInput, nullptr);
}

// Shutdown GDI+
void ShutdownGDIPlus()
{
    Gdiplus::GdiplusShutdown(gdiplusToken);
}

// Create Start Menu
void CreateStartMenu(HWND hWnd)
{
    hStartMenu = CreatePopupMenu();

    AppendMenuW(hStartMenu, MF_STRING, ID_MENU_ITEM1, L"Open Calculator");
    AppendMenuW(hStartMenu, MF_STRING, ID_MENU_ITEM2, L"Open Notepad");
    AppendMenuW(hStartMenu, MF_STRING, ID_MENU_ITEM3, L"Play Sound");
    AppendMenuW(hStartMenu, MF_SEPARATOR, 0, nullptr);
    AppendMenuW(hStartMenu, MF_STRING, ID_EXIT_APP, L"Exit");

    // Set fonts or images to the menu items if needed
}

// Window Procedure
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    switch (message)
    {
    case WM_CREATE:
        {
            // Create Start Button
            hWndStartButton = CreateWindowExW(0, L"BUTTON", L"Start",
                WS_TABSTOP | WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON,
                10, 300, 80, 30, hWnd, (HMENU)ID_START_BUTTON, hInst, nullptr);

            // Create the Start Menu
            CreateStartMenu(hWnd);
        }
        break;

    case WM_COMMAND:
        {
            int wmId    = LOWORD(wParam);
            int wmEvent = HIWORD(wParam);

            // Handle Start Button Click
            if (wmId == ID_START_BUTTON)
            {
                RECT rc;
                GetWindowRect(hWndStartButton, &rc);

                TrackPopupMenu(hStartMenu, TPM_LEFTALIGN | TPM_TOPALIGN, rc.left, rc.bottom, 0, hWnd, nullptr);
            }
            else
            {
                // Handle Menu Selections
                switch (wmId)
                {
                case ID_MENU_ITEM1:
                    // Open Calculator
                    ShellExecute(nullptr, L"open", L"calc.exe", nullptr, nullptr, SW_SHOWNORMAL);
                    break;

                case ID_MENU_ITEM2:
                    // Open Notepad
                    ShellExecute(nullptr, L"open", L"notepad.exe", nullptr, nullptr, SW_SHOWNORMAL);
                    break;

                case ID_MENU_ITEM3:
                    // Play a sound resource
                    PlaySound(MAKEINTRESOURCE(IDR_WAVE1), hInst, SND_RESOURCE | SND_ASYNC);
                    break;

                case ID_EXIT_APP:
                    // Exit Application
                    PostMessage(hWnd, WM_CLOSE, 0, 0);
                    break;

                default:
                    break;
                }
            }
        }
        break;

    case WM_DESTROY:
        DestroyMenu(hStartMenu);
        PostQuitMessage(0);
        break;

    default:
        return DefWindowProc(hWnd, message, wParam, lParam);
    }
    return 0;
}
