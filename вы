from flask import Flask, render_template, request, redirect, url_for, abort
import os
import sqlite3

# Список допустимых доменов
ALLOWED_DOMAINS = {
    'smp.example1.com': 'example1',
    'smp.example2.com': 'example2',
    'smp.example3.com': 'example3'
}

# Определяем путь к базе данных пользователей
DATABASE = os.path.join(os.path.dirname(__file__), 'users.db')

def create_app():
    app = Flask(__name__)
    init_db()  # Инициализация базы данных при запуске приложения

    @app.before_request
    def check_domain():
        host = request.headers.get('Host', '')
        if host not in ALLOWED_DOMAINS:
            abort(404)  # Не найдено, если домен не разрешен

    # Главная страница для каждого домена
    @app.route('/')
    def index():
        host = request.headers.get('Host', '')
        domain_key = ALLOWED_DOMAINS.get(host)
        if domain_key:
            return render_template(f"{domain_key}_index.html")
        else:
            abort(404)

    # Страница успешной регистрации
    @app.route('/success')
    def success():
        host = request.headers.get('Host', '')
        domain_key = ALLOWED_DOMAINS.get(host)
        if domain_key:
            return render_template(f"{domain_key}_success.html")
        else:
            abort(404)

    # Обработчик регистрации
    @app.route('/register', methods=['POST'])
    def register():
        host = request.headers.get('Host', '')
        domain_key = ALLOWED_DOMAINS.get(host)
        if not domain_key:
            abort(404)

        username = request.form['username']
        password = request.form['password']

        db = get_db()
        db.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, password))
        db.commit()

        return redirect(url_for('success'))

    return app

def get_db():
    conn = sqlite3.connect(DATABASE)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    try:
        with sqlite3.connect(DATABASE) as conn:
            conn.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    username TEXT NOT NULL,
                    password TEXT NOT NULL
                )
            ''')
            conn.commit()
    except sqlite3.Error as e:
        print(f"An error occurred while initializing the database: {e}")

if __name__ == "__main__":
    app = create_app()
    # Запускаем сервер, прослушивающий все интерфейсы на порту 8000
    app.run(host='0.0.0.0', port=8000, debug=True)
