from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///example.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(80), nullable=False)

# Инициализация базы данных
with app.app_context():
    db.create_all()

@app.route('/users', methods=['GET'])
def get_users():
    users = User.query.all()
    return jsonify([{"id": user.id, "name": user.name} for user in users])

@app.route('/users', methods=['POST'])
def add_user():
    data = request.get_json()
    new_user = User(name=data['name'])
    db.session.add(new_user)
    db.session.commit()
    return jsonify({"message": "User added"}), 201

if __name__ == '__main__':
    app.run(debug=True)
import okhttp3.*
import org.json.JSONArray
import org.json.JSONObject
import java.io.IOException

fun main() {
    val client = OkHttpClient()

    // Получение пользователей
    val request = Request.Builder()
        .url("http://127.0.0.1:5000/users")
        .build()

    client.newCall(request).enqueue(object : Callback {
        override fun onFailure(call: Call, e: IOException) {
            e.printStackTrace()
        }

        override fun onResponse(call: Call, response: Response) {
            response.use {
                if (!it.isSuccessful) throw IOException("Unexpected code $it")
                val users = JSONArray(it.body!!.string())
                println(users.toString(2)) // Вывод списка пользователей
            }
        }
    })

    // Добавление нового пользователя
    val json = JSONObject()
    json.put("name", "Kotlin User")

    val body = RequestBody.create(
        MediaType.get("application/json; charset=utf-8"),
        json.toString()
    )

    val postRequest = Request.Builder()
        .url("http://127.0.0.1:5000/users")
        .post(body)
        .build()

    client.newCall(postRequest).enqueue(object : Callback {
        override fun onFailure(call: Call, e: IOException) {
            e.printStackTrace()
        }

        override fun onResponse(call: Call, response: Response) {
            response.use {
                if (!it.isSuccessful) throw IOException("Unexpected code $it")
                println(it.body!!.string()) // Ответ сервера
            }
        }
    })
}
