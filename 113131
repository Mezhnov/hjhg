# search_app.py

from flask import Flask, request, render_template, send_from_directory, abort
from whoosh.index import open_dir
from whoosh.qparser import MultifieldParser
import nltk
from nltk.stem.snowball import RussianStemmer
from nltk.corpus import stopwords
import re
import os

nltk.download('punkt')
nltk.download('stopwords')

app = Flask(__name__)
index_dir = 'indexdir'
stemmer = RussianStemmer()
stop_words = set(stopwords.words('russian'))

if not os.path.exists(index_dir):
    raise Exception(f"Index directory '{index_dir}' does not exist. Please run the indexer script first.")

ix = open_dir(index_dir)

def clean_query(query):
    tokens = nltk.word_tokenize(query.lower(), language='russian')
    tokens = [re.sub(r'\W+', '', token) for token in tokens]
    tokens = [token for token in tokens if token and token not in stop_words]
    tokens = [stemmer.stem(token) for token in tokens]
    return ' '.join(tokens)

@app.route('/', methods=['GET', 'POST'])
def search():
    if request.method == 'POST':
        query_str = request.form['query']
        clean_query_str = clean_query(query_str)
        with ix.searcher() as searcher:
            parser = MultifieldParser(["title", "content"], ix.schema)
            query = parser.parse(clean_query_str)
            results = searcher.search(query, limit=10)
            hits = [
                {
                    'title': r['title'],
                    'url': r['path'],
                    'description': r['description'],
                    'logo': r.get('logo', None)  # Retrieve the logo path
                }
                for r in results
            ]
        return render_template('results.html', query=query_str, hits=hits)
    return render_template('index.html')

@app.route('/pages/<path:filename>')
def serve_page(filename):
    pages_dir = os.path.join(os.getcwd(), 'pages')
    file_path = os.path.join(pages_dir, filename)
    if os.path.isfile(file_path):
        return send_from_directory(pages_dir, filename)
    else:
        abort(404)

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000, debug=False)
