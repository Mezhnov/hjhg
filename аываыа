case WM_PAINT: {
    PAINTSTRUCT ps;
    HDC hdc = BeginPaint(hwnd, &ps);

    // Инициализация GDI+
    Graphics graphics(hdc);
    graphics.SetSmoothingMode(SmoothingModeAntiAlias);
    graphics.SetTextRenderingHint(TextRenderingHintClearTypeGridFit);

    // Получение размеров клиентской области окна
    RECT rect;
    GetClientRect(hwnd, &rect);
    int windowWidth = rect.right - rect.left;
    int windowHeight = rect.bottom - rect.top;

    // Основное изображение (фон)
    if (g_mainImage) {
        graphics.DrawImage(g_mainImage, 0, 0, windowWidth, windowHeight);
    }

    // Получение DPI
    HDC screen = GetDC(hwnd);
    int dpiX = GetDeviceCaps(screen, LOGPIXELSX);
    int dpiY = GetDeviceCaps(screen, LOGPIXELSY);
    ReleaseDC(hwnd, screen);

    // Расчет размеров иконок с учетом DPI
    int iconSizeMM_Wifi = 5; // 5 мм
    int iconSizeMM_App = 15;   // 15 мм
    int spacingMM = 10;         // 10 мм между иконками
    int marginMM = 5;          // 5 мм от края окна

    int iconSize_Wifi = mmToPixels(static_cast<float>(iconSizeMM_Wifi), dpiX); // Используем DPI-X
    int iconSize_App = mmToPixels(static_cast<float>(iconSizeMM_App), dpiX);
    int appSpacing = mmToPixels(static_cast<float>(spacingMM), dpiX);
    int margin = mmToPixels(static_cast<float>(marginMM), dpiX);

    // Отображение иконок (код опущен для краткости)

    // Отображение времени
    FontFamily fontFamily(L"Segoe UI"); // Более современный шрифт
    Font font(&fontFamily, timeFontSize, FontStyleBold, UnitPixel);
    SolidBrush brush(timeColor);
    StringFormat format;
    format.SetAlignment(StringAlignmentCenter);
    format.SetLineAlignment(StringAlignmentCenter);

    // Сдвиг времени вниз на 10 мм
    int verticalOffset = mmToPixels(10.0f, dpiY); // Сдвиг вниз на 10 мм

    RECT currentTimeRect;
    currentTimeRect.left = (windowWidth / 2) - mmToPixels(20.0f, dpiX); // 40 мм ширина области
    currentTimeRect.top = margin + verticalOffset;
    currentTimeRect.right = currentTimeRect.left + mmToPixels(40.0f, dpiX);
    currentTimeRect.bottom = currentTimeRect.top + mmToPixels(20.0f, dpiY);

    // Обновление timeRect для корректного перетаскивания
    timeRect.left = currentTimeRect.left;
    timeRect.top = currentTimeRect.top;
    timeRect.right = currentTimeRect.right;
    timeRect.bottom = currentTimeRect.bottom;

    // Рисование текста времени
    graphics.DrawString(
        currentTime.c_str(),
        -1,
        &font,
        RectF(static_cast<float>(currentTimeRect.left), static_cast<float>(currentTimeRect.top),
              static_cast<float>(currentTimeRect.right - currentTimeRect.left),
              static_cast<float>(currentTimeRect.bottom - currentTimeRect.top)),
        &format,
        &brush
    );

    EndPaint(hwnd, &ps);
    return 0;
}
