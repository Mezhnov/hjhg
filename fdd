#include <windows.h>
#include <gdiplus.h>
#include <wininet.h>
#include <string>
#include <vector>
#include <sstream>

#pragma comment(lib, "gdiplus.lib")
#pragma comment(lib, "wininet.lib")

using namespace Gdiplus;

// Объявляем переменные для изображений на уровне модуля
Image* backgroundImage = nullptr;
Image* taskbarImage = nullptr;

// Высота панели задач в пикселях
const int TASKBAR_HEIGHT = 100;

// Функция для загрузки изображения из URL
bool LoadImageFromURL(const std::wstring& url, Image** imagePtr) {
    HINTERNET hInternet = InternetOpen(L"ImageLoader", INTERNET_OPEN_TYPE_DIRECT, NULL, NULL, 0);
    if (!hInternet) return false;

    HINTERNET hConnect = InternetOpenUrl(hInternet, url.c_str(), NULL, 0, INTERNET_FLAG_RELOAD, 0);
    if (!hConnect) {
        InternetCloseHandle(hInternet);
        return false;
    }

    // Получаем размер загружаемого изображения
    DWORD fileSize = 0;
    DWORD bytesRead = 0;
    if (!InternetQueryDataAvailable(hConnect, &fileSize, 0, 0)) {
        InternetCloseHandle(hConnect);
        InternetCloseHandle(hInternet);
        return false;
    }

    // Создаем буфер для хранения данных изображения
    std::vector<BYTE> buffer(fileSize);
    if (!InternetReadFile(hConnect, buffer.data(), fileSize, &bytesRead)) {
        InternetCloseHandle(hConnect);
        InternetCloseHandle(hInternet);
        return false;
    }

    // Закрываем дескрипторы
    InternetCloseHandle(hConnect);
    InternetCloseHandle(hInternet);

    // Загружаем изображение в GDI+
    IStream* stream = NULL;
    if (FAILED(CreateStreamOnHGlobal(NULL, TRUE, &stream))) {
        return false;
    }

    ULONG written;
    if (FAILED(stream->Write(buffer.data(), bytesRead, &written))) {
        stream->Release();
        return false;
    }

    stream->Seek({0}, STREAM_SEEK_SET, NULL);

    *imagePtr = new Image(stream);
    stream->Release();

    return (*imagePtr)->GetLastStatus() == Ok;
}

LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
    switch (uMsg) {
        case WM_DESTROY:
            delete backgroundImage; // Удаляем фоновое изображение
            delete taskbarImage;    // Удаляем изображение панели задач
            PostQuitMessage(0);
            return 0;

        case WM_KEYDOWN:
            // Проверяем нажатие клавиши Esc
            if (wParam == VK_ESCAPE) {
                DestroyWindow(hwnd); // Закрыть окно
            }
            return 0;

        case WM_PAINT: {
            PAINTSTRUCT ps;
            HDC hdc = BeginPaint(hwnd, &ps);
            Graphics graphics(hdc);

            // Получаем размеры окна
            RECT rect;
            GetClientRect(hwnd, &rect);
            int width = rect.right - rect.left;
            int height = rect.bottom - rect.top;

            // Нарисовать фоновое изображение, растянутое на весь экран
            if (backgroundImage) {
                graphics.DrawImage(backgroundImage, 0, 0, width, height);
            }

            // Нарисовать панель задач
            // Для начала используем простой цвет
            SolidBrush taskbarBrush(Color(220, 220, 220)); // Светло-серый цвет
            graphics.FillRectangle(&taskbarBrush, 0, height - TASKBAR_HEIGHT, width, TASKBAR_HEIGHT);

            // Добавить текст на панель задач
            if (taskbarImage) {
                // Если есть изображение панели задач, нарисуйте его
                graphics.DrawImage(taskbarImage, 0, height - TASKBAR_HEIGHT, width, TASKBAR_HEIGHT);
            } else {
                // Если нет изображения, нарисуйте текст
                FontFamily fontFamily(L"Arial");
                Font font(&fontFamily, 24, FontStyleRegular, UnitPixel);
                SolidBrush textBrush(Color(0, 0, 0)); // Черный цвет

                std::wstring taskbarText = L"Панель задач: Нажмите Esc для выхода";

                StringFormat format;
                format.SetAlignment(StringAlignmentCenter);
                format.SetLineAlignment(StringAlignmentCenter);

                graphics.DrawString(taskbarText.c_str(), -1, &font, RectF(0, height - TASKBAR_HEIGHT, (REAL)width, TASKBAR_HEIGHT), &format, &textBrush);
            }

            EndPaint(hwnd, &ps);
            return 0;
        }

        default:
            return DefWindowProc(hwnd, uMsg, wParam, lParam);
    }
}

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE, LPSTR, int nCmdShow) {
    const wchar_t CLASS_NAME[] = L"FullscreenWindowClass";

    // Инициализация GDI+
    GdiplusStartupInput gdiplusStartupInput;
    ULONG_PTR gdiplusToken;
    GdiplusStartup(&gdiplusToken, &gdiplusStartupInput, NULL);

    // Определяем класс окна
    WNDCLASS wc = {};
    wc.lpfnWndProc = WindowProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = CLASS_NAME;
    wc.hCursor = LoadCursor(NULL, IDC_ARROW);
    wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);

    RegisterClass(&wc);

    // Получаем размеры экрана
    int screenWidth = GetSystemMetrics(SM_CXSCREEN);
    int screenHeight = GetSystemMetrics(SM_CYSCREEN);

    // Создаем окно
    HWND hwnd = CreateWindowEx(
        WS_EX_TOPMOST, // Окно всегда поверх остальных
        CLASS_NAME,
        L"Fullscreen Window",
        WS_POPUP, // Убираем рамку окна
        0, 0, screenWidth, screenHeight, // Положение и размер окна
        NULL,
        NULL,
        hInstance,
        NULL
    );

    if (hwnd == NULL) {
        GdiplusShutdown(gdiplusToken);
        return 0;
    }

    // Загружаем фоновое изображение из интернета
    std::wstring backgroundUrl = L"https://cdnn21.img.ria.ru/images/07e6/0c/15/1840268869_0:0:3072:1728_1920x0_80_0_0_faef85e8e08135216ec29106ea44c4e7.jpg"; // URL к фоновому изображению
    if (!LoadImageFromURL(backgroundUrl, &backgroundImage)) {
        MessageBox(NULL, L"Не удалось загрузить фоновое изображение", L"Ошибка", MB_OK);
        GdiplusShutdown(gdiplusToken);
        return 0;
    }

    // Опционально: Загружаем изображение для панели задач из интернета
    std::wstring taskbarUrl = L"https://example.com/taskbar_image.png"; // URL к изображению панели задач
    // Раскомментируйте ниже, чтобы загрузить изображение панели задач
    /*
    if (!LoadImageFromURL(taskbarUrl, &taskbarImage)) {
        MessageBox(NULL, L"Не удалось загрузить изображение панели задач", L"Ошибка", MB_OK);
        // Продолжаем без изображения панели задач
    }
    */

    ShowWindow(hwnd, nCmdShow);

    // Главный цикл сообщений
    MSG msg = {};
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    // Завершаем работу GDI+
    GdiplusShutdown(gdiplusToken);

    return 0;
}
