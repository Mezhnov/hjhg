package com.example.myapp

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.material.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.input.PasswordVisualTransformation
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.google.gson.Gson
import java.io.File
import java.io.FileReader
import java.io.FileWriter

data class User(val username: String, val password: String)

class UserManager(private val context: ComponentActivity) {
    private val fileName = "users.json"
    private val gson = Gson()

    // Чтение данных из файла
    fun readUsers(): List<User> {
        val file = File(context.filesDir, fileName)
        return if (file.exists()) {
            FileReader(file).use {
                gson.fromJson(it, Array<User>::class.java).toList()
            }
        } else {
            emptyList()
        }
    }

    // Запись данных в файл
    fun saveUsers(users: List<User>) {
        val file = File(context.filesDir, fileName)
        FileWriter(file).use {
            gson.toJson(users, it)
        }
    }

    // Добавление нового пользователя
    fun addUser(user: User) {
        val users = readUsers().toMutableList()
        users.add(user)
        saveUsers(users)
    }

    // Проверка существует ли пользователь
    fun isUserExist(username: String): Boolean {
        return readUsers().any { it.username == username }
    }

    // Проверка пароля для пользователя
    fun validateUser(username: String, password: String): Boolean {
        return readUsers().any { it.username == username && it.password == password }
    }
}

@Composable
fun LoginScreen(userManager: UserManager) {
    var isLoginMode by remember { mutableStateOf(true) }

    if (isLoginMode) {
        LoginContent(
            onLoginClick = { /* Логика для успешного входа */ },
            onRegisterClick = { isLoginMode = false },
            userManager = userManager
        )
    } else {
        RegisterContent(
            onLoginClick = { isLoginMode = true },
            userManager = userManager
        )
    }
}

@Composable
fun LoginContent(onLoginClick: () -> Unit, onRegisterClick: () -> Unit, userManager: UserManager) {
    val username = remember { mutableStateOf("") }
    val password = remember { mutableStateOf("") }
    var errorMessage by remember { mutableStateOf("") }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFE0E0E0))
    ) {
        Column(
            modifier = Modifier
                .align(Alignment.Center)
                .padding(32.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(
                text = "Messenger App",
                style = MaterialTheme.typography.h4,
                modifier = Modifier.padding(bottom = 32.dp)
            )

            OutlinedTextField(
                value = username.value,
                onValueChange = { username.value = it },
                label = { Text("Username") },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 16.dp)
            )

            OutlinedTextField(
                value = password.value,
                onValueChange = { password.value = it },
                label = { Text("Password") },
                visualTransformation = PasswordVisualTransformation(),
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 24.dp)
            )

            Button(
                onClick = {
                    if (userManager.validateUser(username.value, password.value)) {
                        onLoginClick()
                    } else {
                        errorMessage = "Invalid username or password"
                    }
                },
                modifier = Modifier.fillMaxWidth()
            ) {
                Text("Login")
            }

            if (errorMessage.isNotEmpty()) {
                Text(
                    text = errorMessage,
                    color = Color.Red,
                    style = MaterialTheme.typography.body2,
                    modifier = Modifier.padding(top = 8.dp)
                )
            }

            Spacer(modifier = Modifier.height(16.dp))
            Text(
                text = "Don't have an account? Sign Up",
                color = Color.Blue,
                style = MaterialTheme.typography.body2,
                modifier = Modifier.clickable { onRegisterClick() }
            )
        }
    }
}

@Composable
fun RegisterContent(onLoginClick: () -> Unit, userManager: UserManager) {
    val username = remember { mutableStateOf("") }
    val password = remember { mutableStateOf("") }
    val confirmPassword = remember { mutableStateOf("") }
    var errorMessage by remember { mutableStateOf("") }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFE0E0E0))
    ) {
        Column(
            modifier = Modifier
                .align(Alignment.Center)
                .padding(32.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            Text(
                text = "Create Account",
                style = MaterialTheme.typography.h4,
                modifier = Modifier.padding(bottom = 32.dp)
            )

            OutlinedTextField(
                value = username.value,
                onValueChange = { username.value = it },
                label = { Text("Username") },
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 16.dp)
            )

            OutlinedTextField(
                value = password.value,
                onValueChange = { password.value = it },
                label = { Text("Password") },
                visualTransformation = PasswordVisualTransformation(),
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 16.dp)
            )

            OutlinedTextField(
                value = confirmPassword.value,
                onValueChange = { confirmPassword.value = it },
                label = { Text("Confirm Password") },
                visualTransformation = PasswordVisualTransformation(),
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(bottom = 24.dp)
            )

            Button(
                onClick = {
                    if (password.value != confirmPassword.value) {
                        errorMessage = "Passwords do not match"
                    } else if (userManager.isUserExist(username.value)) {
                        errorMessage = "Username already exists"
                    } else {
                        userManager.addUser(User(username.value, password.value))
                        onLoginClick()
                    }
                },
                modifier = Modifier.fillMaxWidth()
            ) {
                Text("Register")
            }

            if (errorMessage.isNotEmpty()) {
                Text(
                    text = errorMessage,
                    color = Color.Red,
                    style = MaterialTheme.typography.body2,
                    modifier = Modifier.padding(top = 8.dp)
                )
            }

            Spacer(modifier = Modifier.height(16.dp))
            Text(
                text = "Already have an account? Login",
                color = Color.Blue,
                style = MaterialTheme.typography.body2,
                modifier = Modifier.clickable { onLoginClick() }
            )
        }
    }
}

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        val userManager = UserManager(this)

        setContent {
            MaterialTheme {
                LoginScreen(userManager = userManager)
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun DefaultPreview() {
    val userManager = UserManager(Context())
    MaterialTheme {
        LoginScreen(userManager = userManager)
    }
}
