#include <windows.h>
#include <sapi.h>       // Для SAPI
#include <string>
#include <atlbase.h>    // Для CComPtr

#pragma comment(lib, "sapi.lib")

// Глобальные переменные
HINSTANCE hInst;
HWND hMainWnd;

// Прототипы функций
LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
void SpeakText(const std::wstring& text);

int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,
    LPSTR lpCmdLine, int nCmdShow)
{
    hInst = hInstance;

    // Регистрация класса окна
    WNDCLASSEX wcex;
    ZeroMemory(&wcex, sizeof(wcex));
    wcex.cbSize        = sizeof(WNDCLASSEX);
    wcex.style         = CS_HREDRAW | CS_VREDRAW;
    wcex.lpfnWndProc   = WndProc;
    wcex.hInstance     = hInstance;
    wcex.hIcon         = LoadIcon(NULL, IDI_APPLICATION);
    wcex.hCursor       = LoadCursor(NULL, IDC_ARROW);
    wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW+1);
    wcex.lpszClassName = L"MyAppClass";

    if (!RegisterClassEx(&wcex))
    {
        MessageBox(NULL, L"Не удалось зарегистрировать класс окна.", L"Ошибка", MB_OK);
        return FALSE;
    }

    // Создание окна
    hMainWnd = CreateWindow(L"MyAppClass", L"Голосовой помощник",
        WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, 0, 500, 400,
        NULL, NULL, hInstance, NULL);

    if (!hMainWnd)
    {
        MessageBox(NULL, L"Не удалось создать окно.", L"Ошибка", MB_OK);
        return FALSE;
    }

    ShowWindow(hMainWnd, nCmdShow);
    UpdateWindow(hMainWnd);

    // Основной цикл сообщений
    MSG msg;
    while (GetMessage(&msg, NULL, 0, 0))
    {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }
    return (int)msg.wParam;
}

// Обработчик сообщений окна
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    static HWND hButton;

    switch (message)
    {
    case WM_CREATE:
        {
            // Создание кнопки
            hButton = CreateWindow(L"BUTTON", L"Сказать привет",
                WS_TABSTOP | WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON,
                50, 50, 150, 30,
                hWnd, (HMENU)1001, hInst, NULL);
        }
        break;
    case WM_COMMAND:
        {
            int wmId    = LOWORD(wParam);
            int wmEvent = HIWORD(wParam);

            // Обработка нажатия кнопки
            if (wmId == 1001)
            {
                SpeakText(L"Привет! Я ваш голосовой помощник.");
            }
        }
        break;
    case WM_DESTROY:
        PostQuitMessage(0);
        break;
    default:
        return DefWindowProc(hWnd, message, wParam, lParam);
    }
    return 0;
}

// Функция для озвучивания текста
void SpeakText(const std::wstring& text)
{
    // Инициализация COM-библиотеки
    HRESULT hr = CoInitialize(NULL);
    if (FAILED(hr))
    {
        MessageBox(NULL, L"Ошибка инициализации COM.", L"Ошибка", MB_OK);
        return;
    }

    // Создание голосового объекта
    CComPtr<ISpVoice> cpVoice;
    hr = cpVoice.CoCreateInstance(CLSID_SpVoice);
    if (SUCCEEDED(hr))
    {
        // Установка голоса (выбор естественного голоса)
        CComPtr<IEnumSpObjectTokens> cpEnum;
        ULONG ulCount = 0;

        // Получение списка доступных голосов
        hr = SpEnumTokens(SPCAT_VOICES, NULL, NULL, &cpEnum);
        if (SUCCEEDED(hr))
        {
            hr = cpEnum->GetCount(&ulCount);
        }

        // Перебор голосов для поиска естественного
        bool bVoiceSet = false;
        for (ULONG i = 0; i < ulCount; i++)
        {
            CComPtr<ISpObjectToken> cpVoiceToken;
            hr = cpEnum->Item(i, &cpVoiceToken);
            if (SUCCEEDED(hr))
            {
                WCHAR* pszDesc = NULL;
                SpGetDescription(cpVoiceToken, &pszDesc);

                // Проверяем описание голоса на предмет естественности
                std::wstring voiceDesc(pszDesc);
                CoTaskMemFree(pszDesc);

                // Здесь можно добавить проверку на конкретное имя голоса
                // Например, если вы знаете имя естественного голоса
                // В данном примере мы просто выберем первый

                hr = cpVoice->SetVoice(cpVoiceToken);
                bVoiceSet = true;
                break;
            }
        }

        if (bVoiceSet)
        {
            // Озвучивание текста
            hr = cpVoice->Speak(text.c_str(), SPF_ASYNC | SPF_IS_XML, NULL);
        }
        else
        {
            MessageBox(NULL, L"Естественный голос не найден.", L"Ошибка", MB_OK);
        }
    }
    else
    {
        MessageBox(NULL, L"Ошибка создания голосового объекта.", L"Ошибка", MB_OK);
    }

    // Освобождение COM-библиотеки
    CoUninitialize();
}
