# server.py

import socket
import threading
import logging
import os
from urllib.parse import urlparse

# Настройки сервера
HOST = '0.0.0.0'  # Слушать на всех интерфейсах
PORT = 8080
BUFFER_SIZE = 4096  # Размер буфера для передачи данных

# Настройка логирования
logging.basicConfig(
    filename='smp_server.log',
    level=logging.INFO,
    format='%(asctime)s:%(levelname)s:%(message)s'
)

# Разрешенные домены и их корневые директории
allowed_domains = {
    'example.com': 'example',
    'test.com': 'test'
}

def send_large_file(conn, filepath):
    """
    Отправляет файл клиенту частями с соответствующими заголовками.
    """
    if not os.path.exists(filepath):
        logging.error(f"Файл не найден: {filepath}")
        response = "SMP 1.0\nSTATUS: ERROR\nMESSAGE: File not found\n\n"
        conn.send(response.encode())
        return

    try:
        file_size = os.path.getsize(filepath)
        # Определение типа контента по расширению файла
        _, ext = os.path.splitext(filepath)
        ext = ext.lower()
        if ext in ['.html', '.htm']:
            content_type = 'text/html'
        elif ext == '.css':
            content_type = 'text/css'
        elif ext == '.png':
            content_type = 'image/png'
        elif ext in ['.jpg', '.jpeg']:
            content_type = 'image/jpeg'
        elif ext in ['.gif']:
            content_type = 'image/gif'
        elif ext in ['.js']:
            content_type = 'application/javascript'
        else:
            content_type = 'application/octet-stream'

        # Отправка заголовков
        response_headers = (
            "SMP 1.0\n"
            "STATUS: OK\n"
            f"CONTENT-TYPE: {content_type}\n"
            f"CONTENT-LENGTH: {file_size}\n\n"
        )
        conn.send(response_headers.encode())
        logging.info(f"Отправка файла: {filepath}")

        # Отправка файла частями
        with open(filepath, 'rb') as f:
            while True:
                chunk = f.read(BUFFER_SIZE)
                if not chunk:
                    break
                conn.sendall(chunk)
        logging.info(f"Файл отправлен: {filepath}")

    except Exception as e:
        logging.error(f"Ошибка при отправке файла {filepath}: {e}")
        response = f"SMP 1.0\nSTATUS: ERROR\nMESSAGE: Error sending file: {e}\n\n"
        conn.send(response.encode())

def handle_client(conn, addr):
    """
    Обрабатывает подключения клиентов.
    """
    logging.info(f"Подключен клиент: {addr}")
    # Сообщение об успешном подключении
    initial_message = "SMP 1.0\nSTATUS: OK\nMESSAGE: Connected to SMP server\n\n"
    conn.send(initial_message.encode())

    while True:
        try:
            data = b""
            while b"\n\n" not in data:
                part = conn.recv(BUFFER_SIZE)
                if not part:
                    raise ConnectionResetError("Клиент закрыл соединение")
                data += part

            header_data, _, body = data.partition(b"\n\n")
            headers = {}
            for line in header_data.decode().split('\n'):
                if ': ' in line:
                    key, value = line.split(': ', 1)
                    headers[key.strip().upper()] = value.strip()

            action = headers.get('ACTION')
            resource = headers.get('RESOURCE')

            if action == 'GET' and resource:
                # Разбор ресурса для извлечения домена и пути
                parsed = urlparse('smp://' + resource)  # Для использования urlparse
                domain = parsed.hostname
                path = parsed.path.lstrip('/')  # Удаление ведущего '/'

                if domain not in allowed_domains:
                    response = "SMP 1.0\nSTATUS: ERROR\nMESSAGE: Domain not allowed\n\n"
                    conn.send(response.encode())
                    logging.warning(f"Запрошен запрещенный домен: {domain}")
                    continue

                # Соответствие серверной директории
                domain_root = allowed_domains[domain]
                file_path = os.path.join(domain_root, path) if path else os.path.join(domain_root, 'index.html')

                # Предотвращение обхода директорий
                if not os.path.realpath(file_path).startswith(os.path.realpath(domain_root)):
                    response = "SMP 1.0\nSTATUS: ERROR\nMESSAGE: Invalid resource path\n\n"
                    conn.send(response.encode())
                    logging.warning(f"Запрошен некорректный путь ресурса: {file_path}")
                    continue

                # Если путь указывает на директорию, отправить index.html
                if os.path.isdir(file_path):
                    file_path = os.path.join(file_path, 'index.html')

                if os.path.exists(file_path):
                    send_large_file(conn, file_path)
                else:
                    # Ресурс не найден
                    response = "SMP 1.0\nSTATUS: ERROR\nMESSAGE: Resource not found\n\n"
                    conn.send(response.encode())
                    logging.warning(f"Ресурс не найден: {file_path}")
            else:
                response = "SMP 1.0\nSTATUS: ERROR\nMESSAGE: Invalid ACTION or missing RESOURCE\n\n"
                conn.send(response.encode())
                logging.warning(f"Некорректный запрос: ACTION={action}, RESOURCE={resource}")

        except ConnectionResetError as e:
            logging.info(f"Клиент {addr} отключился: {e}")
            break
        except Exception as e:
            logging.error(f"Ошибка при обработке клиента {addr}: {e}")
            break

    conn.close()
    logging.info(f"Соединение с {addr} закрыто")

def start_server():
    """
    Запускает SMP сервер.
    """
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:
        server_socket.bind((HOST, PORT))
        server_socket.listen()
        logging.info(f"SMP Server запущен на {HOST}:{PORT}")

        while True:
            conn, addr = server_socket.accept()
            client_thread = threading.Thread(target=handle_client, args=(conn, addr), daemon=True)
            client_thread.start()

if __name__ == "__main__":
    start_server()
