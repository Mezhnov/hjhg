# flask_app.py

from flask import Flask, request, jsonify
from whoosh.index import open_dir
from whoosh.qparser import MultifieldParser
import nltk
from nltk.stem.snowball import RussianStemmer
from nltk.corpus import stopwords
import re

# Инициализация NLTK
nltk.download('punkt')
nltk.download('stopwords')

app = Flask(__name__)

# Настройки индекса
INDEX_DIR = 'indexdir'
ix = open_dir(INDEX_DIR)

# Настройки стеммера и стоп-слов
stemmer = RussianStemmer()
stop_words = set(stopwords.words('russian'))

def clean_query(query):
    tokens = nltk.word_tokenize(query.lower(), language='russian')
    tokens = [re.sub(r'\W+', '', token) for token in tokens]
    tokens = [token for token in tokens if token and token not in stop_words]
    tokens = [stemmer.stem(token) for token in tokens]
    return ' '.join(tokens)

@app.route('/search', methods=['GET'])
def search():
    query = request.args.get('q', '')
    if not query:
        return jsonify({'status': 'ERROR', 'message': 'Missing query parameter.'}), 400

    try:
        clean_q = clean_query(query)
        parser = MultifieldParser(["title", "content"], schema=ix.schema)
        with ix.searcher() as searcher:
            parsed_query = parser.parse(clean_q)
            results = searcher.search(parsed_query, limit=10)
            hits = [
                {
                    'title': r['title'],
                    'url': r['path'],
                    'description': r.get('description', ''),
                    'logo': r.get('logo', '')  # Путь к логотипу, если есть
                }
                for r in results
            ]
        return jsonify({'status': 'OK', 'results': hits}), 200
    except Exception as e:
        return jsonify({'status': 'ERROR', 'message': f'Search error: {e}'}), 500

if __name__ == '__main__':
    app.run(host='127.0.0.1', port=5000, debug=False)
