#include <windows.h>
#include <gdiplus.h>
#include <wininet.h>
#include <string>
#include <vector>
#include <chrono>
#include <iomanip>
#include <sstream>
#include <locale>
#include <codecvt>
#include <windowsx.h>
#include <mmsystem.h>
#include <CommCtrl.h>
#include <richedit.h>
#include "resource.h"

#pragma comment(lib, "gdiplus.lib")
#pragma comment(lib, "wininet.lib")
#pragma comment(lib, "winmm.lib")
#pragma comment(lib, "comctl32.lib")
#pragma comment(lib, "ole32.lib")
#pragma comment(lib, "oleaut32.lib")

// Идентификаторы для вкладок и контролов
#define IDC_TABCONTROL 101
#define IDC_ADDRESSBAR 102
#define IDC_GO_BUTTON 103
#define IDC_NEW_TAB_BUTTON 104

// Глобальные переменные
HINSTANCE hInst;
HWND hMainWnd;
INITCOMMONCONTROLSEX icex;

// Функция для инициализации общих контролов
void InitCommonControlsExFunc() {
    icex.dwSize = sizeof(INITCOMMONCONTROLSEX);
    icex.dwICC = ICC_TAB_CLASSES;
    InitCommonControlsEx(&icex);
}

// Структура для хранения данных вкладки
struct TabData {
    HWND hwndTab;
    HWND hwndBrowser;
    std::wstring url;
};

// Вектор для хранения вкладок
std::vector<TabData> tabs;
HWND hTabControl;

// Функция для создания браузера внутри вкладки
HWND CreateBrowser(HWND hParent) {
    // Инициализация COM
    CoInitialize(NULL);

    // Создание WebBrowser Control
    HWND hwndBrowser = CreateWindowEx(0, L"Shell.Explorer.2", NULL,
        WS_CHILD | WS_VISIBLE, 0, 0, 800, 600, hParent, NULL, hInst, NULL);

    return hwndBrowser;
}

// Функция для добавления новой вкладки
void AddNewTab(const std::wstring& url) {
    // Создание новой вкладки
    TabData tab;
    tab.url = url;

    // Создание окна для браузера
    tab.hwndBrowser = CreateBrowser(hMainWnd);

    // Добавление вкладки в список
    tabs.push_back(tab);

    // Создание новой вкладки в TabControl с кастомным стилем
    TCITEM tie;
    tie.mask = TCIF_TEXT | TCIF_IMAGE;
    tie.pszText = const_cast<wchar_t*>(url.c_str());
    tie.iImage = -1;  // Можно установить индекс изображения для favicon, если нужно
    TabCtrl_InsertItem(hTabControl, tabs.size() - 1, &tie);
}

// Функция для обновления видимости вкладок
void UpdateTabVisibility(int activeTabIndex) {
    for (int i = 0; i < tabs.size(); ++i) {
        ShowWindow(tabs[i].hwndBrowser, (i == activeTabIndex) ? SW_SHOW : SW_HIDE);
    }
}

// Функция для обновления стиля вкладок
void UpdateTabStyle(int activeTabIndex) {
    for (int i = 0; i < tabs.size(); ++i) {
        HWND hwndTab = TabCtrl_GetItem(hTabControl, i);
        
        // Для активной вкладки используем светлый фон и темный текст
        if (i == activeTabIndex) {
            SetTabControlItemColor(hwndTab, RGB(255, 255, 255), RGB(0, 0, 0));
        } else {
            // Для неактивных вкладок темный фон и светлый текст
            SetTabControlItemColor(hwndTab, RGB(240, 240, 240), RGB(100, 100, 100));
        }
    }
}

// Функция для установки цветов вкладки
void SetTabControlItemColor(HWND hwndTab, COLORREF backgroundColor, COLORREF textColor) {
    // Установка фона и текста для вкладки
    HDC hdc = GetDC(hwndTab);
    SetBkColor(hdc, backgroundColor);
    SetTextColor(hdc, textColor);
    InvalidateRect(hwndTab, NULL, TRUE);
    ReleaseDC(hwndTab, hdc);
}

// Обработчик создания окна
LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam) {
    switch(msg) {
        case WM_CREATE: {
            // Создание адресной строки
            HWND hAddress = CreateWindowEx(WS_EX_CLIENTEDGE, L"EDIT", NULL,
                WS_CHILD | WS_VISIBLE | WS_BORDER | ES_AUTOHSCROLL,
                10, 10, 600, 25, hwnd, (HMENU)IDC_ADDRESSBAR, hInst, NULL);

            // Создание кнопки "Go"
            CreateWindowEx(0, L"BUTTON", L"Go",
                WS_CHILD | WS_VISIBLE,
                620, 10, 50, 25, hwnd, (HMENU)IDC_GO_BUTTON, hInst, NULL);

            // Создание кнопки для новой вкладки
            CreateWindowEx(0, L"BUTTON", L"New Tab",
                WS_CHILD | WS_VISIBLE,
                680, 10, 80, 25, hwnd, (HMENU)IDC_NEW_TAB_BUTTON, hInst, NULL);

            // Создание TabControl
            hTabControl = CreateWindow(WC_TABCONTROL, L"",
                WS_CHILD | WS_VISIBLE | WS_CLIPSIBLINGS | WS_CLIPCHILDREN,
                10, 45, 760, 500, hwnd, (HMENU)IDC_TABCONTROL, hInst, NULL);

            // Добавление первой вкладки
            AddNewTab(L"https://www.google.com");

            // Инициализация видимости вкладок
            UpdateTabVisibility(0);

            // Обновление стиля вкладок
            UpdateTabStyle(0);

            break;
        }
        case WM_COMMAND: {
            if (LOWORD(wParam) == IDC_GO_BUTTON) {
                // Получение URL из адресной строки
                wchar_t url[2048];
                GetWindowText(GetDlgItem(hwnd, IDC_ADDRESSBAR), url, 2048);

                // Навигация в текущей вкладке
                if (!tabs.empty()) {
                    // Пример: предполагается, что hwndBrowser поддерживает IWebBrowser2
                    // Для полной реализации потребуется дополнительный код
                }
            } else if (LOWORD(wParam) == IDC_NEW_TAB_BUTTON) {
                // Добавление новой вкладки
                AddNewTab(L"https://www.newtab.com");

                // Переключение на новую вкладку
                TabCtrl_SetCurSel(hTabControl, tabs.size() - 1);
                UpdateTabVisibility(tabs.size() - 1);
                UpdateTabStyle(tabs.size() - 1);
            }
            break;
        }
        case WM_NOTIFY: {
            if (((LPNMHDR)lParam)->idFrom == IDC_TABCONTROL && ((LPNMHDR)lParam)->code == TCN_SELCHANGE) {
                // Переключение вкладки
                int selectedTab = TabCtrl_GetCurSel(hTabControl);
                UpdateTabVisibility(selectedTab);
                UpdateTabStyle(selectedTab);
            }
            break;
        }
        case WM_DESTROY: {
            PostQuitMessage(0);
            break;
        }
        default:
            return DefWindowProc(hwnd, msg, wParam, lParam);
    }
    return 0;
}

// Точка входа
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {
    hInst = hInstance;
    InitCommonControlsExFunc();

    // Регистрация класса окна
    WNDCLASSEX wc = {0};
    wc.cbSize = sizeof(WNDCLASSEX);
    wc.style = CS_HREDRAW | CS_VREDRAW;
    wc.lpfnWndProc = WndProc;
    wc.hInstance = hInstance;
    wc.hCursor = LoadCursor(NULL, IDC_ARROW);
    wc.lpszClassName = L"SimpleBrowserClass";
    RegisterClassEx(&wc);

    // Создание окна
    hMainWnd = CreateWindowEx(0, L"SimpleBrowserClass", L"Простой Браузер",
        WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, 800, 600,
        NULL, NULL, hInstance, NULL);

    ShowWindow(hMainWnd, nCmdShow);
    UpdateWindow(hMainWnd);

    // Главный цикл сообщений
    MSG msg;
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    return (int)msg.wParam;
}
