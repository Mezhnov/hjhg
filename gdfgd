// Включаем необходимые заголовочные файлы
#include <windows.h>
#include <gdiplus.h>
#include <wininet.h>
#include <string>
#include <vector>
#include <chrono>
#include <iomanip>
#include <sstream>
#include <locale>
#include <windowsx.h>
#include <mmsystem.h>  // Для PlaySound
#include <CommCtrl.h>  // Для common controls
#include <richedit.h>  // Для rich edit controls
//#include "resource.h"  // Если у вас есть файл ресурсов, раскомментируйте эту строку
#include <map>
#include <functional>  // Для std::function
#include <memory>      // Для std::shared_ptr
#include <cctype>      // Для isdigit и isalpha
#include <stack>       // Для std::stack
#include <cmath>       // Для fmod

// Линкуем необходимые библиотеки
#pragma comment(lib, "gdiplus.lib")
#pragma comment(lib, "wininet.lib")
#pragma comment(lib, "comctl32.lib")
#pragma comment(lib, "Winmm.lib")

// Определение идентификаторов
#define IDM_FILE_NEW        1001
#define IDM_FILE_OPEN       1002
#define IDM_FILE_SAVE       1003
#define IDM_FILE_EXIT       1004
#define IDM_EDIT_UNDO       2001
#define IDM_EDIT_REDO       2002
#define IDM_EDIT_CUT        2003
#define IDM_EDIT_COPY       2004
#define IDM_EDIT_PASTE      2005
#define IDM_HELP_ABOUT      3001

// Глобальные переменные
HINSTANCE hInst;
HWND hMainWnd;

// Объявления функций
LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
void CreateMenus(HWND hWnd);
void CreateToolbar(HWND hWnd);
void CreateStatusBar(HWND hWnd);
void CreateDockablePanes(HWND hWnd);

int APIENTRY wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPWSTR lpCmdLine, int nCmdShow)
{
    hInst = hInstance;

    // Инициализируем common controls
    INITCOMMONCONTROLSEX icex = { sizeof(INITCOMMONCONTROLSEX) };
    icex.dwICC = ICC_WIN95_CLASSES | ICC_BAR_CLASSES;
    InitCommonControlsEx(&icex);

    // Регистрируем класс окна
    WNDCLASSEX wcex = { 0 };
    wcex.cbSize = sizeof(WNDCLASSEX);
    wcex.style          = CS_HREDRAW | CS_VREDRAW;
    wcex.lpfnWndProc    = WndProc;
    wcex.cbClsExtra     = 0;
    wcex.cbWndExtra     = 0;
    wcex.hInstance      = hInst;
    wcex.hIcon          = LoadIcon(nullptr, IDI_APPLICATION);
    wcex.hCursor        = LoadCursor(nullptr, IDC_ARROW);
    wcex.hbrBackground  = (HBRUSH)(COLOR_WINDOW + 1);
    wcex.lpszMenuName   = nullptr;
    wcex.lpszClassName  = L"UnityCloneClass";
    wcex.hIconSm        = LoadIcon(nullptr, IDI_APPLICATION);

    RegisterClassEx(&wcex);

    // Создаем главное окно
    hMainWnd = CreateWindowW(L"UnityCloneClass", L"Unity Clone IDE", WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, 0, 1280, 720, nullptr, nullptr, hInst, nullptr);

    if (!hMainWnd)
    {
        MessageBox(nullptr, L"Не удалось создать главное окно!", L"Ошибка", MB_OK);
        return FALSE;
    }

    ShowWindow(hMainWnd, nCmdShow);
    UpdateWindow(hMainWnd);

    // Главный цикл сообщений
    MSG msg;
    while (GetMessage(&msg, nullptr, 0, 0))
    {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    return (int)msg.wParam;
}

// Обработчик окна
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    static HWND hStatusBar;

    switch (message)
    {
    case WM_CREATE:
        CreateMenus(hWnd);
        CreateToolbar(hWnd);
        CreateStatusBar(hWnd);
        CreateDockablePanes(hWnd);
        break;
    case WM_SIZE:
        {
            // Обновляем размер статусной строки
            SendMessage(hStatusBar, WM_SIZE, 0, 0);
            // Здесь можно обновить размеры других элементов при изменении размера окна
        }
        break;
    case WM_COMMAND:
        {
            int wmId = LOWORD(wParam);
            // Обработка команд меню
            switch (wmId)
            {
            case IDM_FILE_NEW:
                MessageBox(hWnd, L"Новый проект создан.", L"Файл", MB_OK);
                break;
            case IDM_FILE_OPEN:
                MessageBox(hWnd, L"Открытие проекта.", L"Файл", MB_OK);
                break;
            case IDM_FILE_SAVE:
                MessageBox(hWnd, L"Проект сохранен.", L"Файл", MB_OK);
                break;
            case IDM_FILE_EXIT:
                DestroyWindow(hWnd);
                break;
            case IDM_EDIT_UNDO:
                MessageBox(hWnd, L"Отменить действие.", L"Правка", MB_OK);
                break;
            case IDM_EDIT_REDO:
                MessageBox(hWnd, L"Повторить действие.", L"Правка", MB_OK);
                break;
            case IDM_EDIT_CUT:
                MessageBox(hWnd, L"Вырезать.", L"Правка", MB_OK);
                break;
            case IDM_EDIT_COPY:
                MessageBox(hWnd, L"Копировать.", L"Правка", MB_OK);
                break;
            case IDM_EDIT_PASTE:
                MessageBox(hWnd, L"Вставить.", L"Правка", MB_OK);
                break;
            case IDM_HELP_ABOUT:
                MessageBox(hWnd, L"Unity Clone IDE\nВерсия 1.0", L"О программе", MB_OK);
                break;
            default:
                return DefWindowProc(hWnd, message, wParam, lParam);
            }
        }
        break;
    case WM_DESTROY:
        PostQuitMessage(0);
        break;
    default:
        return DefWindowProc(hWnd, message, wParam, lParam);
    }
    return 0;
}

// Создание меню
void CreateMenus(HWND hWnd)
{
    HMENU hMenuBar = CreateMenu();

    HMENU hFileMenu = CreateMenu();
    HMENU hEditMenu = CreateMenu();
    HMENU hWindowMenu = CreateMenu();
    HMENU hHelpMenu = CreateMenu();

    AppendMenu(hFileMenu, MF_STRING, IDM_FILE_NEW, L"&New Project\tCtrl+N");
    AppendMenu(hFileMenu, MF_STRING, IDM_FILE_OPEN, L"&Open Project...\tCtrl+O");
    AppendMenu(hFileMenu, MF_STRING, IDM_FILE_SAVE, L"&Save Project\tCtrl+S");
    AppendMenu(hFileMenu, MF_SEPARATOR, 0, nullptr);
    AppendMenu(hFileMenu, MF_STRING, IDM_FILE_EXIT, L"E&xit");

    AppendMenu(hEditMenu, MF_STRING, IDM_EDIT_UNDO, L"&Undo\tCtrl+Z");
    AppendMenu(hEditMenu, MF_STRING, IDM_EDIT_REDO, L"&Redo\tCtrl+Y");
    AppendMenu(hEditMenu, MF_SEPARATOR, 0, nullptr);
    AppendMenu(hEditMenu, MF_STRING, IDM_EDIT_CUT, L"Cu&t\tCtrl+X");
    AppendMenu(hEditMenu, MF_STRING, IDM_EDIT_COPY, L"&Copy\tCtrl+C");
    AppendMenu(hEditMenu, MF_STRING, IDM_EDIT_PASTE, L"&Paste\tCtrl+V");

    AppendMenu(hHelpMenu, MF_STRING, IDM_HELP_ABOUT, L"&About");

    AppendMenu(hMenuBar, MF_POPUP, (UINT_PTR)hFileMenu, L"&File");
    AppendMenu(hMenuBar, MF_POPUP, (UINT_PTR)hEditMenu, L"&Edit");
    AppendMenu(hMenuBar, MF_POPUP, (UINT_PTR)hWindowMenu, L"&Window");
    AppendMenu(hMenuBar, MF_POPUP, (UINT_PTR)hHelpMenu, L"&Help");

    SetMenu(hWnd, hMenuBar);
}

// Создание панели инструментов
void CreateToolbar(HWND hWnd)
{
    // Создаем пустую панель инструментов
    HWND hToolbar = CreateWindowEx(0, TOOLBARCLASSNAME, nullptr,
        WS_CHILD | WS_VISIBLE | TBSTYLE_WRAPABLE | TBSTYLE_TOOLTIPS, 
        0, 0, 0, 0, hWnd, nullptr, hInst, nullptr);

    // Здесь можно добавить кнопки и изображения для панели инструментов
}

// Создание статусной строки
void CreateStatusBar(HWND hWnd)
{
    HWND hStatus = CreateWindowEx(0, STATUSCLASSNAME, nullptr,
        WS_CHILD | WS_VISIBLE | SBARS_SIZEGRIP, 
        0, 0, 0, 0, hWnd, (HMENU)1, hInst, nullptr);

    int statwidths[] = { 100, -1 };
    SendMessage(hStatus, SB_SETPARTS, sizeof(statwidths)/sizeof(int), (LPARAM)statwidths);
    SendMessage(hStatus, SB_SETTEXT, 0, (LPARAM)L"Готово");

    // Сохраняем handle статусной строки для обновления в WndProc
    SetWindowLongPtr(hWnd, GWLP_USERDATA, (LONG_PTR)hStatus);
}

// Создание докируемых панелей
void CreateDockablePanes(HWND hWnd)
{
    // Размеры окна
    RECT rect;
    GetClientRect(hWnd, &rect);

    int width = rect.right - rect.left;
    int height = rect.bottom - rect.top;
    int panelWidth = 200;
    int panelHeight = 200;

    // Создаем панель "Project"
    HWND hProjectPane = CreateWindowEx(WS_EX_CLIENTEDGE, L"STATIC", L"Project Pane",
        WS_CHILD | WS_VISIBLE | SS_LEFT, 
        0, 0, panelWidth, height - panelHeight, 
        hWnd, (HMENU)2, hInst, nullptr);

    // Создаем панель "Hierarchy"
    HWND hHierarchyPane = CreateWindowEx(WS_EX_CLIENTEDGE, L"STATIC", L"Hierarchy Pane",
        WS_CHILD | WS_VISIBLE | SS_LEFT, 
        0, height - panelHeight, panelWidth, panelHeight, 
        hWnd, (HMENU)3, hInst, nullptr);

    // Создаем панель "Inspector"
    HWND hInspectorPane = CreateWindowEx(WS_EX_CLIENTEDGE, L"STATIC", L"Inspector Pane",
        WS_CHILD | WS_VISIBLE | SS_LEFT, 
        width - panelWidth, 0, panelWidth, height, 
        hWnd, (HMENU)4, hInst, nullptr);

    // Создаем панель "Scene"
    HWND hScenePane = CreateWindowEx(WS_EX_CLIENTEDGE, L"STATIC", L"Scene Pane",
        WS_CHILD | WS_VISIBLE | SS_LEFT, 
        panelWidth, 0, width - 2 * panelWidth, height / 2, 
        hWnd, (HMENU)5, hInst, nullptr);

    // Создаем панель "Game"
    HWND hGamePane = CreateWindowEx(WS_EX_CLIENTEDGE, L"STATIC", L"Game Pane",
        WS_CHILD | WS_VISIBLE | SS_LEFT, 
        panelWidth, height / 2, width - 2 * panelWidth, height / 2, 
        hWnd, (HMENU)6, hInst, nullptr);

    // Создаем панель "Console"
    HWND hConsolePane = CreateWindowEx(WS_EX_CLIENTEDGE, L"STATIC", L"Console Pane",
        WS_CHILD | WS_VISIBLE | SS_LEFT, 
        0, height - panelHeight, width, panelHeight, 
        hWnd, (HMENU)7, hInst, nullptr);
}

// Остальная часть кода...
