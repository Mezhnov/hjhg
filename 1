import sys
import socket
import threading
import logging

# Настройки сервера
HOST = '127.0.0.1'
PORT = 8080

# Настройка логирования
logging.basicConfig(filename='smp_server.log', level=logging.INFO, format='%(asctime)s:%(levelname)s:%(message)s')

clients = {}
domain_mapping = {
    'example.com': {
        'html_file': 'index.html',
        'css_file': 'styles.css',
        'image_file': 'img.png'
    },
    'test.com': {
        'html_file': 'test.html',
        'css_file': 'style_test.css',
        'image_file': 'image_test.jpg'
    }
}


def handle_client(conn, addr):
    username = None
    logging.info(f"Connected: {addr}")
    conn.send("SMP 1.0\nSTATUS: OK\nMESSAGE: Connected successfully\n".encode())

    while True:
        try:
            data = conn.recv(1024).decode()
            if not data:
                break

            lines = data.split('\n')
            headers = {}
            message = ""
            for line in lines:
                if ': ' in line:
                    key, value = line.split(': ', 1)
                    headers[key] = value.strip()
                else:
                    message = line.strip()

            action = headers.get('ACTION')
            sender = headers.get('FROM')
            receiver = headers.get('TO')

            if action == 'CONNECT':
                username = sender
                clients[username] = conn
                response = "SMP 1.0\nSTATUS: OK\nMESSAGE: Connected successfully\n"
            elif action == 'SEND':
                if receiver in clients:
                    clients[receiver].send(
                        f"SMP 1.0\nACTION: RECEIVE\nFROM: {sender}\nLENGTH: {len(message)}\n\n{message}".encode())
                    response = "SMP 1.0\nSTATUS: OK\nMESSAGE: Message delivered successfully\n"
                else:
                    response = "SMP 1.0\nSTATUS: ERROR\nMESSAGE: Recipient not found\n"
            elif action == 'GET':
                resource = headers.get('RESOURCE')
                if resource in domain_mapping:
                    response = f"SMP 1.0\nSTATUS: OK\nRESOURCE: {domain_mapping[resource]['html_file']}\n"
                elif resource.endswith('.css'):
                    css_found = False
                    for mapping in domain_mapping.values():
                        if mapping['css_file'] == resource:
                            css_found = True
                            try:
                                with open(mapping['css_file'], 'r', encoding='utf-8') as f:
                                    css_content = f.read()
                                response = f"SMP 1.0\nSTATUS: OK\nRESOURCE: {mapping['css_file']}\n\n{css_content}"
                            except FileNotFoundError:
                                response = f"SMP 1.0\nSTATUS: ERROR\nMESSAGE: CSS file not found\n"
                            break
                    if not css_found:
                        response = f"SMP 1.0\nSTATUS: ERROR\nMESSAGE: CSS file not found\n"
                elif resource.endswith(('.jpg', '.png', '.js')):
                    try:
                        with open(resource, 'rb') as f:
                            file_content = f.read()
                        conn.sendall(file_content)  # Отправка бинарного файла без декодирования
                        continue  # Пропускаем дальнейшую обработку
                    except FileNotFoundError:
                        response = f"SMP 1.0\nSTATUS: ERROR\nMESSAGE: Resource not found\n"
                else:
                    response = f"SMP 1.0\nSTATUS: ERROR\nMESSAGE: Resource not found\n"

            else:
                response = "SMP 1.0\nSTATUS: ERROR\nMESSAGE: Invalid action\n"

            conn.send(response.encode())
        except Exception as e:
            logging.error(f"Error: {e}")
            break

    if username in clients:
        del clients[username]
        logging.info(f"{username} disconnected.")
    conn.close()
    logging.info(f"Disconnected: {addr}")


def start_server():
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:
        server_socket.bind((HOST, PORT))
        server_socket.listen()
        logging.info(f"Server started on {HOST}:{PORT}")

        while True:
            conn, addr = server_socket.accept()
            threading.Thread(target=handle_client, args=(conn, addr)).start()


if __name__ == "__main__":
    start_server()
