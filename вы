from flask import Flask, request, jsonify
import socket
import threading
import logging
import os
import json
from urllib.parse import urlparse, parse_qs
from whoosh.index import open_dir, create_in
from whoosh.qparser import MultifieldParser
from whoosh.fields import Schema, TEXT, ID, STORED
import nltk
from nltk.stem.snowball import RussianStemmer
from nltk.corpus import stopwords
import re

# Настройки сервера
HOST = '0.0.0.0'  # Слушать на всех интерфейсах
PORT = 8080
BUFFER_SIZE = 4096  # Размер буфера для передачи данных

# Настройка логирования
logging.basicConfig(
    filename='smp_server.log',
    level=logging.INFO,
    format='%(asctime)s:%(levelname)s:%(message)s'
)

# Разрешенные домены и их корневые директории
allowed_domains = {
    'example.com': 'example',
    'test.com': 'test',
    'search.com': 'search'   # Добавляем домен для поисковой системы
}

# Инициализация NLTK ресурсов
nltk.download('punkt')
nltk.download('stopwords')

# Настройка поискового индекса
index_dir = 'indexdir'

if not os.path.exists(index_dir):
    os.mkdir(index_dir)
    # Определяем схему для индекса
    schema = Schema(
        path=ID(stored=True, unique=True),
        title=TEXT(stored=True),
        content=TEXT,
        description=STORED,
        logo=STORED
    )
    ix = create_in(index_dir, schema)
    logging.info(f"Создан новый индекс в директории: {index_dir}")
else:
    ix = open_dir(index_dir)
    logging.info(f"Открыт существующий индекс из директории: {index_dir}")

# Настройка стеммера и стоп-слов
stemmer = RussianStemmer()
stop_words = set(stopwords.words('russian'))


def clean_query(query):
    """
    Очищает и обрабатывает поисковый запрос.
    """
    tokens = nltk.word_tokenize(query.lower(), language='russian')
    tokens = [re.sub(r'\W+', '', token) for token in tokens]
    tokens = [token for token in tokens if token and token not in stop_words]
    tokens = [stemmer.stem(token) for token in tokens]
    return ' '.join(tokens)


def handle_search(query):
    """
    Выполняет поиск по индексу и возвращает результаты.
    """
    clean_q = clean_query(query)
    parser = MultifieldParser(["title", "content"], schema=ix.schema)
    with ix.searcher() as searcher:
        query_obj = parser.parse(clean_q)
        results = searcher.search(query_obj, limit=10)
        hits = [
            {
                'title': r['title'],
                'url': r['path'],
                'description': r.get('description', ''),
                'logo': r.get('logo', '')  # Путь к логотипу, если есть
            }
            for r in results
        ]
    return hits


def handle_search_action(headers):
    """
    Обрабатывает поисковый запрос ACTION: SEARCH.
    """
    query = headers.get('QUERY', '')
    if not query:
        return {
            'status': 'ERROR',
            'message': 'Missing QUERY parameter.'
        }
    try:
        results = handle_search(query)
        return {
            'status': 'OK',
            'results': results
        }
    except Exception as e:
        logging.error(f"Ошибка при поиске: {e}")
        return {
            'status': 'ERROR',
            'message': f"Search error: {e}"
        }


def send_response(conn, status, content_type, body):
    """
    Отправляет ответ клиенту в формате SMP.
    """
    content_length = len(body)
    response_headers = (
        f"SMP 1.0\n"
        f"STATUS: {status}\n"
        f"CONTENT-TYPE: {content_type}\n"
        f"CONTENT-LENGTH: {content_length}\n\n"
    )
    try:
        conn.sendall(response_headers.encode() + body)
        logging.info(f"Отправлен ответ: STATUS={status}, CONTENT-TYPE={content_type}, CONTENT-LENGTH={content_length}")
    except Exception as e:
        logging.error(f"Ошибка при отправке ответа: {e}")


def handle_client(conn, addr):
    """
    Обрабатывает подключения клиентов в отдельных потоках.
    """
    logging.info(f"Подключен клиент: {addr}")

    while True:
        try:
            data = b""
            while b"\n\n" not in data:
                part = conn.recv(BUFFER_SIZE)
                if not part:
                    raise ConnectionResetError("Клиент закрыл соединение")
                data += part

            header_data, _, body = data.partition(b"\n\n")
            headers = {}
            for line in header_data.decode().split('\n'):
                if ': ' in line:
                    key, value = line.split(': ', 1)
                    headers[key.strip().upper()] = value.strip()

            action = headers.get('ACTION')
            resource = headers.get('RESOURCE')

            if action == 'GET' and resource:
                parsed = urlparse('smp://' + resource)
                domain = parsed.hostname
                path = parsed.path.lstrip('/') 

                if domain not in allowed_domains:
                    message = "Domain not allowed"
                    response = (
                        f"SMP 1.0\n"
                        f"STATUS: ERROR\n"
                        f"MESSAGE: {message}\n"
                        f"CONTENT-TYPE: text/plain\n"
                        f"CONTENT-LENGTH: {len(message)}\n\n"
                        f"{message}"
                    )
                    conn.sendall(response.encode())
                    logging.warning(f"Запрошен запрещенный домен: {domain}")
                    continue

                # Здесь ваш код для отправки ресурсов
                # Вставьте необходимый код для работы с ресурсами

            elif action == 'SEARCH':
                query = headers.get('QUERY', '')
                if not query:
                    message = "Missing QUERY parameter."
                    response = (
                        f"SMP 1.0\n"
                        f"STATUS: ERROR\n"
                        f"MESSAGE: {message}\n"
                        f"CONTENT-TYPE: text/plain\n"
                        f"CONTENT-LENGTH: {len(message)}\n\n"
                        f"{message}"
                    )
                    conn.sendall(response.encode())
                    logging.warning(f"Поисковый запрос без QUERY: {addr}")
                    continue

                logging.info(f"Выполняется поиск для запроса: '{query}' от клиента {addr}")
                search_results = handle_search(query)

                response_body = json.dumps(search_results).encode('utf-8')
                response_headers = (
                    f"SMP 1.0\n"
                    f"STATUS: OK\n"
                    f"CONTENT-TYPE: application/json\n"
                    f"CONTENT-LENGTH: {len(response_body)}\n\n"
                )
                conn.sendall(response_headers.encode() + response_body)
                logging.info(f"Отправлены результаты поиска клиенту {addr}")

            else:
                message = "Invalid ACTION or missing RESOURCE"
                response = (
                    f"SMP 1.0\n"
                    f"STATUS: ERROR\n"
                    f"MESSAGE: {message}\n"
                    f"CONTENT-TYPE: text/plain\n"
                    f"CONTENT-LENGTH: {len(message)}\n\n"
                    f"{message}"
                )
                conn.sendall(response.encode())
                logging.warning(f"Некорректный запрос: ACTION={action}, RESOURCE={resource}")

        except ConnectionResetError as e:
            logging.info(f"Клиент {addr} отключился: {e}")
            break
        except Exception as e:
            logging.error(f"Ошибка при обработке клиента {addr}: {e}")
            break

    conn.close()
    logging.info(f"Соединение с {addr} закрыто")


def start_server():
    """
    Запускает SMP сервер для прослушивания входящих подключений.
    """
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:
        server_socket.bind((HOST, PORT))
        server_socket.listen()
        logging.info(f"SMP Server запущен на {HOST}:{PORT}")

        while True:
            conn, addr = server_socket.accept()
            client_thread = threading.Thread(target=handle_client, args=(conn, addr), daemon=True)
            client_thread.start()

if __name__ == '__main__':
    start_server()
