#include <windows.h>
#include <string>
#include <chrono>
#include <iomanip>
#include <sstream>

using namespace std;

// Объявляем переменную для хранения дескриптора изображения
HBITMAP hBitmap = NULL;

// Функция для получения текущего времени в строковом формате
wstring GetCurrentTimeString() {
    using namespace std::chrono;
    auto now = system_clock::now();
    std::time_t now_c = system_clock::to_time_t(now);
    std::tm parts;
    localtime_s(&parts, &now_c);
    std::wstringstream ss;
    ss << std::put_time(&parts, L"%H:%M"); // Формат времени HH:MM
    return ss.str();
}

// Функция для загрузки изображения
bool LoadImageFromFile(const wchar_t* filename) {
    // Загружаем изображение из файла
    hBitmap = (HBITMAP)LoadImage(NULL, filename, IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE);
    return hBitmap != NULL;
}

// Функция для рисования изображения
void DrawBackground(HDC hdc) {
    if (hBitmap) {
        HDC hdcMem = CreateCompatibleDC(hdc);
        HGDIOBJ oldBitmap = SelectObject(hdcMem, hBitmap);

        BITMAP bitmap;
        GetObject(hBitmap, sizeof(BITMAP), &bitmap);
        // Рисуем изображение
        BitBlt(hdc, 0, 0, bitmap.bmWidth, bitmap.bmHeight, hdcMem, 0, 0, SRCCOPY);

        SelectObject(hdcMem, oldBitmap);
        DeleteDC(hdcMem);
    }
}

LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
    switch (uMsg) {
    case WM_DESTROY:
        DeleteObject(hBitmap); // Освобождаем ресурс изображения
        PostQuitMessage(0);
        return 0;

    case WM_KEYDOWN:
        // Проверяем нажатие клавиши Esc
        if (wParam == VK_ESCAPE) {
            DestroyWindow(hwnd); // Закрыть окно
        }
        return 0;

    case WM_PAINT: {
        PAINTSTRUCT ps;
        HDC hdc = BeginPaint(hwnd, &ps);

        // Рисуем изображение как фон
        DrawBackground(hdc);

        // Рисуем нижнюю панель
        RECT panelRect = { 0, ps.rcPaint.bottom - 40, ps.rcPaint.right, ps.rcPaint.bottom };
        FillRect(hdc, &panelRect, (HBRUSH)(COLOR_BTNFACE + 1)); // Цвет панели

        // Получаем текущее время
        wstring timeString = GetCurrentTimeString();
        wstring langString = L"РУС"; // Статичное значение языка

        // Устанавливаем шрифт
        HFONT hFont = CreateFont(
            16, 0, 0, 0, FW_NORMAL, FALSE, FALSE, FALSE,
            DEFAULT_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, DEFAULT_FD_GROW, L"Segoe UI");
        SelectObject(hdc, hFont);

        // Получаем размеры текста для центрирования
        SIZE timeSize;
        GetTextExtentPoint32(hdc, timeString.c_str(), timeString.size(), &timeSize);
        SIZE langSize;
        GetTextExtentPoint32(hdc, langString.c_str(), langString.size(), &langSize);

        // Рассчитываем координаты для расположения текста
        float xTime = panelRect.right - timeSize.cx - langSize.cx - 30; // Увеличен отступ от правого края
        float y = panelRect.bottom - timeSize.cy - 10; // Отступ от нижней границы

        // Рисуем текст без фона
        SetTextColor(hdc, RGB(0, 0, 0)); // Черный цвет текста
        TextOut(hdc, xTime, y, timeString.c_str(), timeString.size());
        TextOut(hdc, xTime - langSize.cx - 10, y, langString.c_str(), langString.size());

        // Освобождаем ресурсы
        DeleteObject(hFont);
        EndPaint(hwnd, &ps);
        return 0;
    }

    default:
        return DefWindowProc(hwnd, uMsg, wParam, lParam);
    }
}

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE, LPSTR, int nCmdShow) {
    const wchar_t CLASS_NAME[] = L"FullscreenWindowClass";

    // Определяем класс окна
    WNDCLASS wc = {};
    wc.lpfnWndProc = WindowProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = CLASS_NAME;
    wc.hCursor = LoadCursor(NULL, IDC_ARROW);
    wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);

    RegisterClass(&wc);

    // Получаем размеры экрана
    int screenWidth = GetSystemMetrics(SM_CXSCREEN);
    int screenHeight = GetSystemMetrics(SM_CYSCREEN);

    // Создаем окно
    HWND hwnd = CreateWindowEx(
        WS_EX_TOPMOST, // Окно всегда поверх остальных
        CLASS_NAME,
        L"My Fullscreen Window",
        WS_POPUP, // Убираем рамку окна
        0, 0, screenWidth, screenHeight, // Положение и размер окна
        NULL,
        NULL,
        hInstance,
        NULL
    );

    if (hwnd == NULL) return 0;

    // Загружаем изображение из локального файла
    std::wstring imagePath = L"Resources\\afrikanskii-lev.orig.jpg"; // Убедитесь, что этот файл существует
    if (!LoadImageFromFile(imagePath.c_str())) {
        MessageBox(NULL, L"Не удалось загрузить изображение.", L"Ошибка", MB_OK | MB_ICONERROR);
        return 0;
    }

    ShowWindow(hwnd, nCmdShow);

    // Главный цикл сообщений
    MSG msg = {};
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    return 0;
}
