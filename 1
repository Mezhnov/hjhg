import sys
import socket
import threading
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QTabWidget, QLineEdit, QPushButton,
    QVBoxLayout, QWidget, QTextBrowser, QMessageBox, QHBoxLayout, QLabel
)
from PyQt5.QtGui import QPixmap
from PyQt5.QtCore import Qt

# Настройки сервера
HOST = '192.168.0.150'
PORT = 8080

class Browser(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("SMP Browser")
        self.setGeometry(100, 100, 1000, 600)
        self.setStyleSheet("background-color: #ffffff; font-family: 'Arial', sans-serif;")

        self.tabWidget = QTabWidget()
        self.setCentralWidget(self.tabWidget)

        self.history = []  # To store browsing history
        self.createMainTab()

    def createMainTab(self):
        urlWidget = QWidget()

        self.urlEdit = QLineEdit()
        self.urlEdit.setPlaceholderText("Введите URL (smp://...)")
        self.urlEdit.setStyleSheet("padding: 10px; border: 1px solid #ccc; border-radius: 4px;")

        self.loadButton = self.createButton("Загрузить")
        self.loadButton.clicked.connect(self.loadUrlInCurrentTab)

        self.addTabButton = self.createButton("Добавить вкладку")
        self.addTabButton.clicked.connect(self.addTab)

        self.backButton = self.createButton("Назад")
        self.backButton.clicked.connect(self.goBack)

        self.forwardButton = self.createButton("Вперед")
        self.forwardButton.clicked.connect(self.goForward)

        self.refreshButton = self.createButton("Обновить")
        self.refreshButton.clicked.connect(self.refreshPage)

        buttonLayout = QHBoxLayout()
        buttonLayout.addWidget(self.backButton)
        buttonLayout.addWidget(self.forwardButton)
        buttonLayout.addWidget(self.refreshButton)
        buttonLayout.addWidget(self.loadButton)
        buttonLayout.addWidget(self.addTabButton)

        layout = QVBoxLayout()
        layout.addWidget(self.urlEdit)
        layout.addLayout(buttonLayout)

        self.contentWidget = QTextBrowser()
        self.imageLabel = QLabel()
        layout.addWidget(self.contentWidget)
        layout.addWidget(self.imageLabel)

        urlWidget.setLayout(layout)

        self.tabWidget.addTab(urlWidget, "Главная")

    def createButton(self, text):
        button = QPushButton(text)
        button.setStyleSheet(
            "padding: 10px; "
            "background-color: #4285f4; "
            "color: white; "
            "border: none; "
            "border-radius: 4px; "
            "font-size: 14px; "
            "cursor: pointer; "
        )
        button.setFixedHeight(40)
        button.setStyleSheet(button.styleSheet() + "QPushButton:hover { background-color: #357ae8; }")
        return button

    def addTab(self):
        tabWidget = QWidget()
        view = QTextBrowser()
        view.setOpenExternalLinks(True)

        urlEdit = QLineEdit()
        urlEdit.setPlaceholderText("Введите URL (smp://...)")
        urlEdit.setStyleSheet("padding: 10px; border: 1px solid #ccc; border-radius: 4px;")

        loadButton = self.createButton("Загрузить")
        loadButton.clicked.connect(lambda: self.loadSmpUrl(urlEdit.text(), view))

        layout = QVBoxLayout()
        layout.addWidget(urlEdit)
        layout.addWidget(loadButton)
        layout.addWidget(view)

        tabWidget.setLayout(layout)
        self.tabWidget.addTab(tabWidget, "Новая вкладка")
        self.tabWidget.setCurrentWidget(tabWidget)

    def loadUrlInCurrentTab(self):
        current_tab = self.tabWidget.currentWidget()
        if current_tab:
            url = self.urlEdit.text()
            self.loadSmpUrl(url, self.contentWidget)

    def loadSmpUrl(self, url, view):
        parts = url.split('://')
        if len(parts) != 2:
            self.showError("Неверный URL: должен содержать 'smp://'")
            return

        protocol, resource = parts
        if protocol != 'smp':
            self.showError("Неверный протокол: ожидается 'smp'")
            return

        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            try:
                sock.connect((HOST, PORT))
                request = f"SMP 1.0\nACTION: GET\nRESOURCE: {resource}\n"
                sock.send(request.encode())

                response = sock.recv(4096)

                if response.startswith(b'\x89PNG') or response.startswith(b'\xFF\xD8'):
                    pixmap = QPixmap()
                    pixmap.loadFromData(response)
                    view.setPixmap(pixmap)
                else:
                    view.setText(response.decode())
            except Exception as e:
                self.showError(f"Ошибка при подключении к серверу: {e}")

    def goBack(self):
        # Реализация для возврата на предыдущую страницу
        pass

    def goForward(self):
        # Реализация для перехода на следующую страницу
        pass

    def refreshPage(self):
        self.loadUrlInCurrentTab()

    def showError(self, message):
        QMessageBox.critical(self, "Ошибка", message)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    browser = Browser()
    browser.show()
    sys.exit(app.exec_())
