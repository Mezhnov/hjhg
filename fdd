#include <windows.h>
#include <commctrl.h>
#include <gdiplus.h>
#include <d3d11.h>
#include <vector>
#include <string>
#include <memory>
#include <functional>
#include <filesystem>

#pragma comment(lib, "gdiplus.lib")
#pragma comment(lib, "d3d11.lib")

using namespace Gdiplus;

// Window IDs
enum class WindowID {
    MainWindow,
    Toolbar,
    ContentBrowser,
    PropertiesPanel,
    Viewport
};

// UI Colors
const COLORREF COLOR_BACKGROUND = RGB(40, 40, 40);
const COLORREF COLOR_TEXT = RGB(200, 200, 200);
const COLORREF COLOR_HIGHLIGHT = RGB(0, 120, 215);

// Function prototypes
LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
void CreateToolbar(HWND hwndParent);
void CreateContentBrowser(HWND hwndParent);
void CreatePropertiesPanel(HWND hwndParent);
void CreateViewport(HWND hwndParent);
void InitializeD3D(HWND hwnd);
void RenderFrame();
void CreateProjectFolders();

// Global variables
HWND g_hwndMain = nullptr;
ID3D11Device* g_pd3dDevice = nullptr;
ID3D11DeviceContext* g_pd3dDeviceContext = nullptr;
IDXGISwapChain* g_pSwapChain = nullptr;
ID3D11RenderTargetView* g_pRenderTargetView = nullptr;

// Main function
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE, LPSTR, int nCmdShow) {
    // Create project folders
    CreateProjectFolders();

    // Initialize GDI+
    GdiplusStartupInput gdiplusStartupInput;
    ULONG_PTR gdiplusToken;
    GdiplusStartup(&gdiplusToken, &gdiplusStartupInput, NULL);

    // Register window class
    const wchar_t CLASS_NAME[] = L"UnrealEditorClass";
    WNDCLASS wc = {};
    wc.lpfnWndProc = WindowProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = CLASS_NAME;
    wc.hCursor = LoadCursor(NULL, IDC_ARROW);
    wc.hbrBackground = CreateSolidBrush(COLOR_BACKGROUND);
    RegisterClass(&wc);

    // Create main window
    g_hwndMain = CreateWindowEx(
        0, CLASS_NAME, L"Unreal Engine 5 Editor",
        WS_OVERLAPPEDWINDOW | WS_VISIBLE,
        CW_USEDEFAULT, CW_USEDEFAULT, 1280, 720,
        NULL, NULL, hInstance, NULL);

    if (g_hwndMain == NULL) return 0;

    // Create UI components
    CreateToolbar(g_hwndMain);
    CreateContentBrowser(g_hwndMain);
    CreatePropertiesPanel(g_hwndMain);
    CreateViewport(g_hwndMain);

    // Initialize Direct3D
    InitializeD3D(g_hwndMain);

    // Show the window
    ShowWindow(g_hwndMain, nCmdShow);

    // Message loop
    MSG msg = {};
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    // Cleanup
    if (g_pRenderTargetView) g_pRenderTargetView->Release();
    if (g_pSwapChain) g_pSwapChain->Release();
    if (g_pd3dDeviceContext) g_pd3dDeviceContext->Release();
    if (g_pd3dDevice) g_pd3dDevice->Release();

    GdiplusShutdown(gdiplusToken);

    return 0;
}

LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
    switch (uMsg) {
    case WM_DESTROY:
        PostQuitMessage(0);
        return 0;
    case WM_PAINT:
        {
            PAINTSTRUCT ps;
            HDC hdc = BeginPaint(hwnd, &ps);
            FillRect(hdc, &ps.rcPaint, CreateSolidBrush(COLOR_BACKGROUND));
            EndPaint(hwnd, &ps);
        }
        return 0;
    case WM_SIZE:
        // Resize D3D swap chain
        if (g_pSwapChain) {
            RECT clientRect;
            GetClientRect(hwnd, &clientRect);
            g_pSwapChain->ResizeBuffers(0, clientRect.right - clientRect.left, clientRect.bottom - clientRect.top, DXGI_FORMAT_UNKNOWN, 0);
            RenderFrame();
        }
        return 0;
    }
    return DefWindowProc(hwnd, uMsg, wParam, lParam);
}

void CreateToolbar(HWND hwndParent) {
    // Create toolbar window
    HWND hToolbar = CreateWindowEx(0, TOOLBARCLASSNAME, NULL, 
        WS_CHILD | WS_VISIBLE | TBSTYLE_FLAT | TBSTYLE_TOOLTIPS,
        0, 0, 0, 0, hwndParent, (HMENU)WindowID::Toolbar, GetModuleHandle(NULL), NULL);

    // Add toolbar buttons (simplified, you'd need to add actual icons)
    TBBUTTON tbButtons[3] = {
        {0, 1001, TBSTATE_ENABLED, TBSTYLE_BUTTON, {0}, 0, (INT_PTR)L"New"},
        {1, 1002, TBSTATE_ENABLED, TBSTYLE_BUTTON, {0}, 0, (INT_PTR)L"Open"},
        {2, 1003, TBSTATE_ENABLED, TBSTYLE_BUTTON, {0}, 0, (INT_PTR)L"Save"}
    };
    SendMessage(hToolbar, TB_ADDBUTTONS, 3, (LPARAM)&tbButtons);
}

void CreateContentBrowser(HWND hwndParent) {
    // Create a list view to represent the content browser
    HWND hListView = CreateWindowEx(0, WC_LISTVIEW, L"Content Browser",
        WS_CHILD | WS_VISIBLE | LVS_ICON | LVS_EDITLABELS,
        10, 50, 300, 500, hwndParent, (HMENU)WindowID::ContentBrowser, GetModuleHandle(NULL), NULL);

    // Add some dummy items (you'd populate this with actual content)
    LVITEM lvItem = {0};
    lvItem.mask = LVIF_TEXT;
    lvItem.iItem = 0;
    lvItem.pszText = (LPWSTR)L"Asset 1";
    ListView_InsertItem(hListView, &lvItem);
    
    lvItem.iItem = 1;
    lvItem.pszText = (LPWSTR)L"Asset 2";
    ListView_InsertItem(hListView, &lvItem);
}

void CreatePropertiesPanel(HWND hwndParent) {
    // Create a simple edit control to represent the properties panel
    HWND hEdit = CreateWindowEx(WS_EX_CLIENTEDGE, L"EDIT", L"",
        WS_CHILD | WS_VISIBLE | ES_MULTILINE | ES_AUTOVSCROLL,
        320, 50, 250, 500, hwndParent, (HMENU)WindowID::PropertiesPanel, GetModuleHandle(NULL), NULL);
}

void CreateViewport(HWND hwndParent) {
    // Create a child window to host the D3D viewport
    HWND hViewport = CreateWindowEx(0, L"STATIC", L"",
        WS_CHILD | WS_VISIBLE | SS_BLACKRECT,
        580, 50, 500, 500, hwndParent, (HMENU)WindowID::Viewport, GetModuleHandle(NULL), NULL);
}

void InitializeD3D(HWND hwnd) {
    // Create the D3D device and swap chain
    DXGI_SWAP_CHAIN_DESC sd = {};
    sd.BufferCount = 1;
    sd.BufferDesc.Width = 500;
    sd.BufferDesc.Height = 500;
    sd.BufferDesc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;
    sd.BufferDesc.RefreshRate.Numerator = 60;
    sd.BufferDesc.RefreshRate.Denominator = 1;
    sd.BufferUsage = DXGI_USAGE_RENDER_TARGET_OUTPUT;
    sd.OutputWindow = hwnd;
    sd.SampleDesc.Count = 1;
    sd.SampleDesc.Quality = 0;
    sd.Windowed = TRUE;

    D3D_FEATURE_LEVEL FeatureLevels[] = { D3D_FEATURE_LEVEL_11_0 };
    UINT numFeatureLevels = ARRAYSIZE(FeatureLevels);

    HRESULT hr = D3D11CreateDeviceAndSwapChain(NULL, D3D_DRIVER_TYPE_HARDWARE, NULL, 0, FeatureLevels, numFeatureLevels,
        D3D11_SDK_VERSION, &sd, &g_pSwapChain, &g_pd3dDevice, NULL, &g_pd3dDeviceContext);

    if (FAILED(hr)) {
        // Handle failure (e.g., log an error)
        return;
    }

    // Create a render target view
    ID3D11Texture2D* pBackBuffer = NULL;
    g_pSwapChain->GetBuffer(0, __uuidof(ID3D11Texture2D), (LPVOID*)&pBackBuffer);
    g_pd3dDevice->CreateRenderTargetView(pBackBuffer, NULL, &g_pRenderTargetView);
    pBackBuffer->Release();
}

void RenderFrame() {
    // Clear the back buffer
    float ClearColor[4] = { 0.0f, 0.2f, 0.4f, 1.0f }; // Dark blue color
    g_pd3dDeviceContext->ClearRenderTargetView(g_pRenderTargetView, ClearColor);

    // Present the frame
    g_pSwapChain->Present(0, 0);
}

void CreateProjectFolders() {
    // Create project structure
    std::vector<std::string> folders = {
        "Assets",
        "Scripts",
        "Textures",
        "Models",
        "Shaders",
        "Projects"
    };

    for (const auto& folder : folders) {
        std::filesystem::create_directory(folder);
    }
}
