case WM_PAINT: {
    PAINTSTRUCT ps;
    HDC hdc = BeginPaint(hwnd, &ps);
    Graphics graphics(hdc);

    // Настройки высокого качества рендеринга
    graphics.SetSmoothingMode(SmoothingModeHighQuality);
    graphics.SetInterpolationMode(InterpolationModeHighQualityBicubic);
    graphics.SetPixelOffsetMode(PixelOffsetModeHighQuality);

    // Получение размеров окна
    RECT windowRect;
    GetClientRect(hwnd, &windowRect);

    // Рисование фонового изображения с сохранением соотношения сторон
    if (backgroundImage) {
        UINT imgWidth = backgroundImage->GetWidth();
        UINT imgHeight = backgroundImage->GetHeight();

        double windowAspect = static_cast<double>(windowRect.right) / windowRect.bottom;
        double imageAspect = static_cast<double>(imgWidth) / imgHeight;

        double drawWidth, drawHeight;
        if (windowAspect > imageAspect) {
            drawHeight = windowRect.bottom;
            drawWidth = imageAspect * drawHeight;
        }
        else {
            drawWidth = windowRect.right;
            drawHeight = drawWidth / imageAspect;
        }

        float x = static_cast<float>((windowRect.right - drawWidth) / 2.0);
        float y = static_cast<float>((windowRect.bottom - drawHeight) / 2.0);
        graphics.DrawImage(backgroundImage, x, y, static_cast<REAL>(drawWidth), static_cast<REAL>(drawHeight));
    }

    // Рисование нижней панели
    RECT panelRect = { 0, windowRect.bottom - 40, windowRect.right, windowRect.bottom };
    FillRect(hdc, &panelRect, (HBRUSH)(COLOR_BTNFACE + 1)); // Цвет панели

    // Рисование иконок Wi-Fi, Звука и Батареи справа
    if (wifiIcon && soundIcon && batteryIcon) {
        float iconSize = 24.0f; // Размер иконки
        float iconY = static_cast<float>(windowRect.bottom - 40 + (40 - iconSize) / 2.0); // Центрирование по вертикали

        float paddingRight = 15.0f; // Отступ справа
        float spacing = 10.0f; // Расстояние между иконками

        // Вычисление общей ширины всех иконок вместе с отступами
        float totalIconsWidth = 3 * iconSize + 2 * spacing;

        // Начальная позиция X для первой иконки (самой правой)
        float currentX = windowRect.right - paddingRight - totalIconsWidth;

        // Рисование Wi-Fi иконки
        graphics.DrawImage(wifiIcon, currentX, iconY, iconSize, iconSize);
        currentX += iconSize + spacing;

        // Рисование Звука иконки
        graphics.DrawImage(soundIcon, currentX, iconY, iconSize, iconSize);
        currentX += iconSize + spacing;

        // Рисование Батареи иконки
        graphics.DrawImage(batteryIcon, currentX, iconY, iconSize, iconSize);
    }

    // Получение текущего времени и языка
    std::wstring timeString = GetCurrentTimeString();
    std::wstring langString = languages[currentLanguageIndex]; // Текущий язык

    // Использование GDI+ для рисования текста
    FontFamily fontFamily(L"Segoe UI"); // Выбор шрифта
    Font font(&fontFamily, 14, FontStyleRegular, UnitPixel); // Размер шрифта
    SolidBrush brush(Color(255, 0, 0, 0)); // Черный цвет текста

    // Измерение размеров текста
    RectF timeRect;
    graphics.MeasureString(timeString.c_str(), -1, &font, PointF(0, 0), &timeRect);
    RectF langRect;
    graphics.MeasureString(langString.c_str(), -1, &font, PointF(0, 0), &langRect);

    // Расчет позиций для текста
    float paddingText = 15.0f;
    float xTime = windowRect.right - paddingText - timeRect.Width;
    float yText = static_cast<float>(windowRect.bottom - 40 + (40 - timeRect.Height) / 2.0 - 1); // Вертикальное выравнивание

    // Смещение позиции времени, чтобы разместить язык перед временем
    float xLang = xTime - langRect.Width - 10.0f; // Отступ между языком и временем

    // Рисование текущего языка
    PointF langPoint(xLang, yText);
    graphics.DrawString(langString.c_str(), -1, &font, langPoint, &brush);

    // Рисование текущего времени
    PointF timePoint(xTime, yText);
    graphics.DrawString(timeString.c_str(), -1, &font, timePoint, &brush);

    // Добавление объявления ОС в центр экрана
    std::wstring announcement;
    if (languages[currentLanguageIndex] == L"РУС") {
        announcement = L"Представляем Orega OS: Будущее Производительности!";
    }
    else {
        announcement = L"Introducing Orega OS: The Future of Performance!";
    }
    RectF announcementRect;
    Font largeFont(&fontFamily, 40, FontStyleBold, UnitPixel); // Шрифт для объявления
    graphics.MeasureString(announcement.c_str(), -1, &largeFont, PointF(0, 0), &announcementRect);

    // Позиционирование объявления в центре
    float xAnnouncement = (static_cast<float>(windowRect.right) - announcementRect.Width) / 2.0f;
    float yAnnouncement = (static_cast<float>(windowRect.bottom) - announcementRect.Height) / 2.0f;
    PointF announcementPoint(xAnnouncement, yAnnouncement);

    SolidBrush announcementBrush(Color(255, 255, 255, 255)); // Белый цвет текста для объявления
    graphics.DrawString(announcement.c_str(), -1, &largeFont, announcementPoint, &announcementBrush);

    // Рисование дополнительных изображений и их названий
    for (const auto& imgItem : images) {
        // Рисование изображения
        graphics.DrawImage(imgItem.image, imgItem.x, imgItem.y, imgItem.width, imgItem.height);

        // Рисование названия под изображением, по центру
        Font titleFont(&fontFamily, 16, FontStyleRegular, UnitPixel);
        SolidBrush titleBrush(Color(255, 255, 255, 255)); // Белый цвет текста для названий

        RectF titleRect;
        graphics.MeasureString(imgItem.title.c_str(), -1, &titleFont, PointF(0, 0), &titleRect);

        float xTitle = imgItem.x + (imgItem.width - titleRect.Width) / 2.0f;
        float yTitle = imgItem.y + imgItem.height + 5.0f; // Отступ под изображением

        PointF titlePoint(xTitle, yTitle);
        graphics.DrawString(imgItem.title.c_str(), -1, &titleFont, titlePoint, &titleBrush);
    }

    EndPaint(hwnd, &ps);
    return 0;
}
