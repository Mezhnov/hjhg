Основная проблема в том, что callback для сетевых запросов выполняется в фоновом потоке, а обновление UI должно происходить в главном потоке. Вот исправленный код:

1. Добавьте в MainActivity.kt следующие изменения:

```kotlin
private fun loginUser(username: String, password: String, callback: (Boolean) -> Unit) {
    val client = OkHttpClient()
    val formBody = FormBody.Builder()
        .add("username", username)
        .add("password", password)
        .build()
    val request = Request.Builder()
        .url("http://192.168.0.119:5000/login")
        .post(formBody)
        .build()

    client.newCall(request).enqueue(object : Callback {
        override fun onFailure(call: Call, e: IOException) {
            android.os.Handler(android.os.Looper.getMainLooper()).post {
                callback(false)
            }
        }

        override fun onResponse(call: Call, response: Response) {
            android.os.Handler(android.os.Looper.getMainLooper()).post {
                callback(response.isSuccessful)
            }
        }
    })
}

private fun registerUser(username: String, password: String, callback: (Boolean) -> Unit) {
    val client = OkHttpClient()
    val formBody = FormBody.Builder()
        .add("username", username)
        .add("password", password)
        .build()
    val request = Request.Builder()
        .url("http://192.168.0.119:5000/register")
        .post(formBody)
        .build()

    client.newCall(request).enqueue(object : Callback {
        override fun onFailure(call: Call, e: IOException) {
            android.os.Handler(android.os.Looper.getMainLooper()).post {
                callback(false)
            }
        }

        override fun onResponse(call: Call, response: Response) {
            android.os.Handler(android.os.Looper.getMainLooper()).post {
                callback(response.isSuccessful)
            }
        }
    })
}
```

2. В файле AndroidManifest.xml добавьте разрешение для незащищенного трафика:

```xml
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">
    <uses-permission android:name="android.permission.INTERNET" />

    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:usesCleartextTraffic="true"
        android:theme="@style/Theme.MyApplication"
        tools:targetApi="31">
        <!-- ... остальное содержимое ... -->
    </application>
</manifest>
```

3. В LoginScreen модифицируйте обработку состояния:

```kotlin
@Composable
fun LoginScreen() {
    var showLogin by remember { mutableStateOf(true) }
    var isLoggedIn by remember { mutableStateOf(false) }
    val context = LocalContext.current
    val scope = rememberCoroutineScope()

    when {
        isLoggedIn -> MessengerHome(onLogoutClick = {
            isLoggedIn = false
            showLogin = true
        })
        showLogin -> LoginContent(
            onLoginClick = { username, password ->
                loginUser(username, password) { success ->
                    if (success) {
                        isLoggedIn = true
                    } else {
                        scope.launch(Dispatchers.Main) {
                            Toast.makeText(context, "Login Failed", Toast.LENGTH_SHORT).show()
                        }
                    }
                }
            },
            onRegisterClick = { showLogin = false }
        )
        else -> RegisterContent(
            onLoginClick = { showLogin = true },
            onRegisterSuccess = { isLoggedIn = true }
        )
    }
}
```

4. Убедитесь, что в build.gradle добавлены все необходимые зависимости:

```gradle
dependencies {
    // ... существующие зависимости ...
    implementation("com.squareup.okhttp3:okhttp:4.9.3")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4")
}
```

5. В серверном коде Flask добавьте обработку CORS:

```python
from flask import Flask, request, jsonify
from flask_cors import CORS
from werkzeug.security import generate_password_hash, check_password_hash
import sqlite3

app = Flask(__name__)
CORS(app)

# ... остальной код сервера ...
```

Эти изменения должны решить проблему с вылетами приложения. Основные исправления:

1. Добавлено выполнение callback'ов в главном потоке через Handler
2. Добавлено разрешение на незащищенный трафик в манифесте
3. Добавлена корректная обработка состояний в Compose
4. Добавлена поддержка CORS на сервере

Также убедитесь, что:
1. IP-адрес сервера указан правильно
2. Сервер запущен и доступен
3. На устройстве есть доступ к интернету

Это должно решить проблему с вылетами приложения при попытке входа или регистрации.
