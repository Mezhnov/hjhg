case WM_PAINT: {
    PAINTSTRUCT ps;
    HDC hdc = BeginPaint(hwnd, &ps);

    // Инициализация GDI+
    Graphics graphics(hdc);
    graphics.SetSmoothingMode(SmoothingModeAntiAlias);
    graphics.SetTextRenderingHint(TextRenderingHintClearTypeGridFit);

    // Получение размеров клиентской области окна
    RECT rect;
    GetClientRect(hwnd, &rect);
    int windowWidth = rect.right - rect.left;
    int windowHeight = rect.bottom - rect.top;

    // Основное изображение (фон)
    if (g_mainImage) {
        // Рисование изображения, масштабированного под размер окна
        graphics.DrawImage(g_mainImage, 0, 0, windowWidth, windowHeight);
    }

    // Получение DPI
    HDC screen = GetDC(hwnd);
    int dpiX = GetDeviceCaps(screen, LOGPIXELSX);
    int dpiY = GetDeviceCaps(screen, LOGPIXELSY);
    ReleaseDC(hwnd, screen);

    // Расчет размеров иконок с учетом DPI
    int iconSizeMM_Wifi = 5; // 5 мм
    int iconSizeMM_App = 10;   // 10 мм
    int spacingMM = 10;        // 10 мм между иконками
    int marginMM = 5;          // 5 мм от края окна
    int labelSpacingMM = 5;    // 5 мм между иконкой и подписью

    int iconSize_Wifi = mmToPixels(static_cast<float>(iconSizeMM_Wifi), dpiX); // Используем DPI-X
    int iconSize_App = mmToPixels(static_cast<float>(iconSizeMM_App), dpiX);
    int appSpacing = mmToPixels(static_cast<float>(spacingMM), dpiX);
    int margin = mmToPixels(static_cast<float>(marginMM), dpiX);
    int labelSpacing = mmToPixels(static_cast<float>(labelSpacingMM), dpiY);

    // Отображение WiFi-иконки в верхнем правом углу с небольшим сдвигом влево
    if (g_wifiIcon) {
        // Размер иконки
        int iconSize = iconSize_Wifi;
        // Сдвиг влево на 5 мм
        int shiftLeft = mmToPixels(5.0f, dpiX); // Например, 5 мм сдвига
        // Позиция (отступ от верхнего правого угла с учетом сдвига)
        int x = windowWidth - iconSize - margin - shiftLeft; // Сдвиг влево
        // Убедимся, что x не становится отрицательным
        if (x < margin) {
            x = margin;
        }
        int y = margin; // 5 мм от верхнего края

        graphics.DrawImage(g_wifiIcon, x, y, iconSize, iconSize);
    }

    // Определение размеров иконок приложений
    int appIconSize = iconSize_App; // 10 мм
    int appSpacingPixels = appSpacing; // 10 мм

    // Настройка количества строк для иконок
    int iconsPerRow = 4; // Количество иконок в одной строке
    int totalApps = static_cast<int>(g_appIcons.size());
    int totalRows = (totalApps + iconsPerRow - 1) / iconsPerRow;

    // Размер области для каждой строки
    int rowHeight = appIconSize + labelSpacing + mmToPixels(10.0f, dpiY); // Иконка + подпись + отступ

    // Начальная позиция Y для отрисовки иконок
    int startY = windowHeight - rowHeight * totalRows - mmToPixels(5.0f, dpiY); // 5 мм от нижнего края

    // Расчет общих размеров для центрирования иконок
    int iconsInLastRow = totalApps % iconsPerRow;
    if (iconsInLastRow == 0 && totalApps != 0) {
        iconsInLastRow = iconsPerRow;
    }

    // Отрисовка каждой иконки и её подписи
    for (int row = 0; row < totalRows; ++row) {
        int iconsInThisRow = (row == totalRows - 1) ? iconsInLastRow : iconsPerRow;
        int totalWidth = iconsInThisRow * appIconSize + (iconsInThisRow - 1) * appSpacingPixels;
        int startX = (windowWidth - totalWidth) / 2; // Центрирование по горизонтали

        for (int i = 0; i < iconsInThisRow; ++i) {
            int appIndex = row * iconsPerRow + i;
            if (appIndex >= totalApps) break;

            AppIcon& app = g_appIcons[appIndex];
            if (app.image) {
                int x = startX + i * (appIconSize + appSpacingPixels);
                int y = startY - row * rowHeight;

                // Рисование иконки
                graphics.DrawImage(app.image, x, y, appIconSize, appIconSize);

                // Рисование подписи
                const wchar_t* text = app.label.c_str();
                FontFamily fontFamily(L"Segoe UI");
                Font font(&fontFamily, 14.0f, FontStyleRegular, UnitPixel); // Увеличенный размер шрифта
                SolidBrush brush(Color(255, 255, 255, 255)); // Белый цвет текста

                // Настройка выравнивания текста по центру и отключение переноса
                StringFormat format;
                format.SetAlignment(StringAlignmentCenter);
                format.SetLineAlignment(StringAlignmentCenter);
                format.SetFormatFlags(format.GetFormatFlags() | StringFormatFlagsNoWrap | StringFormatFlagsTrimmingEllipsisCharacter);

                // Вычисление позиции текста с увеличенной шириной области
                RectF layoutRect(
                    static_cast<float>(x - appIconSize * 0.1f), // Сдвиг влево для большей ширины
                    static_cast<float>(y + appIconSize + labelSpacing),
                    static_cast<float>(appIconSize * 1.2f),    // Увеличенная ширина области
                    static_cast<float>(mmToPixels(10.0f, dpiY))
                );

                // Рисование текста с настройками форматирования
                graphics.DrawString(
                    text,
                    -1,
                    &font,
                    layoutRect,
                    &format,
                    &brush
                );
            }
        }
    }

    // Отображение времени
    // Создание шрифта
    FontFamily fontFamily(L"Segoe UI"); // Более современный шрифт
    Font font(&fontFamily, timeFontSize, FontStyleBold, UnitPixel);

    // Создание кисти для текста
    SolidBrush brush(timeColor);

    // Отключение переноса текста и добавление обрезки
    StringFormat formatTime;
    formatTime.SetAlignment(StringAlignmentCenter);
    formatTime.SetLineAlignment(StringAlignmentCenter);
    formatTime.SetFormatFlags(formatTime.GetFormatFlags() | StringFormatFlagsNoWrap | StringFormatFlagsTrimmingEllipsisCharacter);

    // Расчет положения времени
    // Пример: отображение времени в центре верхней панели
    int verticalOffset = mmToPixels(5.0f, dpiY); // Сдвиг вниз на 5 мм

    RECT currentTimeRect;
    currentTimeRect.left = (windowWidth / 2) - mmToPixels(20.0f, dpiX); // 40 мм ширина области
    currentTimeRect.top = margin + verticalOffset;
    currentTimeRect.right = currentTimeRect.left + mmToPixels(40.0f, dpiX);
    currentTimeRect.bottom = currentTimeRect.top + mmToPixels(20.0f, dpiY);

    // Рисование текста времени
    graphics.DrawString(
        currentTime.c_str(),
        -1,
        &font,
        RectF(static_cast<float>(currentTimeRect.left), static_cast<float>(currentTimeRect.top),
            static_cast<float>(currentTimeRect.right - currentTimeRect.left),
            static_cast<float>(currentTimeRect.bottom - currentTimeRect.top)),
        &formatTime,
        &brush
    );

    EndPaint(hwnd, &ps);
    return 0;
}
