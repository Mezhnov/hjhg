#include <windows.h>
#include <gdiplus.h>
#include <wininet.h>
#include <string>
#include <vector>
#include <chrono>
#include <iomanip>
#include <sstream>
#include <locale>
#include <codecvt>

#pragma comment(lib, "gdiplus.lib")
#pragma comment(lib, "wininet.lib")

using namespace Gdiplus;

// Global Variables
Image* backgroundImage = nullptr;
HINSTANCE g_hInstance;

// Function to Load Image from URL (Remains unchanged if needed)
bool LoadImageFromURL(const std::wstring& url) {
    // ... [Your existing implementation]
    return false; // Placeholder
}

// Function to Get Current Time as String
std::wstring GetCurrentTimeString() {
    using namespace std::chrono;
    auto now = system_clock::now();
    std::time_t now_c = system_clock::to_time_t(now);
    std::tm parts;

    localtime_s(&parts, &now_c);

    std::wstringstream ss;
    ss << std::put_time(&parts, L"%H:%M"); // Fixed operator from « to <<
    return ss.str();
}

// Function to Load an Icon from a System Path
HICON LoadSystemIcon(int iconID) {
    return (HICON)LoadImage(NULL, MAKEINTRESOURCE(iconID), IMAGE_ICON, 64, 64, LR_SHARED | LR_DEFAULTSIZE);
}

// Function to Draw an Icon with Label
void DrawIconWithLabel(Graphics& graphics, HICON hIcon, const std::wstring& label, float x, float y) {
    // Draw the icon
    graphics.DrawImage(Image::FromHICON(hIcon), x, y, 64, 64);

    // Draw the label below the icon
    FontFamily fontFamily(L"Segoe UI");
    Font font(&fontFamily, 12, FontStyleRegular, UnitPixel);
    SolidBrush brush(Color(255, 0, 0, 0));

    RectF layoutRect(x, y + 70, 100, 20); // Position label below icon
    StringFormat format;
    format.SetAlignment(StringAlignmentCenter);
    graphics.DrawString(label.c_str(), -1, &font, layoutRect, &format, &brush);
}

// Window Procedure
LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
    switch (uMsg) {
    case WM_DESTROY:
        delete backgroundImage; // Free the background image
        PostQuitMessage(0);
        return 0;

    case WM_KEYDOWN:
        if (wParam == VK_ESCAPE) {
            DestroyWindow(hwnd); // Close the window on ESC
        }
        return 0;

    case WM_PAINT: {
        PAINTSTRUCT ps;
        HDC hdc = BeginPaint(hwnd, &ps);
        Graphics graphics(hdc);

        // Draw the background image
        if (backgroundImage) {
            graphics.DrawImage(backgroundImage, 0, 0, ps.rcPaint.right, ps.rcPaint.bottom);
        }

        // Draw the bottom taskbar panel
        RECT panelRect = { 0, ps.rcPaint.bottom - 80, ps.rcPaint.right, ps.rcPaint.bottom };
        FillRect(hdc, &panelRect, (HBRUSH)(COLOR_BTNFACE + 1));

        // Draw the current time on the taskbar
        std::wstring timeString = GetCurrentTimeString();
        std::wstring langString = L"РУС"; // Static language label

        FontFamily fontFamily(L"Segoe UI");
        Font font(&fontFamily, 16, FontStyleRegular, UnitPixel);
        SolidBrush brush(Color(255, 0, 0, 0));

        // Measure string sizes
        RectF timeRect;
        graphics.MeasureString(timeString.c_str(), -1, &font, PointF(0, 0), &timeRect);

        // Calculate position for time and language
        float xTime = panelRect.right - timeRect.Width - 150; // Adjusted for additional icons
        float yTime = panelRect.bottom - timeRect.Height - 30;

        // Draw language label
        RectF langRect;
        graphics.MeasureString(langString.c_str(), -1, &font, PointF(0, 0), &langRect);
        PointF langPoint(xTime - langRect.Width - 10, yTime);
        graphics.DrawString(langString.c_str(), -1, &font, langPoint, nullptr, &brush);

        // Draw time
        PointF timePoint(xTime, yTime);
        graphics.DrawString(timeString.c_str(), -1, &font, timePoint, nullptr, &brush);

        // Load system icons for "This PC" and "Recycle Bin"
        // You can alternatively load custom icons from files
        HICON hThisPC = LoadIcon(NULL, IDI_APPLICATION); // Placeholder icon
        HICON hRecycleBin = LoadIcon(NULL, IDI_APPLICATION); // Placeholder icon

        // Draw "This PC" Icon and Label
        DrawIconWithLabel(graphics, hThisPC, L"This PC", 50, panelRect.bottom - 80);

        // Draw "Recycle Bin" Icon and Label
        DrawIconWithLabel(graphics, hRecycleBin, L"Recycle Bin", 150, panelRect.bottom - 80);

        // Draw Search Bar Background
        RectF searchRect(300, panelRect.bottom - 70, 200, 30);
        SolidBrush searchBrush(Color(255, 255, 255, 255)); // White background
        graphics.FillRectangle(&searchBrush, searchRect);

        // Draw Search Border
        Pen borderPen(Color(255, 0, 0, 0));
        graphics.DrawRectangle(&borderPen, searchRect.X, searchRect.Y, searchRect.Width, searchRect.Height);

        // Draw Search Placeholder Text
        Font searchFont(&fontFamily, 12, FontStyleRegular, UnitPixel);
        SolidBrush textBrush(Color(255, 150, 150, 150)); // Gray color for placeholder
        std::wstring placeholder = L"Search...";
        graphics.DrawString(placeholder.c_str(), -1, &searchFont, PointF(searchRect.X + 5, searchRect.Y + 5), &textBrush);

        EndPaint(hwnd, &ps);
        return 0;
    }

    default:
        return DefWindowProc(hwnd, uMsg, wParam, lParam);
    }
}

// Entry Point
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE, LPSTR, int nCmdShow) {
    g_hInstance = hInstance;
    const wchar_t CLASS_NAME[] = L"FullscreenWindowClass";

    // Initialize GDI+
    GdiplusStartupInput gdiplusStartupInput;
    ULONG_PTR gdiplusToken;
    if (GdiplusStartup(&gdiplusToken, &gdiplusStartupInput, NULL) != Ok) {
        MessageBox(NULL, L"Failed to initialize GDI+", L"Error", MB_ICONERROR);
        return -1;
    }

    // Define Window Class
    WNDCLASS wc = {};
    wc.lpfnWndProc = WindowProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = CLASS_NAME;
    wc.hCursor = LoadCursor(NULL, IDC_ARROW);
    wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);

    if (!RegisterClass(&wc)) {
        MessageBox(NULL, L"Window Registration Failed!", L"Error", MB_ICONERROR);
        GdiplusShutdown(gdiplusToken);
        return -1;
    }

    // Get Screen Dimensions
    int screenWidth = GetSystemMetrics(SM_CXSCREEN);
    int screenHeight = GetSystemMetrics(SM_CYSCREEN);

    // Create Window
    HWND hwnd = CreateWindowEx(
        WS_EX_TOPMOST, // Always on top
        CLASS_NAME,
        L"My Fullscreen Window",
        WS_POPUP, // Borderless window
        0, 0, screenWidth, screenHeight,
        NULL,
        NULL,
        hInstance,
        NULL
    );

    if (hwnd == NULL) {
        MessageBox(NULL, L"Window Creation Failed!", L"Error", MB_ICONERROR);
        GdiplusShutdown(gdiplusToken);
        return -1;
    }

    // Load Background Image from File
    std::wstring imagePath = L"Resources\\afrikanskii-lev.orig.jpg"; // Corrected path with double backslashes
    backgroundImage = new Gdiplus::Image(imagePath.c_str());
    if (backgroundImage->GetLastStatus() != Ok) {
        MessageBox(NULL, L"Failed to load background image!", L"Error", MB_ICONERROR);
        delete backgroundImage;
        backgroundImage = nullptr;
    }

    ShowWindow(hwnd, nCmdShow);

    // Message Loop
    MSG msg = {};
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    // Cleanup
    GdiplusShutdown(gdiplusToken);
    return 0;
}
