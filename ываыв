


Certainly! Here's an example of a simple program written in the **Nova** programming language. This program calculates the factorial of a number and outputs the result:

```nova
-- Define a recursive function to calculate factorial
# factorial(n) {
    if n == 0 {
        return 1
    } else {
        return n * factorial(n - 1)
    }
}

-- Declare a variable and assign a value
number :: 5

-- Call the factorial function and store the result
result :: factorial(number)

-- Output the result
>> "The factorial of " + number + " is " + result
```

**Explanation:**

- `--` denotes a comment in Nova.
- `#` is used to define a function. In this case, `factorial` is a recursive function that calculates the factorial of `n`.
- `if` and `else` are used for conditional statements.
- `return` is used to return a value from a function.
- `::` is used for variable declaration and assignment.
- `>>` is used to output text to the console.

**Step-by-Step Breakdown:**

1. **Function Definition:**

   ```nova
   # factorial(n) {
       if n == 0 {
           return 1
       } else {
           return n * factorial(n - 1)
       }
   }
   ```

   - Defines a function named `factorial` that takes one parameter `n`.
   - Uses a conditional statement to check if `n` is `0`.
     - If `n` is `0`, it returns `1` (since `0! = 1`).
     - Otherwise, it returns `n * factorial(n - 1)` (recursive call).

2. **Variable Declaration and Assignment:**

   ```nova
   number :: 5
   ```

   - Declares a variable `number` and assigns the value `5` to it.

3. **Function Call and Result Storage:**

   ```nova
   result :: factorial(number)
   ```

   - Calls the `factorial` function with `number` as the argument.
   - Stores the result in the variable `result`.

4. **Outputting the Result:**

   ```nova
   >> "The factorial of " + number + " is " + result
   ```

   - Uses `>>` to output text to the console.
   - Concatenates strings and variables using the `+` operator.
   - Displays: **The factorial of 5 is 120**

**Running the Program:**

When you run this program in the Nova IDE you provided, the output window will display:

```
The factorial of 5 is 120
```

---

**Additional Features Demonstrated:**

- **Comments (`--`):** You can add comments to your code for better readability.
- **Functions (`#`):** Define reusable blocks of code with functions.
- **Recursion:** Functions in Nova can be recursive, calling themselves with modified parameters.
- **Variables and Assignment (`::`):** Easily declare and assign values to variables.
- **Output (`>>`):** Display information to the user.

**Further Examples:**

Here are a few more examples showcasing different features of Nova:

---

**Example 2: Looping and Conditions**

```nova
-- Sum numbers from 1 to 10
total :: 0
i :: 1

while i <= 10 {
    total = total + i
    i = i + 1
}

>> "The sum of numbers from 1 to 10 is " + total
```

**Example 3: Defining and Using Classes**

```nova
-- Define a class representing a simple counter
## Counter {
    value :: 0

    # increment() {
        self.value = self.value + 1
    }

    # decrement() {
        self.value = self.value - 1
    }
}

-- Create an instance of the Counter class
counter :: Counter()

-- Use the object's methods
counter.increment()
counter.increment()
counter.decrement()

>> "The counter value is " + counter.value
```

**Explanation:**

- `##` is used to define a class.
- `self` refers to the current object instance.
- Methods within classes are defined similarly to functions.
- Objects are instantiated by calling the class as if it were a function.

---

**Example 4: String Manipulation**

```nova
text :: "Hello, Nova!"
length :: string_length(text)

>> "The text '" + text + "' has a length of " + length

# string_length(s) {
    count :: 0
    for c in s {
        count = count + 1
    }
    return count
}
```

**Explanation:**

- This example defines a function to calculate the length of a string.
- Uses a `for` loop to iterate over each character in the string.
- Demonstrates how to work with custom functions and basic string operations.

---

**Example 5: Simple Calculator**

```nova
# add(a, b) {
    return a + b
}

# subtract(a, b) {
    return a - b
}

# multiply(a, b) {
    return a * b
}

# divide(a, b) {
    if b == 0 {
        return "Error: Division by zero"
    } else {
        return a / b
    }
}

x :: 20
y :: 5

>> "Addition: " + add(x, y)
>> "Subtraction: " + subtract(x, y)
>> "Multiplication: " + multiply(x, y)
>> "Division: " + divide(x, y)
```

---

**Key Features of Nova Programming Language:**

- **Simple Syntax:** Nova aims for readability and simplicity.
- **Dynamic Typing:** Variables do not require explicit type declarations.
- **First-Class Functions:** Functions can be assigned to variables and passed as arguments.
- **Object-Oriented Programming:** Support for classes and objects.
- **Basic Control Structures:** Includes standard control flow mechanisms like `if`, `else`, `while`, `for`.

Feel free to experiment with Nova by writing your own programs and exploring its features!
