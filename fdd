#include <windows.h>
#include <gdiplus.h>
#include <wininet.h>
#include <string>
#include <vector>
#include <chrono>
#include <iomanip>
#include <sstream>
#include <locale>
#include <codecvt>

#pragma comment(lib, "gdiplus.lib")
#pragma comment(lib, "wininet.lib")

using namespace Gdiplus;

// Объявляем переменную для изображения на уровне модуля
Image* backgroundImage = nullptr;

// Функция для загрузки изображения из файла
bool LoadImageFromFile(const std::wstring& filePath) {
    // Загружаем изображение из файла
    backgroundImage = new Image(filePath.c_str());
    return backgroundImage && backgroundImage->GetLastStatus() == Ok;
}

// Функция для получения текущего времени в строковом формате
std::wstring GetCurrentTimeString() {
    using namespace std::chrono;
    auto now = system_clock::now();
    std::time_t now_c = system_clock::to_time_t(now);
    std::tm parts;
    localtime_s(&parts, &now_c);

    std::wstringstream ss;
    ss << std::put_time(&parts, L"%H:%M"); // Формат времени HH:MM
    return ss.str();
}

LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
    switch (uMsg) {
        case WM_DESTROY:
            delete backgroundImage; // Удаляем изображение
            PostQuitMessage(0);
            return 0;

        case WM_KEYDOWN:
            if (wParam == VK_ESCAPE) {
                DestroyWindow(hwnd); // Закрыть окно
            }
            return 0;

        case WM_PAINT: {
            PAINTSTRUCT ps;
            HDC hdc = BeginPaint(hwnd, &ps);
            Graphics graphics(hdc);

            // Получаем размеры окна
            int width = ps.rcPaint.right - ps.rcPaint.left;
            int height = ps.rcPaint.bottom - ps.rcPaint.top;

            // Рисуем изображение как фон, сохраняя пропорции
            if (backgroundImage) {
                float imgWidth = backgroundImage->GetWidth();
                float imgHeight = backgroundImage->GetHeight();
                float imgAspectRatio = imgWidth / imgHeight;
                float windowAspectRatio = static_cast<float>(width) / height;

                int drawWidth, drawHeight;
                if (imgAspectRatio > windowAspectRatio) {
                    drawWidth = width;
                    drawHeight = static_cast<int>(width / imgAspectRatio);
                } else {
                    drawHeight = height;
                    drawWidth = static_cast<int>(height * imgAspectRatio);
                }

                int x = (width - drawWidth) / 2;
                int y = (height - drawHeight) / 2;

                graphics.DrawImage(backgroundImage, x, y, drawWidth, drawHeight);
            }

            // Рисуем нижнюю панель
            RECT panelRect = { 0, height - 40, width, height };
            FillRect(hdc, &panelRect, (HBRUSH)(COLOR_BTNFACE + 1)); // Цвет панели

            // Получаем текущее время
            std::wstring timeString = GetCurrentTimeString();
            std::wstring langString = L"РУС"; // Статичное значение языка

            FontFamily fontFamily(L"Segoe UI");
            Font font(&fontFamily, 16, FontStyleRegular, UnitPixel);
            SolidBrush brush(Color(255, 0, 0, 0));

            // Находим размеры текста для центрирования
            RectF timeRect, langRect;
            graphics.MeasureString(timeString.c_str(), -1, &font, PointF(0, 0), &timeRect);
            graphics.MeasureString(langString.c_str(), -1, &font, PointF(0, 0), &langRect);

            // Рассчитываем координаты для расположения текста
            float xTime = panelRect.right - timeRect.Width - langRect.Width - 30;
            float y = panelRect.bottom - timeRect.Height - 10;

            // Рисуем текст
            PointF timePoint(xTime, y);
            graphics.DrawString(timeString.c_str(), -1, &font, timePoint, nullptr, &brush);
            PointF langPoint(xTime - langRect.Width - 10, y);
            graphics.DrawString(langString.c_str(), -1, &font, langPoint, nullptr, &brush);

            EndPaint(hwnd, &ps);
            return 0;
        }

        case WM_SIZE:
            InvalidateRect(hwnd, NULL, TRUE); // Перерисовываем окно при изменении его размера
            return 0;

        default:
            return DefWindowProc(hwnd, uMsg, wParam, lParam);
    }
}

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE, LPSTR, int nCmdShow) {
    const wchar_t CLASS_NAME[] = L"FullscreenWindowClass";

    GdiplusStartupInput gdiplusStartupInput;
    ULONG_PTR gdiplusToken;
    GdiplusStartup(&gdiplusToken, &gdiplusStartupInput, NULL);

    WNDCLASS wc = {};
    wc.lpfnWndProc = WindowProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = CLASS_NAME;
    wc.hCursor = LoadCursor(NULL, IDC_ARROW);
    wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);

    RegisterClass(&wc);

    int screenWidth = GetSystemMetrics(SM_CXSCREEN);
    int screenHeight = GetSystemMetrics(SM_CYSCREEN);

    HWND hwnd = CreateWindowEx(
        WS_EX_TOPMOST,
        CLASS_NAME,
        L"My Fullscreen Window",
        WS_POPUP,
        0, 0, screenWidth, screenHeight,
        NULL,
        NULL,
        hInstance,
        NULL
    );

    if (hwnd == NULL) return 0;

    // Загружаем изображение из файла
    std::wstring imagePath = L"Resources/afrikanskii-lev.orig.jpg"; // Путь к изображению
    if (!LoadImageFromFile(imagePath)) {
        MessageBox(NULL, L"Не удалось загрузить изображение!", L"Ошибка", MB_OK | MB_ICONERROR);
    }

    ShowWindow(hwnd, nCmdShow);

    MSG msg = {};
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }
    GdiplusShutdown(gdiplusToken);
    return 0;
}
