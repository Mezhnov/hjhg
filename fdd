#include <windows.h>
#include <gdiplus.h>
#include <wininet.h>
#include <string>
#include <vector>
#include <chrono>
#include <iomanip>
#include <sstream>
#include <locale>
#include <codecvt>

#pragma comment(lib, "gdiplus.lib")
#pragma comment(lib, "wininet.lib")

using namespace Gdiplus;

// Объявляем переменные для изображений на уровне модуля
Image* backgroundImage = nullptr;
Image* overlayImage = nullptr; // Новое изображение

// Массив языков
std::vector<std::wstring> languages = { L"РУС", L"ENG" }; // Русский и английский
int currentLanguageIndex = 0; // Индекс текущего языка

// Функция для загрузки изображения из URL
bool LoadImageFromURL(const std::wstring& url, Image*& image) {
    HINTERNET hInternet = InternetOpen(L"ImageLoader", INTERNET_OPEN_TYPE_DIRECT, NULL, NULL, 0);
    if (!hInternet) {
        OutputDebugString(L"InternetOpen failed\n");
        return false;
    }

    // Флаги для открытия URL: кэш отключен и чтение данных по мере загрузки
    HINTERNET hConnect = InternetOpenUrl(hInternet, url.c_str(), NULL, 0, INTERNET_FLAG_RELOAD | INTERNET_FLAG_DONT_CACHE, 0);
    if (!hConnect) {
        OutputDebugString(L"InternetOpenUrl failed\n");
        InternetCloseHandle(hInternet);
        return false;
    }

    // Чтение всех данных
    std::vector<BYTE> buffer;
    DWORD bytesAvailable = 0;
    DWORD bytesRead = 0;
    BYTE tempBuffer[4096];
    while (InternetQueryDataAvailable(hConnect, &bytesAvailable, 0, 0) && bytesAvailable > 0) {
        DWORD toRead = min(bytesAvailable, (DWORD)sizeof(tempBuffer));
        if (InternetReadFile(hConnect, tempBuffer, toRead, &bytesRead) && bytesRead > 0) {
            buffer.insert(buffer.end(), tempBuffer, tempBuffer + bytesRead);
        }
        else {
            break;
        }
    }

    InternetCloseHandle(hConnect);
    InternetCloseHandle(hInternet);

    if (buffer.empty()) {
        OutputDebugString(L"No data downloaded from URL\n");
        return false;
    }

    // Создание потока из буфера
    IStream* stream = nullptr;
    if (FAILED(CreateStreamOnHGlobal(NULL, TRUE, &stream))) {
        OutputDebugString(L"CreateStreamOnHGlobal failed\n");
        return false;
    }

    ULONG written;
    if (FAILED(stream->Write(buffer.data(), buffer.size(), &written)) || written != buffer.size()) {
        OutputDebugString(L"Stream write failed\n");
        stream->Release();
        return false;
    }

    LARGE_INTEGER liZero = {};
    stream->Seek(liZero, STREAM_SEEK_SET, NULL);

    // Загрузка изображения из потока
    image = new Image(stream);
    stream->Release();

    // Проверка статуса загрузки изображения
    if (image->GetLastStatus() != Ok) {
        OutputDebugString(L"Failed to create Image from stream\n");
        delete image;
        image = nullptr;
        return false;
    }

    OutputDebugString(L"Image loaded successfully\n");
    return image != nullptr;
}

// Функция для получения текущего времени в строковом формате
std::wstring GetCurrentTimeString() {
    using namespace std::chrono;
    auto now = system_clock::now();
    std::time_t now_c = system_clock::to_time_t(now);
    std::tm parts;

    // Используем localtime_s вместо localtime для потокобезопасности
    localtime_s(&parts, &now_c);

    std::wstringstream ss;
    ss << std::put_time(&parts, L"%H:%M"); // Формат времени HH:MM
    return ss.str();
}

LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
    switch (uMsg) {
    case WM_DESTROY:
        delete backgroundImage; // Удаляем изображение фона
        delete overlayImage; // Удаляем наложенное изображение
        PostQuitMessage(0);
        return 0;

    case WM_KEYDOWN:
        // Проверяем нажатие клавиши Esc
        if (wParam == VK_ESCAPE) {
            DestroyWindow(hwnd); // Закрыть окно
        }

        // Обработка переключения языка на Alt+Shift или Win+Space
        if (((GetAsyncKeyState(VK_MENU) & 0x8000) && wParam == VK_SHIFT) ||
            ((GetAsyncKeyState(VK_LWIN) & 0x8000) && wParam == VK_SPACE)) {
            currentLanguageIndex = (currentLanguageIndex + 1) % languages.size(); // Переключаем язык
            InvalidateRect(hwnd, NULL, TRUE); // Перерисовываем окно
        }
        return 0;

    case WM_SIZE: {
        InvalidateRect(hwnd, NULL, TRUE); // Перерисовка окна при изменении размера
        return 0;
    }

    case WM_PAINT: {
        PAINTSTRUCT ps;
        HDC hdc = BeginPaint(hwnd, &ps);
        Graphics graphics(hdc);

        // Установка высококачественных настроек рендеринга
        graphics.SetSmoothingMode(SmoothingModeHighQuality);
        graphics.SetInterpolationMode(InterpolationModeHighQualityBicubic);
        graphics.SetPixelOffsetMode(PixelOffsetModeHighQuality);

        // Получаем размеры окна
        RECT windowRect;
        GetClientRect(hwnd, &windowRect);

        // Рисуем изображение как фон с сохранением пропорций
        if (backgroundImage) {
            UINT imgWidth = backgroundImage->GetWidth();
            UINT imgHeight = backgroundImage->GetHeight();

            double windowAspect = static_cast<double>(windowRect.right) / windowRect.bottom;
            double imageAspect = static_cast<double>(imgWidth) / imgHeight;

            double drawWidth, drawHeight;
            if (windowAspect > imageAspect) {
                // Окно шире изображения
                drawHeight = windowRect.bottom;
                drawWidth = imageAspect * drawHeight;
            }
            else {
                // Окно уже или равно изображению
                drawWidth = windowRect.right;
                drawHeight = drawWidth / imageAspect;
            }

            float x = static_cast<float>((windowRect.right - drawWidth) / 2.0);
            float y = static_cast<float>((windowRect.bottom - drawHeight) / 2.0);
            graphics.DrawImage(backgroundImage, x, y, static_cast<REAL>(drawWidth), static_cast<REAL>(drawHeight));
        }

        // Рисуем наложенное изображение (например, в верхнем правом углу)
        if (overlayImage) {
            float overlayX = static_cast<float>(windowRect.right - overlayImage->GetWidth() - 10);
            float overlayY = 10.0f; // Отступ сверху
            graphics.DrawImage(overlayImage, overlayX, overlayY);
        }

        // Рисуем нижнюю панель
        RECT panelRect = { 0, windowRect.bottom - 40, windowRect.right, windowRect.bottom };
        FillRect(hdc, &panelRect, (HBRUSH)(COLOR_BTNFACE + 1)); // Цвет панели

        // Получаем текущее время
        std::wstring timeString = GetCurrentTimeString();
        std::wstring langString = languages[currentLanguageIndex]; // Текущий язык

        // Используем GDI+ для рисования текста
        FontFamily fontFamily(L"Segoe UI"); // Выбор шрифта
        Font font(&fontFamily, 14, FontStyleRegular, UnitPixel); // Устанавливаем размер шрифта на 16
        SolidBrush brush(Color(255, 0, 0, 0)); // Черный цвет текста

        // Находим размеры текста для правильного размещения
        RectF timeRect;
        graphics.MeasureString(timeString.c_str(), -1, &font, PointF(0, 0), &timeRect);
        RectF langRect;
        graphics.MeasureString(langString.c_str(), -1, &font, PointF(0, 0), &langRect);

        // Рассчитываем координаты для расположения текста
        float xTime = static_cast<float>(windowRect.right - timeRect.Width - langRect.Width - 30); // Отступ от правого края
        float y = static_cast<float>(windowRect.bottom - 40 + (40 - timeRect.Height) / 2.0 - 1); // Отступ от нижней границы

        // Рисуем время
        PointF timePoint(xTime, y);
        graphics.DrawString(timeString.c_str(), -1, &font, timePoint, &brush);

        // Рисуем текущий язык рядом с временем
        PointF langPoint(xTime - langRect.Width - 10, y); // Отступ слева от времени
        graphics.DrawString(langString.c_str(), -1, &font, langPoint, &brush);

        // Добавляем анонс операционной системы в центр экрана
        std::wstring osAnnouncement = L"ОС: Windows 10"; // Здесь вы можете указать другую информацию
        RectF announcementRect;
        graphics.MeasureString(osAnnouncement.c_str(), -1, &font, PointF(0, 0), &announcementRect);
        PointF announcementPoint(static_cast<float>((windowRect.right - announcementRect.Width) / 2.0), static_cast<float>((windowRect.bottom - announcementRect.Height) / 2.0));
        graphics.DrawString(osAnnouncement.c_str(), -1, &font, announcementPoint, &brush);

        EndPaint(hwnd, &ps);
        return 0;
    }
    }
    return DefWindowProc(hwnd, uMsg, wParam, lParam);
}

int WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE, PWSTR, int nCmdShow) {
    GdiplusStartupInput gdiplusStartupInput;
    ULONG_PTR gdiplusToken;
    GdiplusStartup(&gdiplusToken, &gdiplusStartupInput, NULL);

    // Загружаем фоновое изображение
    LoadImageFromURL(L"https://example.com/path/to/your/background/image.png", backgroundImage);
    // Загружаем наложенное изображение
    LoadImageFromURL(L"https://example.com/path/to/your/overlay/image.png", overlayImage); // Замените на ваш URL

    // Регистрируем класс окна
    const wchar_t CLASS_NAME[] = L"Sample Window Class";

    WNDCLASS wc = {};
    wc.lpfnWndProc = WindowProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = CLASS_NAME;
    RegisterClass(&wc);

    // Создаем окно
    HWND hwnd = CreateWindowEx(
        0,
        CLASS_NAME,
        L"Image Overlay Example",
        WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT,
        NULL,
        NULL,
        hInstance,
        NULL
    );

    if (hwnd == NULL) {
        return 0;
    }

    ShowWindow(hwnd, nCmdShow);

    // Основной цикл сообщений
    MSG msg = {};
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    GdiplusShutdown(gdiplusToken);
    return 0;
}
