#include <windows.h>
#include <gdiplus.h>
#include <wininet.h>
#include <string>
#include <vector>
#include <chrono>
#include <iomanip>
#include <sstream>
#include <locale>
#include <codecvt>

#pragma comment(lib, "gdiplus.lib")
#pragma comment(lib, "wininet.lib")

using namespace Gdiplus;

// Глобальные переменные
Image* backgroundImage = nullptr;
HWND hSearchBox = nullptr;

// Функция для загрузки изображения по URL
bool LoadImageFromURL(const std::wstring& url) {
    HINTERNET hInternet = InternetOpen(L"ImageLoader", INTERNET_OPEN_TYPE_DIRECT, NULL, NULL, 0);
    if (!hInternet) {
        MessageBox(NULL, L"Не удалось инициализировать интернет-сессию.", L"Ошибка", MB_OK | MB_ICONERROR);
        return false;
    }

    // Используем INTERNET_FLAG_SECURE для HTTPS
    HINTERNET hConnect = InternetOpenUrl(hInternet, url.c_str(), NULL, 0,
        INTERNET_FLAG_RELOAD | INTERNET_FLAG_SECURE | INTERNET_FLAG_NO_CACHE_WRITE, 0);
    if (!hConnect) {
        MessageBox(NULL, L"Не удалось подключиться к URL.", L"Ошибка", MB_OK | MB_ICONERROR);
        InternetCloseHandle(hInternet);
        return false;
    }

    std::vector<BYTE> buffer;
    DWORD bytesAvailable = 0;
    DWORD bytesRead = 0;
    BYTE tempBuffer[4096];

    // Читаем данные в цикле, пока не будут считаны все данные
    while (InternetQueryDataAvailable(hConnect, &bytesAvailable, 0, 0) && bytesAvailable > 0) {
        DWORD toRead = bytesAvailable;
        if (toRead > sizeof(tempBuffer))
            toRead = sizeof(tempBuffer);

        if (InternetReadFile(hConnect, tempBuffer, toRead, &bytesRead) && bytesRead > 0) {
            buffer.insert(buffer.end(), tempBuffer, tempBuffer + bytesRead);
        } else {
            break;
        }
    }

    InternetCloseHandle(hConnect);
    InternetCloseHandle(hInternet);

    if (buffer.empty()) {
        MessageBox(NULL, L"Изображение не было загружено или файл пуст.", L"Ошибка", MB_OK | MB_ICONERROR);
        return false;
    }

    // Создаем IStream из буфера
    IStream* stream = nullptr;
    if (FAILED(CreateStreamOnHGlobal(NULL, TRUE, &stream))) {
        MessageBox(NULL, L"Не удалось создать поток данных.", L"Ошибка", MB_OK | MB_ICONERROR);
        return false;
    }

    ULONG written;
    if (FAILED(stream->Write(buffer.data(), buffer.size(), &written)) || written != buffer.size()) {
        stream->Release();
        MessageBox(NULL, L"Не удалось записать данные в поток.", L"Ошибка", MB_OK | MB_ICONERROR);
        return false;
    }

    LARGE_INTEGER zero = { 0 };
    stream->Seek(zero, STREAM_SEEK_SET, NULL);

    // Создаем GDI+ Image
    backgroundImage = new Image(stream);
    stream->Release();

    if (backgroundImage->GetLastStatus() != Ok) {
        delete backgroundImage;
        backgroundImage = nullptr;
        MessageBox(NULL, L"Не удалось загрузить изображение из потока.", L"Ошибка", MB_OK | MB_ICONERROR);
        return false;
    }

    return true;
}

// Функция для получения текущего времени в виде строки
std::wstring GetCurrentTimeString() {
    using namespace std::chrono;
    auto now = system_clock::now();
    std::time_t now_c = system_clock::to_time_t(now);
    std::tm parts;

    // Используем localtime_s вместо localtime
    localtime_s(&parts, &now_c);

    std::wstringstream ss;
    ss << std::put_time(&parts, L"%H:%M"); // Формат времени HH:MM
    return ss.str();
}

// Функция для обработки действия поиска (заглушка)
void PerformSearch(const std::wstring& query) {
    // Заглушка: отображаем поисковый запрос
    std::wstring message = L"Поиск: " + query;
    MessageBox(NULL, message.c_str(), L"Поиск", MB_OK | MB_ICONINFORMATION);
}

// Процедура обработки оконных сообщений
LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
    switch (uMsg) {
    case WM_CREATE:
        // Создаем строку поиска
        hSearchBox = CreateWindowEx(
            0, L"EDIT", NULL,
            WS_CHILD | WS_VISIBLE | WS_BORDER | ES_LEFT,
            10,  // Позиция X
            10,  // Позиция Y
            200, // Ширина
            25,  // Высота
            hwnd,
            (HMENU)1, // ID
            NULL,
            NULL
        );
        if (!hSearchBox) {
            MessageBox(NULL, L"Не удалось создать окно поиска.", L"Ошибка", MB_OK | MB_ICONERROR);
        }
        break;

    case WM_SIZE: {
        // Корректируем позицию строки поиска в панели
        int width = LOWORD(lParam);
        int height = HIWORD(lParam);

        // Определяем высоту панели
        const int panelHeight = 40;

        // Перемещаем строку поиска в панель
        if (hSearchBox) {
            MoveWindow(hSearchBox, 10, height - panelHeight + (panelHeight - 25) / 2, 200, 25, TRUE);
        }
        break;
    }

    case WM_DESTROY:
        delete backgroundImage; // Удаляем изображение
        PostQuitMessage(0);
        return 0;

    case WM_KEYDOWN:
        // Проверяем, нажата ли клавиша Esc
        if (wParam == VK_ESCAPE) {
            DestroyWindow(hwnd); // Закрываем окно
        }
        return 0;

    case WM_COMMAND:
        if (LOWORD(wParam) == 1 && HIWORD(wParam) == EN_UPDATE) {
            // Обработка изменения текста при необходимости
        } else if (LOWORD(wParam) == 1 && HIWORD(wParam) == EN_CHANGE) {
            // Обработка изменения текста при необходимости
        }
        break;

    case WM_PAINT: {
        PAINTSTRUCT ps;
        HDC hdc = BeginPaint(hwnd, &ps);
        Graphics graphics(hdc);

        // Рисуем фоновое изображение
        if (backgroundImage) {
            graphics.DrawImage(backgroundImage, 0, 0, ps.rcPaint.right, ps.rcPaint.bottom);
        }

        // Рисуем нижнюю панель
        RECT panelRect = { 0, ps.rcPaint.bottom - 40, ps.rcPaint.right, ps.rcPaint.bottom };
        FillRect(hdc, &panelRect, (HBRUSH)(COLOR_BTNFACE + 1)); // Цвет панели

        // Получаем текущее время
        std::wstring timeString = GetCurrentTimeString();
        std::wstring langString = L"РУС"; // Статичное значение языка

        // Используем GDI+ для рисования текста
        FontFamily fontFamily(L"Segoe UI"); // Выбор шрифта
        Font font(&fontFamily, 16, FontStyleRegular, UnitPixel); // Размер шрифта 16
        SolidBrush brush(Color(255, 0, 0, 0)); // Черный цвет текста

        // Измеряем размер текста для центрирования
        RectF timeRect;
        graphics.MeasureString(timeString.c_str(), -1, &font, PointF(0, 0), &timeRect);
        RectF langRect;
        graphics.MeasureString(langString.c_str(), -1, &font, PointF(0, 0), &langRect);

        // Вычисляем координаты для текста
        float xTime = panelRect.right - timeRect.Width - langRect.Width - 30; // Увеличенный отступ справа
        float y = panelRect.bottom - timeRect.Height - 10; // Отступ снизу

        // Рисуем текст времени без фона
        PointF timePoint(xTime, y);
        graphics.DrawString(timeString.c_str(), -1, &font, timePoint, nullptr, &brush);

        // Рисуем текст языка рядом с временем
        PointF langPoint(xTime - langRect.Width - 10, y); // Отступ слева от времени
        graphics.DrawString(langString.c_str(), -1, &font, langPoint, nullptr, &brush);

        EndPaint(hwnd, &ps);
        return 0;
    }

    case WM_COMMAND:
        if (LOWORD(wParam) == 1 && HIWORD(wParam) == EN_RETURN) {
            // Обработка нажатия клавиши Enter в строке поиска
            wchar_t query[256];
            GetWindowText(hSearchBox, query, 256);
            PerformSearch(query);
        }
        break;

    default:
        return DefWindowProc(hwnd, uMsg, wParam, lParam);
    }
    return 0;
}

// Точка входа в программу
int WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE, PWSTR, int nCmdShow) {
    GdiplusStartupInput gdiplusStartupInput;
    ULONG_PTR gdiplusToken;
    GdiplusStartup(&gdiplusToken, &gdiplusStartupInput, NULL);

    // Загрузка фона
    if (!LoadImageFromURL(L"https://example.com/yourimage.jpg")) { // Укажите свой URL
        return 1;
    }

    // Регистрация класса окна
    const wchar_t CLASS_NAME[] = L"Sample Window Class";
    WNDCLASS wc = {};
    wc.lpfnWndProc = WindowProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = CLASS_NAME;
    wc.hCursor = LoadCursor(NULL, IDC_ARROW);
    RegisterClass(&wc);

    // Создание окна
    HWND hwnd = CreateWindowEx(
        0,
        CLASS_NAME,
        L"Заголовок окна",
        WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT,
        NULL,
        NULL,
        hInstance,
        NULL
    );

    if (hwnd == NULL) {
        MessageBox(NULL, L"Не удалось создать окно.", L"Ошибка", MB_OK | MB_ICONERROR);
        return 1;
    }

    ShowWindow(hwnd, nCmdShow);

    // Цикл обработки сообщений
    MSG msg = {};
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    GdiplusShutdown(gdiplusToken);
    return 0;
}
