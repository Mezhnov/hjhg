#include <windows.h>
#include <gdiplus.h>
#include <wininet.h>
#include <string>
#include <vector>
#include <chrono>
#include <iomanip>
#include <sstream>
#include <locale>
#include <codecvt>

#pragma comment(lib, "gdiplus.lib")
#pragma comment(lib, "wininet.lib")

using namespace Gdiplus;

// Объявляем переменную для изображения на уровне модуля
Image* backgroundImage = nullptr;

// Объявляем переменную для поля поиска
HWND hSearchEdit;

// Функция для загрузки изображения из URL
bool LoadImageFromURL(const std::wstring& url) {
    HINTERNET hInternet = InternetOpen(L"ImageLoader", INTERNET_OPEN_TYPE_DIRECT, NULL, NULL, 0);
    if (!hInternet) return false;

    HINTERNET hConnect = InternetOpenUrl(hInternet, url.c_str(), NULL, 0, INTERNET_FLAG_RELOAD, 0);
    if (!hConnect) {
        InternetCloseHandle(hInternet);
        return false;
    }

    // Получаем размер загружаемого изображения
    DWORD fileSize = 0;
    DWORD bytesRead = 0;
    if (!InternetQueryDataAvailable(hConnect, &fileSize, 0, 0)) {
        InternetCloseHandle(hConnect);
        InternetCloseHandle(hInternet);
        return false;
    }

    // Создаем буфер для хранения данных изображения
    std::vector<BYTE> buffer(fileSize);
    if (!InternetReadFile(hConnect, buffer.data(), fileSize, &bytesRead) || bytesRead != fileSize) {
        InternetCloseHandle(hConnect);
        InternetCloseHandle(hInternet);
        return false;
    }

    // Закрываем дескрипторы
    InternetCloseHandle(hConnect);
    InternetCloseHandle(hInternet);

    // Загружаем изображение в GDI+
    IStream* stream = nullptr;
    if (FAILED(CreateStreamOnHGlobal(NULL, TRUE, &stream))) {
        return false;
    }

    ULONG written;
    if (FAILED(stream->Write(buffer.data(), fileSize, &written)) || written != fileSize) {
        stream->Release();
        return false;
    }
    stream->Seek({ 0 }, STREAM_SEEK_SET, NULL);

    backgroundImage = new Image(stream);
    stream->Release();

    return backgroundImage != nullptr;
}

// Функция для получения текущего времени в строковом формате
std::wstring GetCurrentTimeString() {
    using namespace std::chrono;
    auto now = system_clock::now();
    std::time_t now_c = system_clock::to_time_t(now);
    std::tm parts;

    // Используем localtime_s вместо localtime
    localtime_s(&parts, &now_c);

    std::wstringstream ss;
    ss << std::put_time(&parts, L"%H:%M"); // Формат времени HH:MM
    return ss.str();
}

LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
    switch (uMsg) {
    case WM_DESTROY:
        delete backgroundImage; // Удаляем изображение
        PostQuitMessage(0);
        return 0;

    case WM_KEYDOWN:
        // Проверяем нажатие клавиши Esc
        if (wParam == VK_ESCAPE) {
            DestroyWindow(hwnd); // Закрыть окно
        }
        return 0;

    case WM_PAINT: {
        PAINTSTRUCT ps;
        HDC hdc = BeginPaint(hwnd, &ps);
        Graphics graphics(hdc);

        // Рисуем изображение как фон
        if (backgroundImage) {
            graphics.DrawImage(backgroundImage, 0, 0, ps.rcPaint.right, ps.rcPaint.bottom);
        }

        // Рисуем нижнюю панель
        RECT panelRect = { 0, ps.rcPaint.bottom - 40, ps.rcPaint.right, ps.rcPaint.bottom };
        FillRect(hdc, &panelRect, (HBRUSH)(COLOR_BTNFACE + 1)); // Цвет панели

        // Получаем текущее время
        std::wstring timeString = GetCurrentTimeString();
        std::wstring langString = L"РУС"; // Статичное значение языка

        // Используем GDI+ для рисования текста
        FontFamily fontFamily(L"Segoe UI"); // Выбор шрифта
        Font font(&fontFamily, 16, FontStyleRegular, UnitPixel); // Устанавливаем размер шрифта на 16
        SolidBrush brush(Color(255, 0, 0, 0)); // Черный цвет текста

        // Находим размеры текста для центрирования
        RectF timeRect;
        graphics.MeasureString(timeString.c_str(), -1, &font, PointF(0, 0), &timeRect);
        RectF langRect;
        graphics.MeasureString(langString.c_str(), -1, &font, PointF(0, 0), &langRect);

        // Рассчитываем координаты для расположения текста
        float xTime = panelRect.right - timeRect.Width - langRect.Width - 30; // Увеличен отступ от правого края
        float y = panelRect.bottom - timeRect.Height - 10; // Отступ от нижней границы

        // Рисуем текст без фона
        PointF timePoint(xTime, y);
        graphics.DrawString(timeString.c_str(), -1, &font, timePoint, nullptr, &brush);

        // Рисуем язык рядом с временем
        PointF langPoint(xTime - langRect.Width - 10, y); // Отступ слева от времени
        graphics.DrawString(langString.c_str(), -1, &font, langPoint, nullptr, &brush);

        EndPaint(hwnd, &ps);
        return 0;
    }

    case WM_SIZE:
        // Изменяем размер поля поиска при изменении размера окна
        if (hSearchEdit) {
            MoveWindow(hSearchEdit, 10, 10, 200, 30, TRUE);
        }
        return 0;

    default:
        return DefWindowProc(hwnd, uMsg, wParam, lParam);
    }
}

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE, LPSTR, int nCmdShow) {
    const wchar_t CLASS_NAME[] = L"FullscreenWindowClass";

    // Инициализация GDI+
    GdiplusStartupInput gdiplusStartupInput;
    ULONG_PTR gdiplusToken;
    GdiplusStartup(&gdiplusToken, &gdiplusStartupInput, NULL);

    // Определяем класс окна
    WNDCLASS wc = {};
    wc.lpfnWndProc = WindowProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = CLASS_NAME;
    wc.hCursor = LoadCursor(NULL, IDC_ARROW);
    wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);

    RegisterClass(&wc);

    // Получаем размеры экрана
    int screenWidth = GetSystemMetrics(SM_CXSCREEN);
    int screenHeight = GetSystemMetrics(SM_CYSCREEN);

    // Создаем окно
    HWND hwnd = CreateWindowEx(
        WS_EX_TOPMOST, // Окно всегда поверх остальных
        CLASS_NAME,
        L"My Fullscreen Window",
        WS_POPUP, // Убираем рамку окна
        0, 0, screenWidth, screenHeight, // Положение и размер окна
        NULL,
        NULL,
        hInstance,
        NULL
    );

    if (hwnd == NULL) return 0;

    // Загружаем изображение из локального файла
    std::wstring imagePath = L"Resources/afrikanskii-lev.orig.jpg"; // Путь к изображению в папке проекта
    backgroundImage = new Gdiplus::Image(imagePath.c_str());

    // Создаем поле для поиска
    hSearchEdit = CreateWindowEx(
        WS_EX_TRANSPARENT, // Делаем поле прозрачным
        L"EDIT", NULL,
        WS_CHILD | WS_VISIBLE | ES_AUTOHSCROLL,
        10, 10, 200, 30,
        hwnd,
        NULL,
        hInstance,
        NULL
    );

    // Убираем границы и фон
    SetWindowLong(hSearchEdit, GWL_EXSTYLE, GetWindowLong(hSearchEdit, GWL_EXSTYLE) | WS_EX_LAYERED);
    SetLayeredWindowAttributes(hSearchEdit, RGB(255, 255, 255), 255, LWA_COLORKEY);

    ShowWindow(hwnd, nCmdShow);

    // Главный цикл сообщений
    MSG msg = {};
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    // Завершаем работу GDI+
    GdiplusShutdown(gdiplusToken);

    return 0;
}
