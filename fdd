#include <windows.h>
#include <gdiplus.h>
#include <wininet.h>
#include <string>
#include <vector>
#include <chrono>
#include <iomanip>
#include <sstream>
#include <locale>
#include <codecvt>
#include <windowsx.h>
#include <mmsystem.h> // For PlaySound
#include <CommCtrl.h> // For common controls
#include <objidl.h>
#include <fstream>

#pragma comment(lib, "gdiplus.lib")
#pragma comment(lib, "wininet.lib")
#pragma comment(lib, "winmm.lib") // Link with winmm.lib for PlaySound
#pragma comment(lib, "comctl32.lib") // Link with comctl32.lib for common controls

using namespace Gdiplus;

// Определение идентификаторов ресурсов для звуков
#define IDR_WAVE1 101
#define IDR_WAVE2 102
#define IDR_WAVE3 103
#define IDR_WAVE4 104

// Структура для хранения информации об изображении
struct ImageItem {
    Image* image;
    std::wstring title;
    float x; // X-координата на экране
    float y; // Y-координата на экране
    float width; // Ширина изображения
    float height; // Высота изображения
};

// Глобальные переменные
Image* backgroundImage = nullptr;
Image* wifiIcon = nullptr;
Image* soundIcon = nullptr;
Image* batteryIcon = nullptr;

// Список языков
std::vector<std::wstring> languages = { L"РУС", L"ENG" }; // Русский и Английский
int currentLanguageIndex = 0; // Текущий индекс языка

// Список дополнительных изображений
std::vector<ImageItem> images;

// Функция для загрузки изображения из URL
bool LoadImageFromURL(const std::wstring& url, Image*& outImage) {
    HINTERNET hInternet = InternetOpen(L"ImageLoader", INTERNET_OPEN_TYPE_DIRECT, NULL, NULL, 0);
    if (!hInternet) {
        OutputDebugString(L"InternetOpen не удалось\n");
        return false;
    }

    // Флаги для открытия URL: без кеша и чтение данных по мере загрузки
    HINTERNET hConnect = InternetOpenUrl(hInternet, url.c_str(), NULL, 0, INTERNET_FLAG_RELOAD | INTERNET_FLAG_DONT_CACHE, 0);
    if (!hConnect) {
        OutputDebugString(L"InternetOpenUrl не удалось\n");
        InternetCloseHandle(hInternet);
        return false;
    }

    // Чтение всех данных
    std::vector<BYTE> buffer;
    DWORD bytesAvailable = 0;
    DWORD bytesRead = 0;
    BYTE tempBuffer[4096];
    while (InternetQueryDataAvailable(hConnect, &bytesAvailable, 0, 0) && bytesAvailable > 0) {
        DWORD toRead = min(bytesAvailable, (DWORD)sizeof(tempBuffer));
        if (InternetReadFile(hConnect, tempBuffer, toRead, &bytesRead) && bytesRead > 0) {
            buffer.insert(buffer.end(), tempBuffer, tempBuffer + bytesRead);
        }
        else {
            break;
        }
    }

    InternetCloseHandle(hConnect);
    InternetCloseHandle(hInternet);

    if (buffer.empty()) {
        OutputDebugString(L"Нет данных, загруженных из URL\n");
        return false;
    }

    // Создание потока из буфера
    IStream* stream = nullptr;
    if (FAILED(CreateStreamOnHGlobal(NULL, TRUE, &stream))) {
        OutputDebugString(L"CreateStreamOnHGlobal не удалось\n");
        return false;
    }

    ULONG written;
    if (FAILED(stream->Write(buffer.data(), buffer.size(), &written)) || written != buffer.size()) {
        OutputDebugString(L"Запись в поток не удалась\n");
        stream->Release();
        return false;
    }

    LARGE_INTEGER liZero = {};
    stream->Seek(liZero, STREAM_SEEK_SET, NULL);

    // Загрузка изображения из потока
    Image* img = new Image(stream);
    stream->Release();

    // Проверка состояния загрузки изображения
    if (img->GetLastStatus() != Ok) {
        OutputDebugString(L"Не удалось создать Image из потока\n");
        delete img;
        return false;
    }

    outImage = img;
    OutputDebugString(L"Изображение успешно загружено\n");
    return true;
}

// Функция для загрузки изображения из локального файла
bool LoadImageFromFile(const std::wstring& filePath, Image*& outImage) {
    Image* img = new Image(filePath.c_str());
    if (img->GetLastStatus() != Ok) {
        OutputDebugString(L"Не удалось загрузить изображение из файла\n");
        delete img;
        return false;
    }
    outImage = img;
    OutputDebugString(L"Изображение из файла успешно загружено\n");
    return true;
}

// Функция для получения текущего времени в виде строки
std::wstring GetCurrentTimeString() {
    using namespace std::chrono;
    auto now = system_clock::now();
    std::time_t now_c = system_clock::to_time_t(now);
    std::tm parts;

    // Использование localtime_s для безопасного многопоточного доступа
    localtime_s(&parts, &now_c);

    std::wstringstream ss;
    ss << std::put_time(&parts, L"%H:%M"); // Формат времени ЧЧ:ММ
    return ss.str();
}

// Функция для воспроизведения звука по языку
void PlaySoundByLanguage(const std::wstring& soundName) {
    // Определение пути к файлу звука или использование системных звуков
    // Для демонстрации используем системные звуки на основе soundName
    // Можно заменить на фактические пути к файлам или URL

    std::wstring soundPath;
    if (currentLanguageIndex == 0) { // Русский
        if (soundName == L"WindowsLogo") {
            // Воспроизведение ресурса звука
            PlaySound(MAKEINTRESOURCE(IDR_WAVE1), GetModuleHandle(NULL), SND_RESOURCE | SND_ASYNC);
        }
        else if (soundName == L"WiFi") {
            PlaySound(MAKEINTRESOURCE(IDR_WAVE2), GetModuleHandle(NULL), SND_RESOURCE | SND_ASYNC);
        }
        else if (soundName == L"BatteryCharging") {
            PlaySound(MAKEINTRESOURCE(IDR_WAVE3), GetModuleHandle(NULL), SND_RESOURCE | SND_ASYNC);
        }
        else if (soundName == L"Triangle") {
            PlaySound(MAKEINTRESOURCE(IDR_WAVE4), GetModuleHandle(NULL), SND_RESOURCE | SND_ASYNC);
        }
    }
    else { // Английский или другие языки
        // Опционально, воспроизвести другие звуки или ничего не делать
    }
}

// Функция для инициализации дополнительных изображений
bool InitializeImages() {
    // Список URL изображений и соответствующих заголовков
    std::vector<std::pair<std::wstring, std::wstring>> imageData = {
        { L"https://i.postimg.cc/4x8HknSh/nyc01-temp-32d4-T5s3-TEIMt1-R3qrjho.png", L"Новая папка" }, // New Folder
        { L"https://i.postimg.cc/0Q12Jw0R/fra01-temp-r-MINe9-WDa-DPi-KQl-Rb3p-F-processed.png", L"Этот компьютер" }, // This Computer
        // Добавьте больше изображений по мере необходимости
    };

    // Начальные позиции для изображений
    float startX = 50.0f;
    float startY = 150.0f; // Располагаются ниже объявления
    float spacing = 150.0f; // Уменьшенное расстояние для лучшей компоновки

    for (size_t i = 0; i < imageData.size(); ++i) {
        Image* img = nullptr;
        if (LoadImageFromURL(imageData[i].first, img)) {
            ImageItem item;
            item.image = img;
            item.title = imageData[i].second;
            item.x = startX + i * spacing; // Позиция по оси X с учетом расстояния
            item.y = startY; // Фиксированная позиция по оси Y
            item.width = 100.0f; // Ширина изображения
            item.height = 100.0f; // Высота изображения
            images.push_back(item);
        }
        else {
            OutputDebugString((L"Не удалось загрузить изображение: " + imageData[i].first + L"\n").c_str());
            return false;
        }
    }

    // Загрузка иконок Wi-Fi, Звука и Батареи
    struct IconData {
        Image** imagePtr;
        std::wstring url;
    };

    std::vector<IconData> iconsToLoad = {
        { &wifiIcon, L"https://upload.wikimedia.org/wikipedia/commons/thumb/7/74/Feather-core-wifi.svg/1200px-Feather-core-wifi.svg.png" },
        { &soundIcon, L"https://cdn-icons-png.flaticon.com/512/84/84922.png" },
        { &batteryIcon, L"https://i.postimg.cc/1RFQP7JK/Remove-bg-ai-1729799941732.png" },
    };

    for (const auto& icon : iconsToLoad) {
        if (!LoadImageFromURL(icon.url, *(icon.imagePtr))) {
            OutputDebugString((L"Не удалось загрузить иконку: " + icon.url + L"\n").c_str());
            return false;
        }
    }

    return true;
}

// Структура для хранения данных окна
struct WindowData {
    bool isDragging = false;
    size_t draggingImageIndex = SIZE_MAX; // Неверный индекс по умолчанию
    POINT lastMousePos = { 0, 0 };
};

// Функция для отображения простого диалога переименования и получения ввода пользователя
bool ShowRenameDialog(HWND hwndOwner, const std::wstring& currentName, std::wstring& newName) {
    // Определение класса диалога
    const wchar_t DIALOG_CLASS_NAME[] = L"RenameDialogClass";

    // Регистрация класса окна диалога, если еще не зарегистрирован
    static bool isClassRegistered = false;
    if (!isClassRegistered) {
        WNDCLASS wc = { 0 };
        wc.lpfnWndProc = DefWindowProc;
        wc.hInstance = GetModuleHandle(NULL);
        wc.lpszClassName = DIALOG_CLASS_NAME;
        RegisterClass(&wc);
        isClassRegistered = true;
    }

    // Создание окна диалога
    HWND hwndDialog = CreateWindowEx(
        WS_EX_DLGMODALFRAME,
        DIALOG_CLASS_NAME,
        L"Переименование",
        WS_POPUP | WS_CAPTION | WS_SYSMENU,
        CW_USEDEFAULT, CW_USEDEFAULT, 300, 120,
        hwndOwner,
        NULL,
        GetModuleHandle(NULL),
        NULL
    );

    if (!hwndDialog) return false;

    // Создание статического текста
    HWND hwndText = CreateWindow(
        L"STATIC",
        L"Введите новое имя:",
        WS_CHILD | WS_VISIBLE,
        10, 10, 280, 20,
        hwndDialog,
        NULL,
        GetModuleHandle(NULL),
        NULL
    );

    // Создание поля ввода
    HWND hwndEdit = CreateWindowEx(
        0,
        L"EDIT",
        currentName.c_str(),
        WS_CHILD | WS_VISIBLE | WS_BORDER | ES_AUTOHSCROLL,
        10, 40, 260, 25,
        hwndDialog,
        NULL,
        GetModuleHandle(NULL),
        NULL
    );

    // Создание кнопки OK
    HWND hwndOK = CreateWindow(
        L"BUTTON",
        L"OK",
        WS_CHILD | WS_VISIBLE | BS_DEFPUSHBUTTON,
        70, 80, 60, 25,
        hwndDialog,
        (HMENU)1,
        GetModuleHandle(NULL),
        NULL
    );

    // Создание кнопки Отмена
    HWND hwndCancel = CreateWindow(
        L"BUTTON",
        L"Отмена",
        WS_CHILD | WS_VISIBLE | BS_PUSHBUTTON,
        170, 80, 60, 25,
        hwndDialog,
        (HMENU)2,
        GetModuleHandle(NULL),
        NULL
    );

    // Отображение диалога
    ShowWindow(hwndDialog, SW_SHOW);
    SetForegroundWindow(hwndDialog);

    // Цикл сообщений для диалога
    MSG msg;
    BOOL result = FALSE;
    while (GetMessage(&msg, NULL, 0, 0)) {
        if (msg.hwnd == hwndDialog) {
            if (msg.message == WM_COMMAND) {
                if (LOWORD(msg.wParam) == 1) { // OK
                    wchar_t buffer[256];
                    GetWindowText(hwndEdit, buffer, 256);
                    newName = buffer;
                    EndDialog(hwndDialog, 1);
                    result = TRUE;
                    break;
                }
                else if (LOWORD(msg.wParam) == 2) { // Отмена
                    EndDialog(hwndDialog, 0);
                    break;
                }
            }
        }
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    DestroyWindow(hwndDialog);
    return result;
}

// Функция для создания контекстного меню
void CreateContextMenu(HWND hwnd, int x, int y, size_t imageIndex) {
    if (imageIndex >= images.size()) return;

    HMENU hMenu = CreatePopupMenu();
    if (hMenu) {
        // Добавление пунктов меню
        AppendMenu(hMenu, MF_STRING, 1, L"Открыть");       // Open
        AppendMenu(hMenu, MF_STRING, 2, L"Переименовать"); // Rename
        AppendMenu(hMenu, MF_STRING, 3, L"Удалить");       // Delete

        // Установка фокуса на окно для корректного исчезновения меню
        SetForegroundWindow(hwnd);

        // Отслеживание всплывающего меню
        int cmd = TrackPopupMenu(
            hMenu,
            TPM_RETURNCMD | TPM_TOPALIGN | TPM_LEFTALIGN,
            x,
            y,
            0,
            hwnd,
            NULL
        );

        // Обработка выбора меню
        if (cmd == 1) { // Open
            MessageBox(hwnd, L"Открыть выбранную папку.", L"Открыть", MB_OK);
        }
        else if (cmd == 2) { // Rename
            std::wstring newName;
            if (ShowRenameDialog(hwnd, images[imageIndex].title, newName)) {
                if (!newName.empty()) {
                    images[imageIndex].title = newName;
                    InvalidateRect(hwnd, NULL, TRUE); // Перерисовка для отображения нового имени
                }
            }
        }
        else if (cmd == 3) { // Delete
            MessageBox(hwnd, L"Функция удаления не реализована.", L"Удалить", MB_OK);
        }

        DestroyMenu(hMenu);
    }
}

// Основная процедура окна
LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
    // Получение данных окна
    WindowData* data = reinterpret_cast<WindowData*>(GetWindowLongPtr(hwnd, GWLP_USERDATA));

    switch (uMsg) {
    case WM_CREATE: {
        // Выделение и инициализация данных окна
        WindowData* wndData = new WindowData();
        SetWindowLongPtr(hwnd, GWLP_USERDATA, reinterpret_cast<LONG_PTR>(wndData));
        return 0;
    }

    case WM_DESTROY:
        // Очистка данных окна
        if (data) {
            delete data;
        }

        // Удаление загруженных изображений
        delete backgroundImage;
        delete wifiIcon;
        delete soundIcon;
        delete batteryIcon;
        for (auto& imgItem : images) {
            delete imgItem.image;
        }
        PostQuitMessage(0);
        return 0;

    case WM_KEYDOWN:
        // Проверка нажатия клавиши Esc для закрытия окна
        if (wParam == VK_ESCAPE) {
            DestroyWindow(hwnd); // Закрытие окна
        }

        // Обработка переключения языка через Alt+Shift или Win+Space
        if (((GetAsyncKeyState(VK_MENU) & 0x8000) && wParam == VK_SHIFT) ||
            ((GetAsyncKeyState(VK_LWIN) & 0x8000) && wParam == VK_SPACE)) {
            currentLanguageIndex = (currentLanguageIndex + 1) % languages.size(); // Переключение языка
            InvalidateRect(hwnd, NULL, TRUE); // Перерисовка окна

            // Воспроизведение звуков, если язык Русский
            if (languages[currentLanguageIndex] == L"РУС") {
                PlaySoundByLanguage(L"WindowsLogo");
                PlaySoundByLanguage(L"WiFi");
                PlaySoundByLanguage(L"BatteryCharging");
                PlaySoundByLanguage(L"Triangle");
            }
        }

        return 0;

    case WM_SIZE: {
        InvalidateRect(hwnd, NULL, TRUE); // Перерисовка окна при изменении размера
        return 0;
    }

    case WM_PAINT: {
        PAINTSTRUCT ps;
        HDC hdc = BeginPaint(hwnd, &ps);
        Graphics graphics(hdc);

        // Установка высококачественных настроек рендеринга
        graphics.SetSmoothingMode(SmoothingModeHighQuality);
        graphics.SetInterpolationMode(InterpolationModeHighQualityBicubic);
        graphics.SetPixelOffsetMode(PixelOffsetModeHighQuality);

        // Получение размеров окна
        RECT windowRect;
        GetClientRect(hwnd, &windowRect);

        // Рисование фонового изображения с сохранением пропорций
        if (backgroundImage) {
            UINT imgWidth = backgroundImage->GetWidth();
            UINT imgHeight = backgroundImage->GetHeight();

            double windowAspect = static_cast<double>(windowRect.right) / windowRect.bottom;
            double imageAspect = static_cast<double>(imgWidth) / imgHeight;

            double drawWidth, drawHeight;
            if (windowAspect > imageAspect) {
                // Окно шире изображения
                drawHeight = windowRect.bottom;
                drawWidth = imageAspect * drawHeight;
            }
            else {
                // Окно уже или равно по ширине изображению
                drawWidth = windowRect.right;
                drawHeight = drawWidth / imageAspect;
            }

            float x = static_cast<float>((windowRect.right - drawWidth) / 2.0);
            float y = static_cast<float>((windowRect.bottom - drawHeight) / 2.0);
            graphics.DrawImage(backgroundImage, x, y, static_cast<REAL>(drawWidth), static_cast<REAL>(drawHeight));
        }

        // Рисование нижней панели
        RECT panelRect = { 0, windowRect.bottom - 40, windowRect.right, windowRect.bottom };
        FillRect(hdc, &panelRect, (HBRUSH)(COLOR_BTNFACE + 1)); // Цвет панели

        // Рисование иконок Wi-Fi, Звука и Батареи
        if (wifiIcon && soundIcon && batteryIcon) {
            float iconSize = 24.0f; // Размер иконки
            float iconY = static_cast<float>(windowRect.bottom - 40 + (40 - iconSize) / 2.0); // Вертикальное центрирование

            // Позиции с отступами
            float padding = 15.0f;
            float currentX = padding; // Начальная позиция по X

            // Рисование иконки Wi-Fi
            graphics.DrawImage(wifiIcon, currentX, iconY, iconSize, iconSize);
            currentX += iconSize + 10.0f; // Перемещение к следующей иконке

            // Рисование иконки Звука
            graphics.DrawImage(soundIcon, currentX, iconY, iconSize, iconSize);
            currentX += iconSize + 10.0f;

            // Рисование иконки Батареи
            graphics.DrawImage(batteryIcon, currentX, iconY, iconSize, iconSize);
            currentX += iconSize + 30.0f; // Дополнительный отступ перед языком и временем
        }

        // Получение текущего времени
        std::wstring timeString = GetCurrentTimeString();
        std::wstring langString = languages[currentLanguageIndex]; // Текущий язык

        // Использование GDI+ для рисования текста
        FontFamily fontFamily(L"Segoe UI"); // Выбор шрифта
        Font font(&fontFamily, 14, FontStyleRegular, UnitPixel); // Размер шрифта
        SolidBrush brush(Color(255, 0, 0, 0)); // Черный цвет текста

        // Измерение размеров текста
        RectF timeRect;
        graphics.MeasureString(timeString.c_str(), -1, &font, PointF(0, 0), &timeRect);
        RectF langRect;
        graphics.MeasureString(langString.c_str(), -1, &font, PointF(0, 0), &langRect);

        // Расчет позиций для текста
        float paddingText = 15.0f;
        float xTime = static_cast<float>(windowRect.right - timeRect.Width - langRect.Width - 30); // Отступ справа
        float yText = static_cast<float>(windowRect.bottom - 40 + (40 - timeRect.Height) / 2.0 - 1); // Вертикальное выравнивание

        // Рисование текущего языка
        PointF langPoint(xTime - langRect.Width - 10, yText); // Позиция слева от времени
        graphics.DrawString(langString.c_str(), -1, &font, langPoint, &brush);

        // Рисование текущего времени
        PointF timePoint(xTime, yText);
        graphics.DrawString(timeString.c_str(), -1, &font, timePoint, &brush);

        // Добавление объявления ОС по центру экрана
        std::wstring announcement;
        if (languages[currentLanguageIndex] == L"РУС") {
            announcement = L"Представляем Orega OS: Будущее Производительности!";
        }
        else {
            announcement = L"Introducing Orega OS: The Future of Performance!";
        }
        RectF announcementRect;
        Font largeFont(&fontFamily, 40, FontStyleBold, UnitPixel); // Шрифт для объявления
        graphics.MeasureString(announcement.c_str(), -1, &largeFont, PointF(0, 0), &announcementRect);

        // Позиция объявления по центру
        float xAnnouncement = (static_cast<float>(windowRect.right) - announcementRect.Width) / 2.0f;
        float yAnnouncement = (static_cast<float>(windowRect.bottom) - announcementRect.Height) / 2.0f;
        PointF announcementPoint(xAnnouncement, yAnnouncement);

        SolidBrush announcementBrush(Color(255, 255, 255, 255)); // Белый цвет текста для объявления
        graphics.DrawString(announcement.c_str(), -1, &largeFont, announcementPoint, &announcementBrush);

        // Рисование дополнительных изображений и их заголовков
        for (const auto& imgItem : images) {
            // Рисование изображения
            graphics.DrawImage(imgItem.image, imgItem.x, imgItem.y, imgItem.width, imgItem.height);

            // Рисование заголовка под изображением, центрировано
            Font titleFont(&fontFamily, 16, FontStyleRegular, UnitPixel);
            SolidBrush titleBrush(Color(255, 255, 255, 255)); // Белый цвет текста для заголовков

            RectF titleRect;
            graphics.MeasureString(imgItem.title.c_str(), -1, &titleFont, PointF(0, 0), &titleRect);

            float xTitle = imgItem.x + (imgItem.width - titleRect.Width) / 2.0f;
            float yTitle = imgItem.y + imgItem.height + 5.0f; // Смещение под изображением

            PointF titlePoint(xTitle, yTitle);
            graphics.DrawString(imgItem.title.c_str(), -1, &titleFont, titlePoint, &titleBrush);
        }

        EndPaint(hwnd, &ps);
        return 0;
    }

    case WM_LBUTTONDOWN: {
        if (data) {
            // Получение позиции мыши
            int mouseX = GET_X_LPARAM(lParam);
            int mouseY = GET_Y_LPARAM(lParam);
            POINT mousePt = { mouseX, mouseY };

            // Проверка, находится ли клик на каком-либо изображении (сверху вниз)
            for (size_t i = images.size(); i-- > 0;) {
                const auto& imgItem = images[i];
                RECT imgRect = {
                    static_cast<LONG>(imgItem.x),
                    static_cast<LONG>(imgItem.y),
                    static_cast<LONG>(imgItem.x + imgItem.width),
                    static_cast<LONG>(imgItem.y + imgItem.height)
                };
                if (PtInRect(&imgRect, mousePt)) {
                    // Начало перетаскивания
                    data->isDragging = true;
                    data->draggingImageIndex = i;
                    data->lastMousePos = mousePt;

                    // Захват мыши
                    SetCapture(hwnd);

                    // Перемещение выбранного изображения на вершину списка
                    ImageItem draggedItem = images[i];
                    images.erase(images.begin() + i);
                    images.push_back(draggedItem);
                    data->draggingImageIndex = images.size() - 1;

                    InvalidateRect(hwnd, NULL, TRUE);
                    break;
                }
            }
        }
        return 0;
    }

    case WM_RBUTTONDOWN: {
        if (data) {
            // Получение позиции мыши
            int mouseX = GET_X_LPARAM(lParam);
            int mouseY = GET_Y_LPARAM(lParam);
            POINT mousePt = { mouseX, mouseY };

            // Проверка, находится ли клик на каком-либо изображении
            for (size_t i = 0; i < images.size(); ++i) {
                const auto& imgItem = images[i];
                RECT imgRect = {
                    static_cast<LONG>(imgItem.x),
                    static_cast<LONG>(imgItem.y),
                    static_cast<LONG>(imgItem.x + imgItem.width),
                    static_cast<LONG>(imgItem.y + imgItem.height)
                };
                if (PtInRect(&imgRect, mousePt)) {
                    // Создание контекстного меню
                    CreateContextMenu(hwnd, mouseX, mouseY, i);
                    break;
                }
            }
        }
        return 0;
    }

    case WM_MOUSEMOVE: {
        if (data && data->isDragging && data->draggingImageIndex < images.size()) {
            // Получение текущей позиции мыши
            int mouseX = GET_X_LPARAM(lParam);
            int mouseY = GET_Y_LPARAM(lParam);
            POINT currentPt = { mouseX, mouseY };

            // Вычисление дельты движения
            int deltaX = currentPt.x - data->lastMousePos.x;
            int deltaY = currentPt.y - data->lastMousePos.y;

            if (deltaX != 0 || deltaY != 0) {
                // Обновление позиции изображения
                images[data->draggingImageIndex].x += static_cast<float>(deltaX);
                images[data->draggingImageIndex].y += static_cast<float>(deltaY);

                // Получение размеров окна
                RECT windowRect;
                GetClientRect(hwnd, &windowRect);

                // Обеспечение того, чтобы изображение оставалось внутри границ окна
                if (images[data->draggingImageIndex].x < 0)
                    images[data->draggingImageIndex].x = 0;
                if (images[data->draggingImageIndex].y < 0)
                    images[data->draggingImageIndex].y = 0;
                if (images[data->draggingImageIndex].x +
                    images[data->draggingImageIndex].width > windowRect.right)
                    images[data->draggingImageIndex].x = windowRect.right - images[data->draggingImageIndex].width;
                if (images[data->draggingImageIndex].y + images[data->draggingImageIndex].height > windowRect.bottom - 40) // 40 для панели
                    images[data->draggingImageIndex].y = windowRect.bottom - 40 - images[data->draggingImageIndex].height;

                // Обновление последней позиции мыши
                data->lastMousePos = currentPt;

                // Перерисовка окна
                InvalidateRect(hwnd, NULL, TRUE);
            }
        }
        return 0;
    }

    case WM_LBUTTONUP: {
        if (data) {
            // Освобождение захвата мыши
            ReleaseCapture();

            if (data->isDragging && data->draggingImageIndex < images.size()) {
                // Определение, был ли это клик или перетаскивание на основе движения
                int mouseX = GET_X_LPARAM(lParam);
                int mouseY = GET_Y_LPARAM(lParam);
                POINT currentPt = { mouseX, mouseY };
                int distance = abs(currentPt.x - data->lastMousePos.x) + abs(currentPt.y - data->lastMousePos.y);

                if (distance < 5) { // Порог для клика
                    // Это клик, а не перетаскивание
                    CreateContextMenu(hwnd, mouseX, mouseY, data->draggingImageIndex);
                }

                // Окончание перетаскивания
                data->isDragging = false;
                data->draggingImageIndex = SIZE_MAX;
            }
        }
        return 0;
    }

    default:
        return DefWindowProc(hwnd, uMsg, wParam, lParam);
    }
}

// Основная функция приложения
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE, LPSTR, int nCmdShow) {
    const wchar_t CLASS_NAME[] = L"FullscreenWindowClass";

    // Инициализация GDI+
    GdiplusStartupInput gdiplusStartupInput;
    ULONG_PTR gdiplusToken;
    if (GdiplusStartup(&gdiplusToken, &gdiplusStartupInput, NULL) != Ok) {
        MessageBox(NULL, L"Не удалось инициализировать GDI+", L"Ошибка", MB_ICONERROR);
        return 0;
    }

    // Определение класса окна
    WNDCLASS wc = {};
    wc.lpfnWndProc = WindowProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = CLASS_NAME;
    wc.hCursor = LoadCursor(NULL, IDC_ARROW);
    wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);

    if (!RegisterClass(&wc)) {
        MessageBox(NULL, L"Не удалось зарегистрировать класс окна.", L"Ошибка", MB_ICONERROR);
        GdiplusShutdown(gdiplusToken);
        return 0;
    }

    // Инициализация общих элементов управления (опционально, для функциональности диалога)
    INITCOMMONCONTROLSEX icex = { sizeof(INITCOMMONCONTROLSEX), ICC_WIN95_CLASSES };
    InitCommonControlsEx(&icex);

    // Получение размеров экрана
    int screenWidth = GetSystemMetrics(SM_CXSCREEN);
    int screenHeight = GetSystemMetrics(SM_CYSCREEN);

    // Создание окна
    HWND hwnd = CreateWindowEx(
        WS_EX_TOPMOST, // Окно всегда поверх других
        CLASS_NAME,
        L"Orega OS Presentation",
        WS_POPUP, // Удаление границ окна
        0, 0, screenWidth, screenHeight, // Позиция и размер окна
        NULL,
        NULL,
        hInstance,
        NULL
    );

    if (hwnd == NULL) {
        MessageBox(NULL, L"Не удалось создать окно.", L"Ошибка", MB_ICONERROR);
        GdiplusShutdown(gdiplusToken);
        return 0;
    }

    // Загрузка фонового изображения из локального файла
    // Убедитесь, что путь к файлу корректен и файл существует
    if (!LoadImageFromFile(L"C:\\Users\\User\\Downloads\\56cb5ff3d83e4159c447b04d5d3a333e.jpg", backgroundImage)) {
        MessageBox(hwnd, L"Не удалось загрузить фон. Приложение будет закрыто.", L"Ошибка", MB_ICONERROR);
        DestroyWindow(hwnd);
        GdiplusShutdown(gdiplusToken);
        return 0;
    }

    // Инициализация дополнительных изображений
    if (!InitializeImages()) {
        MessageBox(hwnd, L"Не удалось загрузить дополнительные изображения. Приложение будет закрыто.", L"Ошибка", MB_ICONERROR);
        DestroyWindow(hwnd);
        GdiplusShutdown(gdiplusToken);
        return 0;
    }

    ShowWindow(hwnd, nCmdShow);
    UpdateWindow(hwnd);

    // Цикл сообщений
    MSG msg;
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    // Отключение GDI+
    GdiplusShutdown(gdiplusToken);
    return 0;
}
