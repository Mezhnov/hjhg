// main.cpp

#include <windows.h>
#include <gdiplus.h>
#include <wininet.h>
#include <string>
#include <vector>
#include <chrono>
#include <iomanip>
#include <sstream>
#include <locale>
#include <codecvt>
#include <windowsx.h>
#include <mmsystem.h> // Для PlaySound
#include <CommCtrl.h> // Для общих контролов
#include <richedit.h> // Для Rich Edit контролов
#include "resource.h"

#pragma comment(lib, "gdiplus.lib")
#pragma comment(lib, "wininet.lib")
#pragma comment(lib, "winmm.lib")
#pragma comment(lib, "comctl32.lib")

using namespace Gdiplus;
using namespace std;

// Глобальные переменные
HINSTANCE hInst;
HWND hMainWnd;
ULONG_PTR gdiplusToken;

// Предварительные объявления функций
LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
void InitGDIPlus();
void ShutdownGDIPlus();
void LoadResources();
void UnloadResources();
void OnPaint(HWND);
void OnCommand(HWND, int, HWND, UINT);
void OnDestroy(HWND);
void PlaySoundResource(int);

// Точка входа
int APIENTRY wWinMain(_In_ HINSTANCE hInstance,
                      _In_opt_ HINSTANCE hPrevInstance,
                      _In_ LPWSTR    lpCmdLine,
                      _In_ int       nCmdShow)
{
    // Инициализация GDI+
    InitGDIPlus();

    // Регистрация класса окна
    WNDCLASS wc = {};
    wc.lpfnWndProc   = WndProc;
    wc.hInstance     = hInstance;
    wc.lpszClassName = L"MyWindowClass";
    wc.hIcon         = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_APP_ICON));
    wc.hCursor       = LoadCursor(nullptr, IDC_ARROW);
    wc.hbrBackground = (HBRUSH)(COLOR_WINDOW+1);

    RegisterClass(&wc);

    // Создание основного окна
    hMainWnd = CreateWindowEx(
        0,
        wc.lpszClassName,
        L"My Application",
        WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, CW_USEDEFAULT, 800, 600,
        nullptr,
        LoadMenu(hInstance, MAKEINTRESOURCE(IDM_MENU)),
        hInstance,
        nullptr
    );

    if (!hMainWnd)
    {
        return -1;
    }

    ShowWindow(hMainWnd, nCmdShow);

    // Основной цикл сообщений
    MSG msg = {};
    while (GetMessage(&msg, nullptr, 0, 0))
    {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    // Завершение GDI+
    ShutdownGDIPlus();

    return (int) msg.wParam;
}

// Функция инициализации GDI+
void InitGDIPlus()
{
    GdiplusStartupInput gdiplusStartupInput;
    GdiplusStartup(&gdiplusToken, &gdiplusStartupInput, nullptr);
}

// Функция завершения GDI+
void ShutdownGDIPlus()
{
    GdiplusShutdown(gdiplusToken);
}

// Обработчик сообщений окна
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    switch (message)
    {
    case WM_CREATE:
        {
            // Создание контролов
            HWND hEdit = CreateWindowEx(0, RICHEDIT_CLASS, L"",
                WS_CHILD | WS_VISIBLE | WS_BORDER | ES_MULTILINE,
                10, 10, 400, 200, hWnd, (HMENU)IDC_MAIN_EDIT, hInst, nullptr);

            HWND hButton = CreateWindow(
                L"BUTTON",  // Прекласс зарегистрирован в системе
                L"Click Me",      // Текст на кнопке
                WS_TABSTOP | WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON,  // Стиль окна
                10,         // x положение
                220,        // y положение
                100,        // Ширина
                30,         // Высота
                hWnd,       // Родительское окно
                (HMENU)IDC_MAIN_BUTTON,       // Идентификатор контролла
                hInst,     // Инстанс приложения
                nullptr);      // Доп. параметры
        }
        break;
    case WM_COMMAND:
        {
            OnCommand(hWnd, LOWORD(wParam), (HWND)lParam, HIWORD(wParam));
        }
        break;
    case WM_PAINT:
        {
            OnPaint(hWnd);
        }
        break;
    case WM_DESTROY:
        {
            OnDestroy(hWnd);
        }
        break;
    default:
        return DefWindowProc(hWnd, message, wParam, lParam);
    }
    return 0;
}

// Обработчик команды
void OnCommand(HWND hWnd, int id, HWND hwndCtl, UINT codeNotify)
{
    switch (id)
    {
    case IDM_EXIT:
        DestroyWindow(hWnd);
        break;
    case IDC_MAIN_BUTTON:
        {
            // Действие при нажатии на кнопку
            PlaySoundResource(IDR_WAVE1);

            MessageBox(hWnd, L"Button Clicked!", L"Information", MB_OK | MB_ICONINFORMATION);
        }
        break;
    default:
        break;
    }
}

// Функция обработки WM_PAINT
void OnPaint(HWND hWnd)
{
    PAINTSTRUCT ps;
    HDC hdc = BeginPaint(hWnd, &ps);

    // Использование GDI+ для рисования изображения
    Graphics graphics(hdc);

    // Загрузка изображения из ресурса
    HRSRC hResource = FindResource(hInst, MAKEINTRESOURCE(IDB_BACKGROUND), RT_BITMAP);
    if (hResource)
    {
        HGLOBAL hMemory = LoadResource(hInst, hResource);
        if (hMemory)
        {
            DWORD imageSize = SizeofResource(hInst, hResource);
            void* pResourceData = LockResource(hMemory);
            if (pResourceData)
            {
                HGLOBAL hBuffer = GlobalAlloc(GMEM_FIXED, imageSize);
                memcpy(hBuffer, pResourceData, imageSize);
                IStream* pStream = nullptr;
                if (CreateStreamOnHGlobal(hBuffer, TRUE, &pStream) == S_OK)
                {
                    // Создание изображения
                    Bitmap* bitmap = Bitmap::FromStream(pStream);
                    if (bitmap)
                    {
                        graphics.DrawImage(bitmap, 0, 0);
                        delete bitmap;
                    }
                    pStream->Release();
                }
                GlobalFree(hBuffer);
            }
            FreeResource(hMemory);
        }
    }

    EndPaint(hWnd, &ps);
}

// Обработчик WM_DESTROY
void OnDestroy(HWND hWnd)
{
    PostQuitMessage(0);
}

// Функция для воспроизведения звука из ресурсов
void PlaySoundResource(int resourceID)
{
    HRSRC hRes = FindResource(hInst, MAKEINTRESOURCE(resourceID), L"WAVE");
    if (hRes)
    {
        HGLOBAL hMem = LoadResource(hInst, hRes);
        if (hMem)
        {
            void* pData = LockResource(hMem);
            if (pData)
            {
                DWORD size = SizeofResource(hInst, hRes);
                PlaySound((LPCTSTR)pData, hInst, SND_MEMORY | SND_ASYNC | SND_NODEFAULT);
            }
            FreeResource(hMem);
        }
    }
}

