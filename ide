// main.cpp

#include <windows.h>
#include <gdiplus.h>
#include <wininet.h>
#include <string>
#include <vector>
#include <chrono>
#include <iomanip>
#include <sstream>
#include <locale>
#include <codecvt>
#include <windowsx.h>
#include <mmsystem.h> // For PlaySound
#include <CommCtrl.h> // For common controls
#include <richedit.h> // For rich edit controls
#include "resource.h" // Ensure you have this header for resource IDs
#include <map>
#include <functional>
#include <cstdlib>

#pragma comment(lib, "Gdiplus.lib")
#pragma comment(lib, "Wininet.lib")
#pragma comment(lib, "Comctl32.lib")
#pragma comment(lib, "Msimg32.lib")
#pragma comment(lib, "Imm32.lib")
#pragma comment(lib, "Winmm.lib")

using namespace Gdiplus;

// Global variables
HINSTANCE hInst;
LPCWSTR szWindowClass = L"MainWindowClass";
LPCWSTR szTitle = L"Simple IDE";

// Forward declarations
LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
void InitializeGDIPlus();
void ShutdownGDIPlus();
std::wstring ProcessCode(const std::wstring& code);
void ApplySyntaxHighlighting(HWND hCodeEditor);

// Interpreter Structures and Globals
enum class ValueType {
    NUMBER,
    STRING
};

struct Value {
    ValueType type;
    double numberValue;
    std::wstring stringValue;

    Value() : type(ValueType::NUMBER), numberValue(0) {}
    Value(double num) : type(ValueType::NUMBER), numberValue(num) {}
    Value(std::wstring str) : type(ValueType::STRING), stringValue(str) {}
};

std::map<std::wstring, Value> variables;
std::wstringstream outputStream;
typedef Value(*FunctionPtr)(const std::vector<Value>&);
std::map<std::wstring, FunctionPtr> functions;

double toNumber(const Value& val)
{
    if (val.type == ValueType::NUMBER)
        return val.numberValue;
    return 0;
}

void printFunction(const std::vector<Value>& args)
{
    for (const auto& arg : args)
    {
        if (arg.type == ValueType::NUMBER)
            outputStream << arg.numberValue << L" ";
        else if (arg.type == ValueType::STRING)
            outputStream << arg.stringValue << L" ";
    }
    outputStream << L"\n";
}

void InitializeFunctions()
{
    functions[L"print"] = [](const std::vector<Value>& args) -> Value {
        printFunction(args);
        return Value();
    };
}

int APIENTRY wWinMain(_In_ HINSTANCE hInstance,
                     _In_opt_ HINSTANCE hPrevInstance,
                     _In_ LPWSTR    lpCmdLine,
                     _In_ int       nCmdShow)
{
    hInst = hInstance;
    // Initialize GDI+
    InitializeGDIPlus();

    // Register the window class
    WNDCLASSEX wcex;
    ZeroMemory(&wcex, sizeof(WNDCLASSEX));

    wcex.cbSize = sizeof(WNDCLASSEX);
    wcex.style          = CS_HREDRAW | CS_VREDRAW;
    wcex.lpfnWndProc    = WndProc;
    wcex.cbClsExtra     = 0;
    wcex.cbWndExtra     = 0;
    wcex.hInstance      = hInstance;
    wcex.hIcon          = LoadIcon(NULL, IDI_APPLICATION);
    wcex.hCursor        = LoadCursor(NULL, IDC_ARROW);
    wcex.hbrBackground  = (HBRUSH)(COLOR_WINDOW+1);
    wcex.lpszMenuName   = NULL; // You can add menu resource here
    wcex.lpszClassName  = szWindowClass;
    wcex.hIconSm        = LoadIcon(NULL, IDI_APPLICATION);

    if (!RegisterClassEx(&wcex))
    {
        MessageBox(NULL,
            L"Call to RegisterClassEx failed!",
            szTitle,
            NULL);

        ShutdownGDIPlus();
        return 1;
    }

    // Create the window
    HWND hWnd = CreateWindow(
        szWindowClass,
        szTitle,
        WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, CW_USEDEFAULT,
        720, 600,
        NULL,
        NULL,
        hInstance,
        NULL
    );

    if (!hWnd)
    {
        MessageBox(NULL,
            L"Call to CreateWindow failed!",
            szTitle,
            NULL);

        ShutdownGDIPlus();
        return 1;
    }

    // Show the window
    ShowWindow(hWnd, nCmdShow);
    UpdateWindow(hWnd);

    // Main message loop
    MSG msg;
    while (GetMessage(&msg, NULL, 0, 0))
    {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    // Shutdown GDI+
    ShutdownGDIPlus();

    return (int) msg.wParam;
}

void InitializeGDIPlus()
{
    GdiplusStartupInput gdiplusStartupInput;
    GdiplusStartup(&gdiplusToken, &gdiplusStartupInput, NULL);
}

void ShutdownGDIPlus()
{
    GdiplusShutdown(gdiplusToken);
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    static HWND hCodeEditor, hOutputWindow, hBuildButton;

    switch (message)
    {
    case WM_CREATE:
        {
            // Initialize common controls
            INITCOMMONCONTROLSEX icex;
            icex.dwSize = sizeof(INITCOMMONCONTROLSEX);
            icex.dwICC = ICC_WIN95_CLASSES;
            InitCommonControlsEx(&icex);

            // Initialize Rich Edit control
            if (!LoadLibrary(L"Msftedit.dll"))
            {
                MessageBox(hWnd, L"Failed to load RichEdit library.", szTitle, MB_OK | MB_ICONERROR);
            }

            // Create Code Editor
            hCodeEditor = CreateWindowEx(0, MSFTEDIT_CLASS, L"// Write your code here...",
                WS_CHILD | WS_VISIBLE | WS_BORDER | ES_MULTILINE | ES_AUTOVSCROLL | ES_AUTOHSCROLL | WS_VSCROLL,
                10, 10, 560, 400,
                hWnd, (HMENU)IDC_CODE_EDITOR, hInst, NULL);

            // Create Output Window
            hOutputWindow = CreateWindowEx(0, MSFTEDIT_CLASS, L"// Output...",
                WS_CHILD | WS_VISIBLE | WS_BORDER | ES_MULTILINE | ES_READONLY | WS_VSCROLL,
                10, 420, 560, 150,
                hWnd, (HMENU)IDC_OUTPUT_WINDOW, hInst, NULL);

            // Create Build Button
            hBuildButton = CreateWindow(L"BUTTON", L"Build",
                WS_TABSTOP | WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON,
                580, 10, 100, 30,
                hWnd, (HMENU)IDC_BUILD_BUTTON, hInst, NULL);

            // Optionally, set font for better appearance
            HFONT hFont = CreateFont(
                16,                        // Height
                0,                         // Width
                0,                         // Escapement
                0,                         // Orientation
                FW_NORMAL,                 // Weight
                FALSE,                     // Italic
                FALSE,                     // Underline
                FALSE,                     // Strikeout
                DEFAULT_CHARSET,           // Charset
                OUT_DEFAULT_PRECIS,        // OutPrecision
                CLIP_DEFAULT_PRECIS,       // ClipPrecision
                DEFAULT_QUALITY,           // Quality
                DEFAULT_PITCH | FF_SWISS,  // PitchAndFamily
                L"Consolas");              // Typeface

            SendMessage(hCodeEditor, WM_SETFONT, (WPARAM)hFont, TRUE);
            SendMessage(hOutputWindow, WM_SETFONT, (WPARAM)hFont, TRUE);
        }
        break;
    case WM_COMMAND:
        {
            int wmId = LOWORD(wParam);
            // Разобрать выбор согласно меню или controls:
            switch (wmId)
            {
            case IDM_ABOUT:
                // Обработать команду "О программе"
                MessageBox(hWnd, L"Simple IDE v1.0", L"About", MB_OK);
                break;
            case IDM_EXIT:
                DestroyWindow(hWnd);
                break;
            case IDC_BUILD_BUTTON:
                {
                    // Get code from Code Editor
                    int length = GetWindowTextLength(hCodeEditor);
                    std::wstring code(length, L'\0');
                    GetWindowText(hCodeEditor, &code[0], length + 1);

                    // Process the code (parse and execute)
                    std::wstring output = ProcessCode(code);

                    // Set output to Output Window
                    SetWindowText(hOutputWindow, output.c_str());

                    // Apply syntax highlighting
                    ApplySyntaxHighlighting(hCodeEditor);
                }
                break;
            default:
                return DefWindowProc(hWnd, message, wParam, lParam);
            }
        }
        break;
    case WM_PAINT:
        {
            PAINTSTRUCT ps;
            HDC hdc = BeginPaint(hWnd, &ps);

            // Example of drawing text using GDI+
            Graphics graphics(hdc);
            FontFamily fontFamily(L"Arial");
            Font font(&fontFamily, 24, FontStyleBold, UnitPixel);
            SolidBrush brush(Color(255, 0, 0, 255));

            graphics.DrawString(L"Welcome to Simple IDE",
                -1,
                &font,
                PointF(580.0f, 60.0f),
                &brush);

            EndPaint(hWnd, &ps);
        }
        break;
    case WM_DESTROY:
        PostQuitMessage(0);
        break;
    default:
        return DefWindowProc(hWnd, message, wParam, lParam);
        break;
    }

    return 0;
}

// Interpreter Implementation
std::wstring ProcessCode(const std::wstring& code)
{
    variables.clear();
    outputStream.str(L"");
    InitializeFunctions();

    std::wistringstream iss(code);
    std::wstring line;
    int lineNumber = 0;

    // Simple stack for control flow
    std::vector<std::wstring> controlStack;

    while (std::getline(iss, line))
    {
        lineNumber++;
        // Trim whitespace
        size_t start = line.find_first_not_of(L" \t");
        if (start == std::wstring::npos) continue; // Empty line
        line = line.substr(start);

        // Handle comments
        if (line.substr(0, 2) == L"//") continue;

        // Tokenize the line
        std::wistringstream lineStream(line);
        std::wstring token;
        lineStream >> token;

        if (token == L"let")
        {
            // Variable declaration: let varName = expression
            std::wstring varName;
            lineStream >> varName;
            lineStream >> token; // Should be '='
            if (token != L"=")
            {
                outputStream << L"Syntax error at line " << lineNumber << L": Expected '='\n";
                continue;
            }

            // Read the expression (for simplicity, assume it's a number or a variable)
            std::wstring expr;
            lineStream >> expr;
            Value val;
            try
            {
                double num = std::stod(expr);
                val = Value(num);
            }
            catch (...)
            {
                // It's a variable
                if (variables.find(expr) != variables.end())
                {
                    val = variables[expr];
                }
                else
                {
                    outputStream << L"Undefined variable '" << expr << L"' at line " << lineNumber << L"\n";
                    continue;
                }
            }

            variables[varName] = val;
        }
        else if (token == L"function")
        {
            // Function declaration
            std::wstring funcName;
            lineStream >> funcName;
            // Skip to 'begin'
            while (lineStream >> token && token != L"begin");
            if (token != L"begin")
            {
                outputStream << L"Syntax error at line " << lineNumber << L": Expected 'begin'\n";
                continue;
            }
            controlStack.push_back(L"function");
            // For simplicity, assume function body is empty or predefined
        }
        else if (token == L"endfunction")
        {
            if (controlStack.empty() || controlStack.back() != L"function")
            {
                outputStream << L"Syntax error at line " << lineNumber << L": Unexpected 'endfunction'\n";
                continue;
            }
            controlStack.pop_back();
        }
        else if (token == L"if")
        {
            // If statement: if var1 < var2 then
            std::wstring left, op, right, thenToken;
            lineStream >> left >> op >> right >> thenToken;
            if (thenToken != L"then")
            {
                outputStream << L"Syntax error at line " << lineNumber << L": Expected 'then'\n";
                continue;
            }

            bool condition = false;
            // Evaluate condition (very basic)
            if (variables.find(left) != variables.end() && variables.find(right) != variables.end())
            {
                double leftVal = toNumber(variables[left]);
                double rightVal = toNumber(variables[right]);
                if (op == L"<")
                    condition = (leftVal < rightVal);
                else if (op == L">")
                    condition = (leftVal > rightVal);
                else if (op == L"==")
                    condition = (leftVal == rightVal);
                // Add more operators as needed
            }

            // For simplicity, skip lines until 'endif' if condition is false
            if (!condition)
            {
                while (std::getline(iss, line))
                {
                    lineNumber++;
                    size_t pos = line.find(L"endif");
                    if (pos != std::wstring::npos)
                        break;
                }
            }
        }
        else if (token == L"else")
        {
            // Similarly, handle else by skipping or executing
            // Placeholder: do nothing
        }
        else if (token == L"endif")
        {
            // End of if statement
        }
        else if (token == L"repeat")
        {
            // Placeholder for loop handling
            // Implementing loops requires maintaining loop state
        }
        else if (token == L"until")
        {
            // Placeholder for loop termination condition
        }
        else if (token == L"print")
        {
            // Handle print statement
            std::vector<Value> args;
            std::wstring arg;
            while (lineStream >> arg)
            {
                // If arg starts with a quote, it's a string
                if (!arg.empty() && arg.front() == L'\"')
                {
                    // Read until the closing quote
                    std::wstring str = arg.substr(1);
                    while (!str.empty() && str.back() != L'\"' && lineStream >> arg)
                    {
                        str += L" " + arg;
                    }
                    if (!str.empty() && str.back() == L'\"')
                        str.pop_back();
                    args.emplace_back(str);
                }
                else
                {
                    // It's a variable or a number
                    try
                    {
                        double num = std::stod(arg);
                        args.emplace_back(num);
                    }
                    catch (...)
                    {
                        if (variables.find(arg) != variables.end())
                        {
                            args.emplace_back(variables[arg]);
                        }
                        else
                        {
                            outputStream << L"Undefined variable '" << arg << L"' at line " << lineNumber << L"\n";
                        }
                    }
                }
            }

            if (functions.find(L"print") != functions.end())
            {
                functions[L"print"](args);
            }
        }
        else
        {
            // Handle other statements or function calls
            // Placeholder: ignore or implement function calls
        }
    }

    return outputStream.str();
}

void ApplySyntaxHighlighting(HWND hCodeEditor)
{
    // Define keywords
    std::vector<std::wstring> keywords = { 
        L"let", L"function", L"begin", L"endfunction", 
        L"if", L"then", L"else", L"endif", 
        L"repeat", L"until", L"print" 
    };

    // Get the entire text
    int length = GetWindowTextLength(hCodeEditor);
    std::wstring content(length, L'\0');
    GetWindowText(hCodeEditor, &content[0], length + 1);

    // Set default character format
    CHARFORMAT2 cf;
    ZeroMemory(&cf, sizeof(CHARFORMAT2));
    cf.cbSize = sizeof(CHARFORMAT2);
    cf.dwMask = CFM_COLOR;
    cf.crTextColor = RGB(0, 0, 0); // Black
    SendMessage(hCodeEditor, EM_SETCHARFORMAT, SCF_ALL, (LPARAM)&cf);

    // Highlight keywords
    for (const auto& keyword : keywords)
    {
        size_t pos = 0;
        while ((pos = content.find(keyword, pos)) != std::wstring::npos)
        {
            // Check word boundaries
            bool startBoundary = (pos == 0) || !iswalpha(content[pos - 1]);
            bool endBoundary = ((pos + keyword.length()) >= content.length()) || !iswalpha(content[pos + keyword.length()]);
            if (startBoundary && endBoundary)
            {
                // Select the keyword
                CHARRANGE cr;
                cr.cpMin = pos;
                cr.cpMax = pos + keyword.length();
                SendMessage(hCodeEditor, EM_EXSETSEL, 0, (LPARAM)&cr);

                // Set the keyword color
                CHARFORMAT2 cfKeyword;
                ZeroMemory(&cfKeyword, sizeof(CHARFORMAT2));
                cfKeyword.cbSize = sizeof(CHARFORMAT2);
                cfKeyword.dwMask = CFM_COLOR;
                cfKeyword.crTextColor = RGB(0, 0, 255); // Blue
                SendMessage(hCodeEditor, EM_SETCHARFORMAT, SCF_SELECTION, (LPARAM)&cfKeyword);
            }
            pos += keyword.length();
        }
    }
}
