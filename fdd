#include <windows.h>
#include <gdiplus.h>
#include <wininet.h>
#include <string>
#include <vector>
#include <chrono>
#include <iomanip>
#include <sstream>
#include <locale>
#include <codecvt>

#pragma comment(lib, "gdiplus.lib")
#pragma comment(lib, "wininet.lib")

using namespace Gdiplus;

// Глобальные переменные для изображений
Image* backgroundImage = nullptr;
Image* startImage = nullptr;
Image* myComputerImage = nullptr;
Image* recycleBinImage = nullptr;

// Высота панели задач в пикселях
const int TASKBAR_HEIGHT = 60;

// Массив языков
std::vector<std::wstring> languages = { L"РУС", L"ENG" };
int currentLanguageIndex = 0; // Индекс текущего языка

// Функция для загрузки изображения из URL
bool LoadImageFromURL(const std::wstring& url, Image** imagePtr) {
    HINTERNET hInternet = InternetOpen(L"ImageLoader", INTERNET_OPEN_TYPE_DIRECT, NULL, NULL, 0);
    if (!hInternet) {
        OutputDebugString(L"InternetOpen failed\n");
        return false;
    }

    // Флаги для открытия URL: кэш отключен и чтение данных по мере загрузки
    HINTERNET hConnect = InternetOpenUrl(hInternet, url.c_str(), NULL, 0, INTERNET_FLAG_RELOAD | INTERNET_FLAG_DONT_CACHE, 0);
    if (!hConnect) {
        OutputDebugString(L"InternetOpenUrl failed\n");
        InternetCloseHandle(hInternet);
        return false;
    }

    // Чтение всех данных
    std::vector<BYTE> buffer;
    DWORD bytesAvailable = 0;
    DWORD bytesRead = 0;
    BYTE tempBuffer[4096];
    while (InternetQueryDataAvailable(hConnect, &bytesAvailable, 0, 0) && bytesAvailable > 0) {
        DWORD toRead = min(bytesAvailable, (DWORD)sizeof(tempBuffer));
        if (InternetReadFile(hConnect, tempBuffer, toRead, &bytesRead) && bytesRead > 0) {
            buffer.insert(buffer.end(), tempBuffer, tempBuffer + bytesRead);
        } else {
            break;
        }
    }

    InternetCloseHandle(hConnect);
    InternetCloseHandle(hInternet);

    if (buffer.empty()) {
        OutputDebugString(L"No data downloaded from URL\n");
        return false;
    }

    // Создание потока из буфера
    IStream* stream = nullptr;
    if (FAILED(CreateStreamOnHGlobal(NULL, TRUE, &stream))) {
        OutputDebugString(L"CreateStreamOnHGlobal failed\n");
        return false;
    }

    ULONG written;
    if (FAILED(stream->Write(buffer.data(), buffer.size(), &written)) || written != buffer.size()) {
        OutputDebugString(L"Stream write failed\n");
        stream->Release();
        return false;
    }

    LARGE_INTEGER liZero = {};
    stream->Seek(liZero, STREAM_SEEK_SET, NULL);

    // Загрузка изображения из потока
    *imagePtr = new Image(stream);
    stream->Release();

    // Проверка статуса загрузки изображения
    if ((*imagePtr)->GetLastStatus() != Ok) {
        OutputDebugString(L"Failed to create Image from stream\n");
        delete *imagePtr;
        *imagePtr = nullptr;
        return false;
    }

    OutputDebugString(L"Image loaded successfully\n");
    return *imagePtr != nullptr;
}

// Функция для получения текущего времени в строковом формате
std::wstring GetCurrentTimeString() {
    using namespace std::chrono;
    auto now = system_clock::now();
    std::time_t now_c = system_clock::to_time_t(now);
    std::tm parts;

    // Используем localtime_s вместо localtime для потокобезопасности
    localtime_s(&parts, &now_c);

    std::wstringstream ss;
    ss << std::put_time(&parts, L"%H:%M"); // Формат времени HH:MM
    return ss.str();
}

LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
    switch (uMsg) {
        case WM_DESTROY:
            // Удаление всех загруженных изображений
            delete backgroundImage;
            delete startImage;
            delete myComputerImage;
            delete recycleBinImage;
            PostQuitMessage(0);
            return 0;

        case WM_KEYDOWN:
            // Проверяем нажатие клавиши Esc
            if (wParam == VK_ESCAPE) {
                DestroyWindow(hwnd); // Закрыть окно
            }

            // Обработка переключения языка на Alt+Shift или Win+Space
            if (((GetAsyncKeyState(VK_MENU) & 0x8000) && wParam == VK_SHIFT) ||
                ((GetAsyncKeyState(VK_LWIN) & 0x8000) && wParam == VK_SPACE)) {
                currentLanguageIndex = (currentLanguageIndex + 1) % languages.size(); // Переключаем язык
                InvalidateRect(hwnd, NULL, TRUE); // Перерисовываем окно
            }
            return 0;

        case WM_SIZE: {
            InvalidateRect(hwnd, NULL, TRUE); // Перерисовываем окно при изменении размера
            return 0;
        }

        case WM_PAINT: {
            PAINTSTRUCT ps;
            HDC hdc = BeginPaint(hwnd, &ps);
            Graphics graphics(hdc);

            // Установка высококачественных настроек рендеринга
            graphics.SetSmoothingMode(SmoothingModeHighQuality);
            graphics.SetInterpolationMode(InterpolationModeHighQualityBicubic);
            graphics.SetPixelOffsetMode(PixelOffsetModeHighQuality);

            // Получаем размеры окна
            RECT windowRect;
            GetClientRect(hwnd, &windowRect);
            int width = windowRect.right - windowRect.left;
            int height = windowRect.bottom - windowRect.top;

            // Рисуем фоновое изображение с сохранением пропорций
            if (backgroundImage) {
                UINT imgWidth = backgroundImage->GetWidth();
                UINT imgHeight = backgroundImage->GetHeight();

                double windowAspect = static_cast<double>(width) / height;
                double imageAspect = static_cast<double>(imgWidth) / imgHeight;

                double drawWidth, drawHeight;
                if (windowAspect > imageAspect) {
                    // Окно шире изображения
                    drawHeight = height;
                    drawWidth = imageAspect * drawHeight;
                }
                else {
                    // Окно уже или равно изображению
                    drawWidth = width;
                    drawHeight = drawWidth / imageAspect;
                }

                float x = static_cast<float>((width - drawWidth) / 2.0);
                float y = static_cast<float>((height - drawHeight) / 2.0);
                graphics.DrawImage(backgroundImage, x, y, static_cast<REAL>(drawWidth), static_cast<REAL>(drawHeight));
            }

            // Рисуем панель задач
            RectF taskbarRect(0, static_cast<REAL>(height - TASKBAR_HEIGHT), static_cast<REAL>(width), static_cast<REAL>(TASKBAR_HEIGHT));
            SolidBrush taskbarBrush(Color(220, 220, 220)); // Светло-серый цвет панели задач
            graphics.FillRectangle(&taskbarBrush, taskbarRect);

            // Размер иконок панели задач
            const int ICON_SIZE = 40;
            const int ICON_PADDING = 10;

            // Рисуем иконку "Пуск"
            if (startImage) {
                graphics.DrawImage(startImage, ICON_PADDING, height - TASKBAR_HEIGHT + (TASKBAR_HEIGHT - ICON_SIZE) / 2, ICON_SIZE, ICON_SIZE);
            }

            // Рисуем иконку "Мой компьютер"
            if (myComputerImage) {
                graphics.DrawImage(myComputerImage, ICON_PADDING + ICON_SIZE + ICON_PADDING, height - TASKBAR_HEIGHT + (TASKBAR_HEIGHT - ICON_SIZE) / 2, ICON_SIZE, ICON_SIZE);
            }

            // Рисуем иконку "Корзина"
            if (recycleBinImage) {
                graphics.DrawImage(recycleBinImage, ICON_PADDING + 2 * (ICON_SIZE + ICON_PADDING), height - TASKBAR_HEIGHT + (TASKBAR_HEIGHT - ICON_SIZE) / 2, ICON_SIZE, ICON_SIZE);
            }

            // Получаем текущее время и язык
            std::wstring timeString = GetCurrentTimeString();
            std::wstring langString = languages[currentLanguageIndex];

            // Подготовка текста для панели задач
            std::wstring taskbarText = L" Язык: " + langString;

            // Настройка шрифта и кисти для текста
            FontFamily fontFamily(L"Segoe UI");
            Font font(&fontFamily, 16, FontStyleRegular, UnitPixel);
            SolidBrush textBrush(Color(255, 0, 0, 0)); // Черный цвет текста

            // Форматирование текста
            StringFormat format;
            format.SetAlignment(StringAlignmentFar); // Выровнять по правому краю
            format.SetLineAlignment(StringAlignmentCenter); // Центрировать по вертикали

            // Создаем общий текст, объединяя время и язык
            std::wstring combinedText = timeString + L"   " + taskbarText;

            // Рисуем текст на панели задач
            graphics.DrawString(combinedText.c_str(), -1, &font, RectF(0, height - TASKBAR_HEIGHT, static_cast<REAL>(width), static_cast<REAL>(TASKBAR_HEIGHT)), &format, &textBrush);

            EndPaint(hwnd, &ps);
            return 0;
        }

        default:
            return DefWindowProc(hwnd, uMsg, wParam, lParam);
    }
}

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE, LPSTR, int nCmdShow) {
    const wchar_t CLASS_NAME[] = L"FullscreenWindowClass";

    // Инициализация GDI+
    GdiplusStartupInput gdiplusStartupInput;
    ULONG_PTR gdiplusToken;
    if (GdiplusStartup(&gdiplusToken, &gdiplusStartupInput, NULL) != Ok) {
        MessageBox(NULL, L"Failed to initialize GDI+", L"Error", MB_OK);
        return 0;
    }

    // Определяем класс окна
    WNDCLASS wc = {};
    wc.lpfnWndProc = WindowProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = CLASS_NAME;
    wc.hCursor = LoadCursor(NULL, IDC_ARROW);
    wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);

    if (!RegisterClass(&wc)) {
        MessageBox(NULL, L"Failed to register window class", L"Error", MB_OK);
        GdiplusShutdown(gdiplusToken);
        return 0;
    }

    // Получаем размеры экрана
    int screenWidth = GetSystemMetrics(SM_CXSCREEN);
    int screenHeight = GetSystemMetrics(SM_CYSCREEN);

    // Создаем окно
    HWND hwnd = CreateWindowEx(
        WS_EX_TOPMOST, // Окно всегда поверх остальных
        CLASS_NAME,
        L"Fullscreen Window",
        WS_POPUP, // Убираем рамку окна
        0, 0, screenWidth, screenHeight, // Положение и размер окна
        NULL,
        NULL,
        hInstance,
        NULL
    );

    if (hwnd == NULL) {
        MessageBox(NULL, L"Failed to create window", L"Error", MB_OK);
        GdiplusShutdown(gdiplusToken);
        return 0;
    }

    // Загружаем фоновое изображение из URL
    std::wstring backgroundUrl = L"https://i.pinimg.com/originals/f0/c7/8c/f0c78cc56f1909dece1c062020e7c8a5.png"; // Замените на нужный URL
    if (!LoadImageFromURL(backgroundUrl, &backgroundImage)) {
        MessageBox(hwnd, L"Не удалось загрузить фоновое изображение. Приложение будет закрыто.", L"Ошибка", MB_ICONERROR);
        DestroyWindow(hwnd);
        GdiplusShutdown(gdiplusToken);
        return 0;
    }

    // Загружаем иконку "Пуск" из URL
    std::wstring startButtonUrl = L"https://icons.iconarchive.com/icons/icons-land/windows-8/512/Start-icon.png"; // Замените на нужный URL
    if (!LoadImageFromURL(startButtonUrl, &startImage)) {
        MessageBox(hwnd, L"Не удалось загрузить иконку 'Пуск'. Приложение будет закрыто.", L"Ошибка", MB_ICONERROR);
        DestroyWindow(hwnd);
        GdiplusShutdown(gdiplusToken);
        return 0;
    }

    // Загружаем иконку "Мой компьютер" из URL
    std::wstring myComputerUrl = L"https://icons.iconarchive.com/icons/custom-icon-design/flatastic-2/256/My-Computer-icon.png"; // Замените на нужный URL
    if (!LoadImageFromURL(myComputerUrl, &myComputerImage)) {
        MessageBox(hwnd, L"Не удалось загрузить иконку 'Мой компьютер'. Приложение будет закрыто.", L"Ошибка", MB_ICONERROR);
        DestroyWindow(hwnd);
        GdiplusShutdown(gdiplusToken);
        return 0;
    }

    // Загружаем иконку "Корзина" из URL
    std::wstring recycleBinUrl = L"https://icons.iconarchive.com/icons/custom-icon-design/flatastic-4/256/Recycle-Bin-icon.png"; // Замените на нужный URL
    if (!LoadImageFromURL(recycleBinUrl, &recycleBinImage)) {
        MessageBox(hwnd, L"Не удалось загрузить иконку 'Корзина'. Приложение будет закрыто.", L"Ошибка", MB_ICONERROR);
        DestroyWindow(hwnd);
        GdiplusShutdown(gdiplusToken);
        return 0;
    }

    ShowWindow(hwnd, nCmdShow);
    UpdateWindow(hwnd);

    // Цикл обработки сообщений
    MSG msg = {};
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    // Очистка GDI+
    GdiplusShutdown(gdiplusToken);
    return 0;
}
