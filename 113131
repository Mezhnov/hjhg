// Замените весь ваш текущий код на следующий:

#include <windows.h>
#include <gdiplus.h>
#include <urlmon.h>
#include <shlwapi.h>
#include <string>
#include <ctime>
#include <vector>
#include <windowsx.h>
#include <cstdlib>

#pragma comment(lib, "gdiplus.lib")
#pragma comment(lib, "urlmon.lib")
#pragma comment(lib, "shlwapi.lib")

using namespace Gdiplus;

// Структура для хранения информации о приложении
struct AppInfo {
    Bitmap* image;
    std::wstring name;
    std::wstring developer;
    double rating;
};

// Глобальные переменные
std::vector<AppInfo> g_apps;          // Список приложений
Bitmap* g_mainImage = nullptr;        // Фон

// Функция для загрузки изображения из URL
Bitmap* LoadImageFromURL(const wchar_t* url) {
    // Получаем временный путь
    wchar_t tempPath[MAX_PATH];
    if (!GetTempPath(MAX_PATH, tempPath)) {
        return nullptr;
    }

    // Создаём временный файл
    wchar_t tempFile[MAX_PATH];
    if (!GetTempFileName(tempPath, L"IMG", 0, tempFile)) {
        return nullptr;
    }

    // Загружаем изображение в временный файл
    HRESULT hr = URLDownloadToFile(NULL, url, tempFile, 0, NULL);
    if (FAILED(hr)) {
        DeleteFile(tempFile);
        return nullptr;
    }

    // Загружаем изображение с помощью GDI+
    Bitmap* bmp = Bitmap::FromFile(tempFile);
    if (bmp && bmp->GetLastStatus() != Ok) {
        delete bmp;
        bmp = nullptr;
    }

    // Удаляем временный файл
    DeleteFile(tempFile);

    return bmp;
}

// Функция для конвертации миллиметров в пиксели
int mmToPixels(float mm, int dpi) {
    return static_cast<int>(mm * dpi / 25.4f);
}

// Обработка сообщений окна
LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
    switch (uMsg) {
    case WM_DESTROY:
        PostQuitMessage(0);
        return 0;

    case WM_PAINT: {
        PAINTSTRUCT ps;
        HDC hdc = BeginPaint(hwnd, &ps);

        // Инициализируем GDI+
        Graphics graphics(hdc);
        graphics.SetSmoothingMode(SmoothingModeAntiAlias);
        graphics.SetTextRenderingHint(TextRenderingHintClearTypeGridFit);

        // Получаем размер клиентской области
        RECT rect;
        GetClientRect(hwnd, &rect);
        int windowWidth = rect.right - rect.left;
        int windowHeight = rect.bottom - rect.top;

        // Рисуем фон
        if (g_mainImage) {
            graphics.DrawImage(g_mainImage, 0, 0, windowWidth, windowHeight);
        } else {
            // Если фон не загружен, закрашиваем белым цветом
            SolidBrush whiteBrush(Color(255, 255, 255, 255));
            graphics.FillRectangle(&whiteBrush, 0, 0, windowWidth, windowHeight);
        }

        // Получаем DPI экрана
        HDC screen = GetDC(hwnd);
        int dpiX = GetDeviceCaps(screen, LOGPIXELSX);
        int dpiY = GetDeviceCaps(screen, LOGPIXELSY);
        ReleaseDC(hwnd, screen);

        // Размеры для элементов интерфейса
        int margin = mmToPixels(5.0f, dpiX);
        int appImageSize = mmToPixels(30.0f, dpiX); // Размер иконки приложения
        int spacingY = mmToPixels(5.0f, dpiY);      // Вертикальный отступ между приложениями

        // Начальная позиция для списка приложений
        int startY = margin;

        // Шрифт для названия приложения
        FontFamily fontFamily(L"Segoe UI");
        Font appNameFont(&fontFamily, 12.0f, FontStyleBold, UnitPixel);
        Font developerFont(&fontFamily, 10.0f, FontStyleRegular, UnitPixel);
        SolidBrush textBrush(Color(255, 0, 0, 0)); // Чёрный цвет текста

        // Рисуем список приложений
        for (const auto& app : g_apps) {
            int x = margin;
            int y = startY;

            // Рисуем иконку приложения
            if (app.image) {
                graphics.DrawImage(app.image, x, y, appImageSize, appImageSize);
            }

            // Позиция для текста
            int textX = x + appImageSize + margin;
            int textY = y;

            // Рисуем название приложения
            RectF nameRect(static_cast<float>(textX), static_cast<float>(textY), static_cast<float>(windowWidth - textX - margin), static_cast<float>(appImageSize / 2));
            graphics.DrawString(app.name.c_str(), -1, &appNameFont, nameRect, nullptr, &textBrush);

            // Рисуем имя разработчика
            RectF devRect(static_cast<float>(textX), static_cast<float>(textY + appImageSize / 2), static_cast<float>(windowWidth - textX - margin), static_cast<float>(appImageSize / 2));
            graphics.DrawString(app.developer.c_str(), -1, &developerFont, devRect, nullptr, &textBrush);

            // Рисуем рейтинг (в виде звёздочек или цифры)
            std::wstring ratingStr = L"Рейтинг: " + std::to_wstring(app.rating);
            RectF ratingRect(static_cast<float>(textX), static_cast<float>(textY + appImageSize), static_cast<float>(windowWidth - textX - margin), static_cast<float>(appImageSize / 2));
            graphics.DrawString(ratingStr.c_str(), -1, &developerFont, ratingRect, nullptr, &textBrush);

            // Обновляем Y для следующего приложения
            startY += appImageSize + spacingY;
        }

        EndPaint(hwnd, &ps);
        return 0;
    }

    default:
        return DefWindowProc(hwnd, uMsg, wParam, lParam);
    }
}

// Главная функция
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE, LPSTR, int nCmdShow) {
    // Инициализируем GDI+
    GdiplusStartupInput gdiplusStartupInput;
    ULONG_PTR gdiplusToken;
    if (GdiplusStartup(&gdiplusToken, &gdiplusStartupInput, NULL) != Ok) {
        MessageBox(NULL, L"Не удалось инициализировать GDI+.", L"Ошибка", MB_ICONERROR);
        return 0;
    }

    // Загрузка фона (при желании можно указать URL фонового изображения, соответствующего дизайну Google Play)
    // В данном случае просто оставим фон белым или загрузим логотип Google Play
    // Например, можно использовать логотип Google Play:
    const wchar_t* mainImageURL = L"https://play-lh.googleusercontent.com/8B5Mjj6qaSfeLXPM6f9BtmbigGgQw8sgI-YI5dAnD6m9lZG0EBEi4Hm-NrGbtYO3PQ";
    g_mainImage = LoadImageFromURL(mainImageURL);

    // Список приложений
    // Здесь добавим несколько приложений с тестовыми данными
    auto AddApp = [](const wchar_t* imageURL, const std::wstring& name, const std::wstring& developer, double rating) {
        Bitmap* image = LoadImageFromURL(imageURL);
        if (!image) {
            // Если не удалось загрузить изображение, можно установить изображение по умолчанию или пропустить
            return;
        }
        AppInfo app;
        app.image = image;
        app.name = name;
        app.developer = developer;
        app.rating = rating;
        g_apps.push_back(app);
    };

    // Примеры приложений (используйте реальные URL иконок приложений)
    AddApp(L"https://cdn-icons-png.flaticon.com/512/732/732200.png", L"Gmail", L"Google LLC", 4.5);
    AddApp(L"https://cdn-icons-png.flaticon.com/512/174/174855.png", L"Facebook", L"Meta Platforms, Inc.", 4.2);
    AddApp(L"https://cdn-icons-png.flaticon.com/512/733/733585.png", L"Twitter", L"Twitter, Inc.", 4.3);
    AddApp(L"https://cdn-icons-png.flaticon.com/512/1384/1384060.png", L"Instagram", L"Instagram", 4.4);
    AddApp(L"https://cdn-icons-png.flaticon.com/512/919/919851.png", L"Spotify", L"Spotify Ltd.", 4.6);

    // Параметры окна
    const wchar_t CLASS_NAME[] = L"GooglePlayWindowClass";

    // Регистрация класса окна
    WNDCLASS wc = {};
    wc.lpfnWndProc = WindowProc;
    wc.hInstance = hInstance;
    wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
    wc.lpszClassName = CLASS_NAME;

    RegisterClass(&wc);

    // Получаем размер экрана
    int screenWidth = GetSystemMetrics(SM_CXSCREEN) / 2;
    int screenHeight = GetSystemMetrics(SM_CYSCREEN);

    // Создаём окно
    HWND hwnd = CreateWindowEx(
        0,
        CLASS_NAME,
        L"Магазин приложений",
        WS_OVERLAPPEDWINDOW,
        CW_USEDEFAULT, CW_USEDEFAULT, screenWidth, screenHeight,
        NULL,
        NULL,
        hInstance,
        NULL
    );

    if (hwnd == NULL) {
        if (g_mainImage) delete g_mainImage;
        for (auto& app : g_apps) {
            if (app.image) delete app.image;
        }
        GdiplusShutdown(gdiplusToken);
        return 0;
    }

    ShowWindow(hwnd, nCmdShow);

    // Цикл сообщений
    MSG msg = {};
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    // Освобождаем ресурсы
    if (g_mainImage) delete g_mainImage;
    for (auto& app : g_apps) {
        if (app.image) delete app.image;
    }

    GdiplusShutdown(gdiplusToken);

    return 0;
}
