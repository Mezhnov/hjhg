#include <windows.h>
#include <gdiplus.h>
#include <wininet.h>
#include <string>
#include <vector>
#include <chrono>
#include <iomanip>
#include <sstream>
#include <locale>
#include <codecvt>
#include <windowsx.h>
#include <mmsystem.h> // For PlaySound
#include <CommCtrl.h> // For common controls
#include <richedit.h> // For Rich Edit controls
#include "resource.h" // Ensure you have this header file for resource identifiers

#define IDR_WAVE1 101
#define IDR_WAVE2 102
#define IDR_WAVE3 103
#define IDR_WAVE4 104

#pragma comment(lib, "gdiplus.lib")
#pragma comment(lib, "wininet.lib")
#pragma comment(lib, "winmm.lib") // Link with winmm.lib for PlaySound
#pragma comment(lib, "comctl32.lib") // Link with comctl32.lib for common controls

using namespace Gdiplus;

// Structure to store image information
struct ImageItem {
    Image* image;
    std::wstring title;
    float x; // X coordinate on screen
    float y; // Y coordinate on screen
    float width; // Displayed image width
    float height; // Displayed image height
};

// Structure to hold data for Dock icons
struct DockIconItem {
    Image* image;
    float x;
    float y;
    float width;
    float height;
    float baseSize; // Base icon size without magnification
};

// Global variables
Image* backgroundImage = nullptr;
Image* wifiIcon = nullptr;
Image* soundIcon = nullptr;
Image* batteryIcon = nullptr;
Image* mypassIcon = nullptr; // Start menu icon
Image* notification = nullptr;
Image* office = nullptr;
Image* newfolder = nullptr;
Image* search = nullptr;
Image* browser = nullptr;

// List of languages
std::vector<std::wstring> languages = { L"РУС", L"ENG" }; // Russian and English
int currentLanguageIndex = 0; // Current language index

// List of additional images
std::vector<ImageItem> images;

// Vector to hold Dock icons
std::vector<DockIconItem> dockIcons;

// Function to load image from URL
bool LoadImageFromURL(const std::wstring& url, Image*& outImage) {
    HINTERNET hInternet = InternetOpen(L"ImageLoader", INTERNET_OPEN_TYPE_DIRECT, NULL, NULL, 0);
    if (!hInternet) {
        OutputDebugString(L"InternetOpen failed\n");
        return false;
    }

    // Flags to open URL: no cache and read data as it loads
    HINTERNET hConnect = InternetOpenUrl(hInternet, url.c_str(), NULL, 0, INTERNET_FLAG_RELOAD | INTERNET_FLAG_DONT_CACHE, 0);
    if (!hConnect) {
        OutputDebugString(L"InternetOpenUrl failed\n");
        InternetCloseHandle(hInternet);
        return false;
    }

    // Read all data
    std::vector<BYTE> buffer;
    DWORD bytesAvailable = 0;
    DWORD bytesRead = 0;
    BYTE tempBuffer[4096];
    while (InternetQueryDataAvailable(hConnect, &bytesAvailable, 0, 0) && bytesAvailable > 0) {
        DWORD toRead = min(bytesAvailable, (DWORD)sizeof(tempBuffer));
        if (InternetReadFile(hConnect, tempBuffer, toRead, &bytesRead) && bytesRead > 0) {
            buffer.insert(buffer.end(), tempBuffer, tempBuffer + bytesRead);
        }
        else {
            break;
        }
    }

    InternetCloseHandle(hConnect);
    InternetCloseHandle(hInternet);

    if (buffer.empty()) {
        OutputDebugString(L"No data loaded from URL\n");
        return false;
    }

    // Create a stream from the buffer
    IStream* stream = nullptr;
    if (FAILED(CreateStreamOnHGlobal(NULL, TRUE, &stream))) {
        OutputDebugString(L"CreateStreamOnHGlobal failed\n");
        return false;
    }

    ULONG written;
    // Explicitly cast buffer.size() to ULONG
    if (FAILED(stream->Write(buffer.data(), static_cast<ULONG>(buffer.size()), &written)) || written != static_cast<ULONG>(buffer.size())) {
        OutputDebugString(L"Writing to stream failed\n");
        stream->Release();
        return false;
    }

    LARGE_INTEGER liZero = {};
    stream->Seek(liZero, STREAM_SEEK_SET, NULL);

    // Load the image from the stream
    Image* img = new Image(stream);
    stream->Release();

    // Check the status of the image loading
    if (img->GetLastStatus() != Ok) {
        OutputDebugString(L"Failed to create Image from stream\n");
        delete img;
        return false;
    }

    outImage = img;
    OutputDebugString(L"Image successfully loaded\n");
    return true;
}

// Function to get the current time as a string
std::wstring GetCurrentTimeString() {
    using namespace std::chrono;
    auto now = system_clock::now();
    std::time_t now_c = system_clock::to_time_t(now);
    std::tm parts;

    // Use localtime_s for thread safety
    localtime_s(&parts, &now_c);

    std::wstringstream ss;
    ss << std::put_time(&parts, L"%H:%M"); // Time format HH:MM
    return ss.str();
}

// Function to play sound
void PlaySoundByLanguage(const std::wstring& soundName) {
    // Define paths to sound files or use system sounds
    // For demonstration, we will use system sounds based on soundName
    // You can replace this with actual file paths or URLs

    if (currentLanguageIndex == 0) { // Russian
        if (soundName == L"WindowsLogo") {
            // Play system sound or specify custom path
            // Example: PlaySound(L"C:\\Sounds\\windows_logo.wav", NULL, SND_FILENAME | SND_ASYNC);
            PlaySound(MAKEINTRESOURCE(IDR_WAVE1), NULL, SND_RESOURCE | SND_ASYNC);
        }
        else if (soundName == L"WiFi") {
            PlaySound(MAKEINTRESOURCE(IDR_WAVE2), NULL, SND_RESOURCE | SND_ASYNC);
        }
        else if (soundName == L"BatteryCharging") {
            PlaySound(MAKEINTRESOURCE(IDR_WAVE3), NULL, SND_RESOURCE | SND_ASYNC);
        }
        else if (soundName == L"Triangle") {
            PlaySound(MAKEINTRESOURCE(IDR_WAVE4), NULL, SND_RESOURCE | SND_ASYNC);
        }
    }
    else { // English or other languages
        // Optionally, play different sounds or do not play sounds
    }
}

// Function to initialize additional images
bool InitializeImages() {
    // List of image URLs and corresponding titles
    std::vector<std::pair<std::wstring, std::wstring>> imageData = {
        { L"https://i.postimg.cc/4x8HknSh/nyc01-temp-32d4-T5s3-TEIMt1-R3qrjho.png", L"Новая папка" }, // New Folder
        { L"https://i.postimg.cc/0Q12Jw0R/fra01-temp-r-MINe9-WDa-DPi-KQl-Rb3p-F-processed.png", L"Этот компьютер" }, // This PC
        { L"https://i.postimg.cc/X7WMDrgp/Remove-bg-ai-1730624299550.png", L"Офис" },
        { L"https://i.postimg.cc/qgVxqq8N/Remove-bg-ai-1730637074101.png", L"Браузер" },
        // Add more images as needed
    };

    // Starting positions for images
    float startX = 50.0f;
    float startY = 150.0f; // Positioned below the announcement
    float spacing = 150.0f; // Spacing between images

    for (size_t i = 0; i < imageData.size(); ++i) {
        Image* img = nullptr;
        if (LoadImageFromURL(imageData[i].first, img)) {
            ImageItem item;
            item.image = img;
            item.title = imageData[i].second;
            item.x = startX + i * spacing; // X position with spacing
            item.y = startY; // Fixed Y position
            item.width = 100.0f; // Image width
            item.height = 100.0f; // Image height
            images.push_back(item);
        }
        else {
            OutputDebugString((L"Failed to load image: " + imageData[i].first + L"\n").c_str());
            return false;
        }
    }

    // Load icons: Wi-Fi, Sound, Battery, and Start menu
    struct IconData {
        Image** imagePtr;
        std::wstring url;
    };

    std::vector<IconData> iconsToLoad = {
        { &wifiIcon, L"https://upload.wikimedia.org/wikipedia/commons/thumb/7/74/Feather-core-wifi.svg/1200px-Feather-core-wifi.svg.png" },
        { &soundIcon, L"https://cdn-icons-png.flaticon.com/512/84/84922.png" },
        { &batteryIcon, L"https://i.postimg.cc/1RFQP7JK/Remove-bg-ai-1729799941732.png" },
        { &mypassIcon, L"https://i.postimg.cc/4NdmpG5m/fra01-temp-p5-FXAe-Zabapcdd-X5k-Pb0-R-1.png" }, // Start menu icon
        { &notification, L"https://i.postimg.cc/1X6FjCsV/Sun-Nov-03-2024-10-55-16-GM-3-0.png" },
        { &office, L"https://i.postimg.cc/X7WMDrgp/Remove-bg-ai-1730624299550.png" },
        { &newfolder, L"https://i.postimg.cc/rFLzwxB8/Remove-bg-ai-1730634421051.png" },
        { &search, L"https://cdn-icons-png.flaticon.com/512/73/73357.png" },
        { &browser, L"https://i.postimg.cc/qgVxqq8N/Remove-bg-ai-1730637074101.png" },

    };

    for (const auto& icon : iconsToLoad) {
        if (!LoadImageFromURL(icon.url, *(icon.imagePtr))) {
            OutputDebugString((L"Failed to load icon: " + icon.url + L"\n").c_str());
            return false;
        }
    }

    // Initialize Dock icons
    DockIconItem dockItem;

    // mypassIcon
    dockItem.image = mypassIcon;
    dockItem.baseSize = 48.0f;
    dockIcons.push_back(dockItem);

    // browser
    dockItem.image = browser;
    dockItem.baseSize = 48.0f;
    dockIcons.push_back(dockItem);

    // office
    dockItem.image = office;
    dockItem.baseSize = 48.0f;
    dockIcons.push_back(dockItem);

    // newfolder
    dockItem.image = newfolder;
    dockItem.baseSize = 48.0f;
    dockIcons.push_back(dockItem);

    return true;
}

// Structure to store window data
struct WindowData {
    bool isDragging = false;
    size_t draggingImageIndex = SIZE_MAX; // Invalid index initially
    POINT lastMousePos = { 0, 0 };

    // Editing state
    size_t editingImageIndex = SIZE_MAX; // Index of image being edited
    HWND editControl = NULL; // Handle to current edit control
    bool isCreatingFolder = false; // Flag for creating a folder

    // Mouse position for Dock magnification
    POINT mousePos = { -1, -1 }; // Initialize to invalid position
};

// Function to create context menu
void CreateContextMenu(HWND hwnd, int x, int y, size_t imageIndex, bool isOnImage) {
    HMENU hMenu = CreatePopupMenu();
    if (hMenu) {
        if (isOnImage && imageIndex < images.size()) {
            // Context menu for images
            AppendMenu(hMenu, MF_STRING, 1, L"Открыть");       // Open
            AppendMenu(hMenu, MF_STRING, 2, L"Переименовать"); // Rename
            AppendMenu(hMenu, MF_STRING, 3, L"Удалить");       // Delete
        }
        else {
            // Context menu for empty space
            AppendMenu(hMenu, MF_STRING, 4, L"Создать папку"); // Create Folder
        }

        // Set window to foreground for proper menu closure
        SetForegroundWindow(hwnd);

        // Track the popup menu
        int cmd = TrackPopupMenu(
            hMenu,
            TPM_RETURNCMD | TPM_TOPALIGN | TPM_LEFTALIGN,
            x,
            y,
            0,
            hwnd,
            NULL
        );

        // Handle menu selection
        if (isOnImage && imageIndex < images.size()) {
            if (cmd == 1) { // Open
                MessageBox(hwnd, (images[imageIndex].title + L" открыта.").c_str(), L"Открыть", MB_OK);
            }
            else if (cmd == 2) { // Rename
                // Initiate renaming by creating an Edit control
                WindowData* data = reinterpret_cast<WindowData*>(GetWindowLongPtr(hwnd, GWLP_USERDATA));
                if (data && data->editControl == NULL) {
                    data->editingImageIndex = imageIndex;

                    // Calculate position for the Edit control
                    float titleWidth = 100.0f; // Approximate width
                    Gdiplus::RectF titleRect;
                    HDC hdc = GetDC(hwnd);
                    Graphics graphics(hdc);
                    FontFamily fontFamily(L"Segoe UI");
                    Font font(&fontFamily, 16, FontStyleRegular, UnitPixel);
                    SolidBrush brush(Color(255, 255, 255, 255)); // White text color
                    graphics.MeasureString(images[imageIndex].title.c_str(), -1, &font, PointF(0, 0), &titleRect);
                    ReleaseDC(hwnd, hdc);

                    float editX = images[imageIndex].x;
                    float editY = images[imageIndex].y + images[imageIndex].height + 5.0f;
                    float editWidth = titleRect.Width + 10.0f; // Small padding
                    float editHeight = titleRect.Height + 5.0f;

                    HWND hwndEdit = CreateWindowEx(
                        0,
                        L"EDIT",
                        images[imageIndex].title.c_str(),
                        WS_CHILD | WS_VISIBLE | WS_BORDER | ES_AUTOHSCROLL,
                        static_cast<int>(editX),
                        static_cast<int>(editY),
                        static_cast<int>(editWidth),
                        static_cast<int>(editHeight),
                        hwnd,
                        NULL,
                        GetModuleHandle(NULL),
                        NULL
                    );

                    if (hwndEdit) {
                        data->editControl = hwndEdit;
                        // Set focus to the edit control
                        SetFocus(hwndEdit);
                    }
                }
            }
            else if (cmd == 3) { // Delete
                // Implement deletion if necessary
                MessageBox(hwnd, L"Функция удаления не реализована.", L"Удалить", MB_OK);
            }
        }
        else {
            if (cmd == 4) { // Create Folder
                // Initiate folder creation by adding a new ImageItem and creating an Edit control
                WindowData* data = reinterpret_cast<WindowData*>(GetWindowLongPtr(hwnd, GWLP_USERDATA));
                if (data && data->editControl == NULL) {
                    ImageItem newItem;
                    // You can set the URL of the folder icon or use a local resource
                    if (LoadImageFromURL(L"https://i.postimg.cc/4x8HknSh/nyc01-temp-32d4-T5s3-TEIMt1-R3qrjho.png", newItem.image)) {
                        newItem.title = L"Новая папка"; // Default name
                        // Position the new folder where the user right-clicked
                        newItem.x = static_cast<float>(x);
                        newItem.y = static_cast<float>(y);
                        newItem.width = 100.0f;
                        newItem.height = 100.0f;
                        images.push_back(newItem);
                        size_t newIndex = images.size() - 1;
                        data->editingImageIndex = newIndex;
                        data->isCreatingFolder = true;

                        // Create an Edit control for the new folder
                        HWND hwndEdit = CreateWindowEx(
                            0,
                            L"EDIT",
                            newItem.title.c_str(),
                            WS_CHILD | WS_VISIBLE | WS_BORDER | ES_AUTOHSCROLL,
                            static_cast<int>(newItem.x),
                            static_cast<int>(newItem.y + newItem.height + 5.0f),
                            100,
                            25,
                            hwnd,
                            NULL,
                            GetModuleHandle(NULL),
                            NULL
                        );

                        if (hwndEdit) {
                            data->editControl = hwndEdit;
                            // Set focus to the edit control
                            SetFocus(hwndEdit);
                        }
                    }
                    else {
                        MessageBox(hwnd, L"Не удалось загрузить иконку папки.", L"Ошибка", MB_ICONERROR);
                    }
                }
            }
        }

        DestroyMenu(hMenu);
    }
}

// Window procedure
LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
    // Get window data
    WindowData* data = reinterpret_cast<WindowData*>(GetWindowLongPtr(hwnd, GWLP_USERDATA));

    switch (uMsg) {
    case WM_CREATE: {
        // Allocate and save window data
        WindowData* wndData = new WindowData();
        SetWindowLongPtr(hwnd, GWLP_USERDATA, reinterpret_cast<LONG_PTR>(wndData));
        return 0;
    }

    case WM_DESTROY:
        // Clean up window data
        if (data) {
            delete data;
        }

        // Delete loaded images
        delete backgroundImage;
        delete wifiIcon;
        delete soundIcon;
        delete batteryIcon;
        delete mypassIcon; // Clean up Start menu icon
        delete notification;
        delete office;
        delete newfolder;
        delete search;
        delete browser;
        for (auto& imgItem : images) {
            delete imgItem.image;
        }
        for (auto& dockIcon : dockIcons) {
            // Images are already deleted if they are shared, so avoid deletion here
        }
        PostQuitMessage(0);
        return 0;

    case WM_KEYDOWN:
        // Check for Esc key to close the window
        if (wParam == VK_ESCAPE) {
            DestroyWindow(hwnd); // Close the window
        }

        // Handle language switching via Alt+Shift or Win+Space
        if (((GetAsyncKeyState(VK_MENU) & 0x8000) && wParam == VK_SHIFT) ||
            ((GetAsyncKeyState(VK_LWIN) & 0x8000) && wParam == VK_SPACE)) {
            currentLanguageIndex = (currentLanguageIndex + 1) % languages.size(); // Switch language
            InvalidateRect(hwnd, NULL, TRUE); // Redraw the window

            // Play sounds if the language is Russian
            if (languages[currentLanguageIndex] == L"РУС") {
                PlaySoundByLanguage(L"WindowsLogo");
                PlaySoundByLanguage(L"WiFi");
                PlaySoundByLanguage(L"BatteryCharging");
                PlaySoundByLanguage(L"Triangle");
            }
        }

        return 0;

    case WM_SIZE: {
        InvalidateRect(hwnd, NULL, TRUE); // Redraw the window when resized
        return 0;
    }

    case WM_PAINT: {
        PAINTSTRUCT ps;
        HDC hdc = BeginPaint(hwnd, &ps);
        Graphics graphics(hdc);

        // Set high-quality rendering settings
        graphics.SetSmoothingMode(SmoothingModeHighQuality);
        graphics.SetInterpolationMode(InterpolationModeHighQualityBicubic);
        graphics.SetPixelOffsetMode(PixelOffsetModeHighQuality);

        // Get window dimensions
        RECT windowRect;
        GetClientRect(hwnd, &windowRect);

        // Draw the background image while preserving aspect ratio
        if (backgroundImage) {
            UINT imgWidth = backgroundImage->GetWidth();
            UINT imgHeight = backgroundImage->GetHeight();

            double windowAspect = static_cast<double>(windowRect.right) / windowRect.bottom;
            double imageAspect = static_cast<double>(imgWidth) / imgHeight;

            double drawWidth, drawHeight;
            if (windowAspect > imageAspect) {
                // Window is wider than the image
                drawHeight = windowRect.bottom;
                drawWidth = imageAspect * drawHeight;
            }
            else {
                // Window is narrower or equal to the image
                drawWidth = windowRect.right;
                drawHeight = drawWidth / imageAspect;
            }

            float x = static_cast<float>((windowRect.right - drawWidth) / 2.0);
            float y = static_cast<float>((windowRect.bottom - drawHeight) / 2.0);
            graphics.DrawImage(backgroundImage, x, y, static_cast<REAL>(drawWidth), static_cast<REAL>(drawHeight));
        }

        // Draw the Dock panel similar to macOS Dock
        {
            // Dock parameters
            float dockWidth = 600.0f; // Dock width
            float dockHeight = 60.0f; // Dock height
            float dockX = (windowRect.right - dockWidth) / 2.0f; // Centered horizontally
            float dockY = windowRect.bottom - dockHeight - 20.0f; // Offset from bottom

            // Create a path with rounded and curved corners for a 3D effect
            GraphicsPath path;

            // Define points for the Bezier curves
            PointF points[] = {
                PointF(dockX, dockY + dockHeight / 2),
                PointF(dockX, dockY),
                PointF(dockX + dockWidth / 2, dockY - 20), // Control point for top curve
                PointF(dockX + dockWidth, dockY),
                PointF(dockX + dockWidth, dockY + dockHeight / 2),
                PointF(dockX + dockWidth, dockY + dockHeight),
                PointF(dockX + dockWidth / 2, dockY + dockHeight + 20), // Control point for bottom curve
                PointF(dockX, dockY + dockHeight)
            };

            // Build the path using Bezier curves
            path.StartFigure();
            path.AddBezier(points[0], points[1], points[2], points[3]); // Top curve
            path.AddLine(points[3], points[4]); // Right side
            path.AddBezier(points[4], points[5], points[6], points[7]); // Bottom curve
            path.AddLine(points[7], points[0]); // Left side
            path.CloseFigure();

            // Create gradient brush for a glossy effect
            LinearGradientBrush dockBrush(
                PointF(dockX, dockY),
                PointF(dockX, dockY + dockHeight),
                Color(200, 100, 100, 100), // Dark gray at the top
                Color(200, 200, 200, 200)  // Light gray at the bottom
            );

            graphics.FillPath(&dockBrush, &path);

            // Draw reflection effect (optional)
            // Semi-transparent white gradient from bottom up
            LinearGradientBrush reflectionBrush(
                PointF(dockX, dockY + dockHeight / 2),
                PointF(dockX, dockY + dockHeight),
                Color(100, 255, 255, 255),
                Color(0, 255, 255, 255)
            );
            graphics.FillRectangle(&reflectionBrush, dockX, dockY + dockHeight / 2, dockWidth, dockHeight / 2);

            // Draw shadow under the Dock
            SolidBrush shadowBrush(Color(100, 0, 0, 0)); // Black color with transparency
            graphics.TranslateTransform(0, 5); // Shift down for shadow
            graphics.FillPath(&shadowBrush, &path);
            graphics.TranslateTransform(0, -5); // Return back

            // Prepare to draw Dock icons with magnification
            float iconSpacing = 10.0f;
            float totalIconsWidth = 0.0f;

            // First, calculate total width of icons with base sizes
            for (const auto& dockIcon : dockIcons) {
                totalIconsWidth += dockIcon.baseSize;
            }
            totalIconsWidth += (dockIcons.size() - 1) * iconSpacing;

            // Starting X position for icons
            float iconsStartX = dockX + (dockWidth - totalIconsWidth) / 2.0f;

            // Process each Dock icon for magnification
            for (size_t i = 0; i < dockIcons.size(); ++i) {
                // Calculate base icon position
                float iconX = iconsStartX;
                for (size_t j = 0; j < i; ++j) {
                    iconX += dockIcons[j].width + iconSpacing; // Accumulate previous icons' widths
                }

                float iconY = dockY + (dockHeight - dockIcons[i].baseSize) / 2.0f;

                // Set default size
                float iconWidth = dockIcons[i].baseSize;
                float iconHeight = dockIcons[i].baseSize;

                // Calculate icon center position
                float iconCenterX = iconX + iconWidth / 2.0f;
                float iconCenterY = iconY + iconHeight / 2.0f;

                // Calculate distance between mouse and icon center
                float dx = data->mousePos.x - iconCenterX;
                float dy = data->mousePos.y - iconCenterY;
                float distance = sqrt(dx * dx + dy * dy);

                // Define the magnification parameters
                float maxMagnification = 2.0f; // Maximum scale factor
                float influenceRadius = 100.0f; // Radius of magnification effect

                // Calculate scale factor
                float scale = 1.0f;

                if (distance < influenceRadius) {
                    // Use a Gaussian function for smooth scaling
                    float sigma = influenceRadius / 3.0f;
                    scale = 1.0f + (maxMagnification - 1.0f) * exp(- (distance * distance) / (2 * sigma * sigma));
                }

                // Adjust icon size based on scale
                iconWidth = dockIcons[i].baseSize * scale;
                iconHeight = dockIcons[i].baseSize * scale;

                // Adjust icon position to keep it anchored at the bottom
                float adjustedIconX = iconCenterX - iconWidth / 2.0f;
                float adjustedIconY = dockY + dockHeight - iconHeight - 5.0f; // Adjust to anchor at bottom of Dock

                // Draw the icon
                graphics.DrawImage(dockIcons[i].image, adjustedIconX, adjustedIconY, iconWidth, iconHeight);

                // Update the dock icon's position and size (for hit-testing)
                dockIcons[i].x = adjustedIconX;
                dockIcons[i].y = adjustedIconY;
                dockIcons[i].width = iconWidth;
                dockIcons[i].height = iconHeight;

                // Draw icon reflection (optional)
                // Flip the icon vertically for reflection
                Matrix transform;
                transform.Translate(adjustedIconX, adjustedIconY + iconHeight * 2);
                transform.Scale(1.0f, -1.0f);
                graphics.SetTransform(&transform);

                // Set transparency for reflection
                ImageAttributes imgAttr;
                ColorMatrix colorMatrix = {
                    1.0f, 0.0f, 0.0f, 0.0f, 0.0f,
                    0.0f, 1.0f, 0.0f, 0.0f, 0.0f,
                    0.0f, 0.0f, 1.0f, 0.0f, 0.0f,
                    0.0f, 0.0f, 0.0f, 0.5f, 0.0f, // 0.5f for 50% opacity
                    0.0f, 0.0f, 0.0f, 0.0f, 1.0f
                };
                imgAttr.SetColorMatrix(&colorMatrix, ColorMatrixFlagsDefault, ColorAdjustTypeBitmap);

                graphics.DrawImage(dockIcons[i].image, RectF(0, 0, iconWidth, iconHeight), 0, 0, dockIcons[i].image->GetWidth(), dockIcons[i].image->GetHeight(), UnitPixel, &imgAttr);
                graphics.ResetTransform();
            }
        }

        // Draw Wi-Fi, Sound, and Battery icons on the right horizontally
        if (wifiIcon && soundIcon && batteryIcon) {
            float iconSize = 20.0f; // Icon size
            float iconPadding = 10.0f; // Padding between icons

            // Fixed Y coordinate for all icons (vertical centering)
            float iconY = 20.0f;

            // Starting X coordinate for the rightmost icon (Battery)
            float paddingRight = 20.0f; // Right margin
            float iconX = static_cast<float>(windowRect.right - paddingRight - iconSize);

            // Draw Battery icon (rightmost)
            graphics.DrawImage(batteryIcon, iconX, iconY, iconSize, iconSize);

            // Draw Sound icon to the left of Battery
            iconX -= (iconSize + iconPadding);
            graphics.DrawImage(soundIcon, iconX, iconY, iconSize, iconSize);

            // Draw Wi-Fi icon to the left of Sound
            iconX -= (iconSize + iconPadding);
            graphics.DrawImage(wifiIcon, iconX, iconY, iconSize, iconSize);
        }

        // Get current time
        std::wstring timeString = GetCurrentTimeString();
        std::wstring langString = languages[currentLanguageIndex]; // Current language

        // Use GDI+ to draw text
        FontFamily fontFamilyObj(L"Segoe UI"); // Choose font
        Font font(&fontFamilyObj, 14, FontStyleRegular, UnitPixel); // Font size
        SolidBrush brush(Color(255, 255, 255, 255)); // White text color

        // Measure text sizes
        RectF timeRect;
        graphics.MeasureString(timeString.c_str(), -1, &font, PointF(0, 0), &timeRect);
        RectF langRect;
        graphics.MeasureString(langString.c_str(), -1, &font, PointF(0, 0), &langRect);

        // Calculate positions for text
        float paddingText = 15.0f;
        float xTime = static_cast<float>(windowRect.right - timeRect.Width - langRect.Width - 70); // Right margin
        float yText = 20.0f; // Top margin

        // Draw current language
        PointF langPoint(xTime, yText);
        graphics.DrawString(langString.c_str(), -1, &font, langPoint, &brush);

        // Draw current time to the right of the language
        PointF timePoint(xTime + langRect.Width + 10.0f, yText); // 10 - spacing between language and time
        graphics.DrawString(timeString.c_str(), -1, &font, timePoint, &brush);

        // Add OS announcement in the center of the screen
        std::wstring announcement;
        if (languages[currentLanguageIndex] == L"РУС") {
            announcement = L"Представляем Orega OS: Будущее Производительности!";
        }
        else {
            announcement = L"Introducing Orega OS: The Future of Performance!";
        }
        RectF announcementRect;
        Font largeFont(&fontFamilyObj, 40, FontStyleBold, UnitPixel); // Font for announcement
        graphics.MeasureString(announcement.c_str(), -1, &largeFont, PointF(0, 0), &announcementRect);

        // Position announcement in the center
        float xAnnouncement = (static_cast<float>(windowRect.right) - announcementRect.Width) / 2.0f;
        float yAnnouncement = (static_cast<float>(windowRect.bottom) - announcementRect.Height) / 2.0f;
        PointF announcementPoint(xAnnouncement, yAnnouncement);

        SolidBrush announcementBrush(Color(255, 255, 255, 255)); // White text color for announcement
        graphics.DrawString(announcement.c_str(), -1, &largeFont, announcementPoint, &announcementBrush);

        // Draw additional images and their titles
        for (const auto& imgItem : images) {
            // Draw the image
            graphics.DrawImage(imgItem.image, imgItem.x, imgItem.y, imgItem.width, imgItem.height);

            // Draw the title below the image, centered
            Font titleFont(&fontFamilyObj, 16, FontStyleRegular, UnitPixel);
            SolidBrush titleBrush(Color(255, 255, 255, 255)); // White text color for titles

            RectF titleRect;
            graphics.MeasureString(imgItem.title.c_str(), -1, &titleFont, PointF(0, 0), &titleRect);

            float xTitle = imgItem.x + (imgItem.width - titleRect.Width) / 2.0f;
            float yTitle = imgItem.y + imgItem.height + 5.0f; // Padding below the image

            PointF titlePoint(xTitle, yTitle);
            graphics.DrawString(imgItem.title.c_str(), -1, &titleFont, titlePoint, &titleBrush);
        }

        EndPaint(hwnd, &ps);
        return 0;
    }

    case WM_LBUTTONDOWN: {
        if (data) {
            // Get mouse position
            int mouseX = GET_X_LPARAM(lParam);
            int mouseY = GET_Y_LPARAM(lParam);
            POINT mousePt = { mouseX, mouseY };

            // Check if click is on Dock icons
            bool isOnDockIcon = false;

            for (size_t i = 0; i < dockIcons.size(); ++i) {
                RECT iconRect = {
                    static_cast<LONG>(dockIcons[i].x),
                    static_cast<LONG>(dockIcons[i].y),
                    static_cast<LONG>(dockIcons[i].x + dockIcons[i].width),
                    static_cast<LONG>(dockIcons[i].y + dockIcons[i].height)
                };
                if (PtInRect(&iconRect, mousePt)) {
                    isOnDockIcon = true;
                    // Handle click on Dock icon
                    MessageBox(hwnd, L"Иконка в Dock нажата!", L"Dock", MB_OK);
                    return 0;
                }
            }

            // Check if click is on any image (from top down)
            for (size_t i = images.size(); i-- > 0;) {
                const auto& imgItem = images[i];
                RECT imgRect = {
                    static_cast<LONG>(imgItem.x),
                    static_cast<LONG>(imgItem.y),
                    static_cast<LONG>(imgItem.x + imgItem.width),
                    static_cast<LONG>(imgItem.y + imgItem.height)
                };
                if (PtInRect(&imgRect, mousePt)) {
                    // Start dragging
                    data->isDragging = true;
                    data->draggingImageIndex = i;
                    data->lastMousePos = mousePt;

                    // Capture mouse
                    SetCapture(hwnd);

                    // Bring the dragged image to the top
                    ImageItem draggedItem = images[i];
                    images.erase(images.begin() + i);
                    images.push_back(draggedItem);
                    data->draggingImageIndex = images.size() - 1;

                    InvalidateRect(hwnd, NULL, TRUE);
                    break;
                }
            }
        }
        return 0;
    }

    case WM_RBUTTONDOWN: {
        // Handle right-clicks for context menus
        if (data) {
            // Get mouse position
            int mouseX = GET_X_LPARAM(lParam);
            int mouseY = GET_Y_LPARAM(lParam);
            POINT mousePt = { mouseX, mouseY };

            // Check if click is on any image
            bool isOnImage = false;
            size_t imageIndex = SIZE_MAX;
            for (size_t i = 0; i < images.size(); ++i) {
                const auto& imgItem = images[i];
                RECT imgRect = {
                    static_cast<LONG>(imgItem.x),
                    static_cast<LONG>(imgItem.y),
                    static_cast<LONG>(imgItem.x + imgItem.width),
                    static_cast<LONG>(imgItem.y + imgItem.height)
                };
                if (PtInRect(&imgRect, mousePt)) {
                    isOnImage = true;
                    imageIndex = i;
                    break;
                }
            }

            // Create and display context menu
            CreateContextMenu(hwnd, mouseX, mouseY, imageIndex, isOnImage);
        }
        return 0;
    }

    case WM_MOUSEMOVE: {
        if (data) {
            // Update mouse position
            int mouseX = GET_X_LPARAM(lParam);
            int mouseY = GET_Y_LPARAM(lParam);
            POINT currentPt = { mouseX, mouseY };
            data->mousePos = currentPt;

            // If dragging an image
            if (data->isDragging && data->draggingImageIndex < images.size()) {
                // Calculate movement delta
                int deltaX = currentPt.x - data->lastMousePos.x;
                int deltaY = currentPt.y - data->lastMousePos.y;

                if (deltaX != 0 || deltaY != 0) {
                    // Update image position
                    images[data->draggingImageIndex].x += static_cast<float>(deltaX);
                    images[data->draggingImageIndex].y += static_cast<float>(deltaY);

                    // Get window dimensions
                    RECT windowRect;
                    GetClientRect(hwnd, &windowRect);

                    // Ensure the image stays within window bounds
                    if (images[data->draggingImageIndex].x < 0)
                        images[data->draggingImageIndex].x = 0;
                    if (images[data->draggingImageIndex].y < 0)
                        images[data->draggingImageIndex].y = 0;
                    if (images[data->draggingImageIndex].x +
                        images[data->draggingImageIndex].width > windowRect.right)
                        images[data->draggingImageIndex].x = windowRect.right - images[data->draggingImageIndex].width;
                    if (images[data->draggingImageIndex].y + images[data->draggingImageIndex].height > windowRect.bottom - 40) // 40 for the panel
                        images[data->draggingImageIndex].y = windowRect.bottom - 40 - images[data->draggingImageIndex].height;

                    // Update last mouse position
                    data->lastMousePos = currentPt;

                    // Redraw the window
                    InvalidateRect(hwnd, NULL, TRUE);
                }
            }
            else {
                // Redraw the Dock for magnification
                InvalidateRect(hwnd, NULL, TRUE);
            }
        }
        return 0;
    }

    case WM_LBUTTONUP: {
        if (data) {
            // Release mouse capture
            ReleaseCapture();

            if (data->isDragging && data->draggingImageIndex < images.size()) {
                // Determine if this was a click or drag based on movement
                // For simplicity, consider it a click if position did not change much
                // For more robust differentiation, add more precise checks

                // Check if mouse is close to last position
                int mouseX = GET_X_LPARAM(lParam);
                int mouseY = GET_Y_LPARAM(lParam);
                POINT currentPt = { mouseX, mouseY };
                int distance = abs(currentPt.x - data->lastMousePos.x) + abs(currentPt.y - data->lastMousePos.y);

                if (distance < 5) { // Threshold for click
                    // This is a click, not a drag
                    CreateContextMenu(hwnd, mouseX, mouseY, data->draggingImageIndex, true);
                }

                // Stop dragging
                data->isDragging = false;
                data->draggingImageIndex = SIZE_MAX;
            }
        }
        return 0;
    }

    case WM_COMMAND: {
        if (HIWORD(wParam) == EN_KILLFOCUS && LOWORD(wParam) == 0) {
            // Edit control lost focus
            if (data && data->editControl) {
                std::wstring newText(256, L'\0');
                GetWindowText(data->editControl, &newText[0], 256);
                newText.resize(wcslen(newText.c_str()));

                if (data->isCreatingFolder && data->editingImageIndex < images.size()) {
                    // Update title for new folder
                    images[data->editingImageIndex].title = newText;
                    data->isCreatingFolder = false;
                }
                else if (data->editingImageIndex < images.size()) {
                    // Update title of existing folder
                    images[data->editingImageIndex].title = newText;
                }

                // Remove the Edit control
                DestroyWindow(data->editControl);
                data->editControl = NULL;
                data->editingImageIndex = SIZE_MAX;

                // Redraw the window to display updated title
                InvalidateRect(hwnd, NULL, TRUE);
            }
        }
        else if (HIWORD(wParam) == EN_UPDATE && lParam != 0) {
            // Handle Enter key in the Edit control
            HWND hwndEdit = reinterpret_cast<HWND>(lParam);
            if (data && data->editControl == hwndEdit) {
                if (GetKeyState(VK_RETURN) & 0x8000) {
                    // Simulate loss of focus to confirm editing
                    SendMessage(hwndEdit, WM_KILLFOCUS, 0, 0);
                }
            }
        }
        return 0;
    }

    case WM_NOTIFY: {
        // Handle notifications if necessary
        return 0;
    }

    default:
        return DefWindowProc(hwnd, uMsg, wParam, lParam);
    }
}

// Main application function
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE, LPSTR, int nCmdShow) {
    const wchar_t CLASS_NAME[] = L"FullscreenWindowClass";

    // Initialize GDI+
    GdiplusStartupInput gdiplusStartupInput;
    ULONG_PTR gdiplusToken;
    if (GdiplusStartup(&gdiplusToken, &gdiplusStartupInput, NULL) != Ok) {
        MessageBox(NULL, L"Не удалось инициализировать GDI+", L"Ошибка", MB_ICONERROR);
        return 0;
    }

    // Define window class
    WNDCLASS wc = {};
    wc.lpfnWndProc = WindowProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = CLASS_NAME;
    wc.hCursor = LoadCursor(NULL, IDC_ARROW);
    wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);

    if (!RegisterClass(&wc)) {
        MessageBox(NULL, L"Не удалось зарегистрировать класс окна.", L"Ошибка", MB_ICONERROR);
        GdiplusShutdown(gdiplusToken);
        return 0;
    }

    // Initialize common controls (optionally, for dialog functionality)
    INITCOMMONCONTROLSEX icex = { sizeof(INITCOMMONCONTROLSEX), ICC_WIN95_CLASSES };
    InitCommonControlsEx(&icex);

    // Get screen dimensions
    int screenWidth = GetSystemMetrics(SM_CXSCREEN);
    int screenHeight = GetSystemMetrics(SM_CYSCREEN);

    // Create window
    HWND hwnd = CreateWindowEx(
        WS_EX_TOPMOST, // Window always on top
        CLASS_NAME,
        L"Orega OS Presentation",
        WS_POPUP, // Remove window borders
        0, 0, screenWidth, screenHeight, // Window position and size
        NULL,
        NULL,
        hInstance,
        NULL
    );

    if (hwnd == NULL) {
        MessageBox(NULL, L"Не удалось создать окно.", L"Ошибка", MB_ICONERROR);
        GdiplusShutdown(gdiplusToken);
        return 0;
    }

    // Load background image from URL
    if (!LoadImageFromURL(L"https://i.pinimg.com/originals/56/cb/5f/56cb5ff3d83e4159c447b04d5d3a333e.jpg", backgroundImage)) {
        MessageBox(hwnd, L"Не удалось загрузить фон. Приложение будет закрыто.", L"Ошибка", MB_ICONERROR);
        DestroyWindow(hwnd);
        GdiplusShutdown(gdiplusToken);
        return 0;
    }

    // Initialize additional images
    if (!InitializeImages()) {
        MessageBox(hwnd, L"Не удалось загрузить дополнительные изображения. Приложение будет закрыто.", L"Ошибка", MB_ICONERROR);
        DestroyWindow(hwnd);
        GdiplusShutdown(gdiplusToken);
        return 0;
    }

    ShowWindow(hwnd, nCmdShow);
    UpdateWindow(hwnd);

    // Message loop
    MSG msg;
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    // Shutdown GDI+
    GdiplusShutdown(gdiplusToken);
    return 0;
}
