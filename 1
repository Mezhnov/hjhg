import socket
import threading
import logging
import os

# Настройки сервера
HOST = '127.0.0.1'  # Локальный хост для тестирования
PORT = 8080
BUFFER_SIZE = 10 * 1024 * 1024  # Размер буфера для передачи больших файлов

# Логирование
logging.basicConfig(filename='smp_server.log', level=logging.INFO, format='%(asctime)s:%(levelname)s:%(message)s')

domain_mapping = {
    'example.com': {
        'html_file': 'index.html',
        'css_file': 'styles.css',
        'image_file': 'img.png'
    },
    'test.com': {
        'html_file': 'test.html',
        'css_file': 'style_test.css',
        'image_file': 'image_test.jpg'
    }
}

def send_large_file(conn, filepath):
    """Отправка больших файлов по частям."""
    try:
        file_size = os.path.getsize(filepath)
        conn.send(f"SMP 1.0\nSTATUS: OK\nMESSAGE: Starting file transfer\nFILE_SIZE: {file_size}\n".encode())
        
        with open(filepath, 'rb') as f:
            while True:
                chunk = f.read(BUFFER_SIZE)
                if not chunk:
                    break
                conn.sendall(chunk)
        logging.info(f"File {filepath} sent successfully.")
    except Exception as e:
        logging.error(f"Error while sending file {filepath}: {e}")

def handle_client(conn, addr):
    logging.info(f"Connected: {addr}")
    conn.send("SMP 1.0\nSTATUS: OK\nMESSAGE: Connected successfully\n".encode())

    while True:
        try:
            data = conn.recv(4096).decode()
            if not data:
                break

            headers = dict(line.split(': ', 1) for line in data.split('\n') if ': ' in line)
            action = headers.get('ACTION')
            resource = headers.get('RESOURCE')

            if action == 'GET' and resource:
                if resource in domain_mapping:
                    html_file = domain_mapping[resource]['html_file']
                    try:
                        with open(html_file, 'r', encoding='utf-8') as f:
                            html_content = f.read()
                        response = f"SMP 1.0\nSTATUS: OK\nRESOURCE: {html_file}\n\n{html_content}"
                        conn.send(response.encode())
                    except FileNotFoundError:
                        response = "SMP 1.0\nSTATUS: ERROR\nMESSAGE: HTML file not found\n"
                        conn.send(response.encode())
                else:
                    response = "SMP 1.0\nSTATUS: ERROR\nMESSAGE: Resource not found\n"
                    conn.send(response.encode())
            elif action == 'SEND_FILE' and resource:
                file_path = domain_mapping[resource]['image_file']  # Укажите правильный путь к файлу
                send_large_file(conn, file_path)
            else:
                response = "SMP 1.0\nSTATUS: ERROR\nMESSAGE: Invalid action or resource\n"
                conn.send(response.encode())

        except Exception as e:
            logging.error(f"Error: {e}")
            break

    conn.close()
    logging.info(f"Disconnected: {addr}")

def start_server():
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:
        server_socket.bind((HOST, PORT))
        server_socket.listen()
        logging.info(f"Server started on {HOST}:{PORT}")

        while True:
            conn, addr = server_socket.accept()
            threading.Thread(target=handle_client, args=(conn, addr)).start()

if __name__ == "__main__":
    start_server()
