import socketserver
import json
import sqlite3
import os

# Список допустимых доменов
ALLOWED_DOMAINS = {
    'smp.example1.com': 'example1',
    'smp.example2.com': 'example2',
    'smp.example3.com': 'example3'
}

# Определяем путь к базе данных пользователей
DATABASE = os.path.join(os.path.dirname(__file__), 'users.db')

def init_db():
    try:
        with sqlite3.connect(DATABASE) as conn:
            conn.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    username TEXT NOT NULL,
                    password TEXT NOT NULL
                )
            ''')
            conn.commit()
    except sqlite3.Error as e:
        print(f"Ошибка при инициализации базы данных: {e}")

class SMPHandler(socketserver.BaseRequestHandler):
    def handle(self):
        try:
            data = self.request.recv(1024).strip()
            if not data:
                return
            message = json.loads(data.decode('utf-8'))
            response = self.process_message(message)
            self.request.sendall(json.dumps(response).encode('utf-8'))
        except Exception as e:
            error_response = {'status': 'error', 'message': str(e)}
            self.request.sendall(json.dumps(error_response).encode('utf-8'))

    def process_message(self, message):
        action = message.get('action')
        domain = message.get('domain')
        if domain not in ALLOWED_DOMAINS:
            return {'status': 'error', 'message': 'Домен не разрешён'}

        if action == 'register':
            return self.register_user(message, ALLOWED_DOMAINS[domain])
        elif action == 'success':
            return {'status': 'success', 'message': 'Регистрация прошла успешно'}
        else:
            return {'status': 'error', 'message': 'Неизвестное действие'}

    def register_user(self, message, domain_key):
        username = message.get('username')
        password = message.get('password')
        if not username or not password:
            return {'status': 'error', 'message': 'Недостаточно данных для регистрации'}

        try:
            with sqlite3.connect(DATABASE) as conn:
                conn.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, password))
                conn.commit()
            return {'status': 'success', 'message': f'Пользователь {username} зарегистрирован на {domain_key}'}
        except sqlite3.Error as e:
            return {'status': 'error', 'message': f'Ошибка базы данных: {e}'}

class ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):
    pass

if __name__ == "__main__":
    init_db()
    HOST, PORT = "0.0.0.0", 8000
    with ThreadedTCPServer((HOST, PORT), SMPHandler) as server:
        print(f"SMP сервер запущен и слушает {HOST}:{PORT}")
        server.serve_forever()
