#include <windows.h>
#include <commctrl.h>
#include <mmsystem.h>
#include <gdiplus.h>
#include <string>
#include <sstream>
#include <iomanip>

#pragma comment(lib, "gdiplus.lib")
#pragma comment(lib, "comctl32.lib")

// Global variables
HINSTANCE hInst;
HWND hWndMain;
Gdiplus::GdiplusStartupInput gdiplusStartupInput;
Gdiplus::StartupOutput gdiplusStartupOutput;
Gdiplus::GdiplusStartupToken gdiplusToken;

// Forward declarations
LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
void CreateMainMenu(HWND);
void DisplayTime(HWND);
void InitGDIPlus();

int main() {
    // Initialize GDI+
    InitGDIPlus();

    // Initialize Windows components
    WNDCLASSEX wc = { sizeof(WNDCLASSEX), CS_HREDRAW | CS_VREDRAW, WndProc, 0, 0, GetModuleHandle(NULL), NULL, NULL, (HBRUSH)(COLOR_WINDOW+1), NULL, L"MainWindowClass", NULL };
    RegisterClassEx(&wc);

    hWndMain = CreateWindow(L"MainWindowClass", L"Main Screen", WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, 800, 600, NULL, NULL, wc.hInstance, NULL);
    
    // Show window and start message loop
    ShowWindow(hWndMain, SW_SHOW);
    UpdateWindow(hWndMain);

    MSG msg;
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    // Shutdown GDI+
    Gdiplus::GdiplusShutdown(gdiplusToken);
    return 0;
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) {
    switch (message) {
        case WM_CREATE:
            // Create the menu and display time
            CreateMainMenu(hWnd);
            DisplayTime(hWnd);
            return 0;
        
        case WM_TIMER:
            // Update the time every second
            DisplayTime(hWnd);
            return 0;

        case WM_COMMAND:
            // Handle menu actions
            if (LOWORD(wParam) == ID_FILE_EXIT) {
                PostMessage(hWnd, WM_CLOSE, 0, 0);
            }
            return 0;
        
        case WM_CLOSE:
            PostQuitMessage(0);
            return 0;
        
        case WM_DESTROY:
            return 0;
    }
    return DefWindowProc(hWnd, message, wParam, lParam);
}

void CreateMainMenu(HWND hWnd) {
    // Create a menu with File and Exit options
    HMENU hMenu = CreateMenu();
    HMENU hFileMenu = CreatePopupMenu();
    
    AppendMenu(hFileMenu, MF_STRING, ID_FILE_EXIT, L"Exit");
    AppendMenu(hMenu, MF_POPUP, (UINT_PTR)hFileMenu, L"File");
    
    SetMenu(hWnd, hMenu);
}

void DisplayTime(HWND hWnd) {
    // Get current time
    SYSTEMTIME time;
    GetLocalTime(&time);
    std::wostringstream timeStream;
    timeStream << std::setw(2) << std::setfill(L'0') << time.wHour << L":"
               << std::setw(2) << std::setfill(L'0') << time.wMinute << L":"
               << std::setw(2) << std::setfill(L'0') << time.wSecond;
    
    // Convert time to string and display it
    std::wstring timeStr = timeStream.str();
    SetWindowText(hWnd, timeStr.c_str());
}

void InitGDIPlus() {
    // Initialize GDI+
    Gdiplus::GdiplusStartup(&gdiplusToken, &gdiplusStartupInput, &gdiplusStartupOutput);
}
