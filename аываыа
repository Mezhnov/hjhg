#include <windows.h>
#include <wininet.h>
#include <fstream>
#include <string>
#include <chrono>
#include <ctime>

#pragma comment(lib, "wininet.lib")

// Функция для скачивания изображения с URL
bool DownloadImageFromURL(const std::wstring& url, const std::wstring& localFilePath) {
    HINTERNET hInternet = InternetOpen(L"ImageDownloader", INTERNET_OPEN_TYPE_DIRECT, NULL, NULL, 0);
    if (!hInternet) {
        return false;
    }

    HINTERNET hUrl = InternetOpenUrl(hInternet, url.c_str(), NULL, 0, INTERNET_FLAG_RELOAD, 0);
    if (!hUrl) {
        InternetCloseHandle(hInternet);
        return false;
    }

    std::ofstream file(localFilePath, std::ios::binary);
    if (!file) {
        InternetCloseHandle(hUrl);
        InternetCloseHandle(hInternet);
        return false;
    }

    char buffer[4096];
    DWORD bytesRead;
    while (InternetReadFile(hUrl, buffer, sizeof(buffer), &bytesRead) && bytesRead > 0) {
        file.write(buffer, bytesRead);
    }

    file.close();
    InternetCloseHandle(hUrl);
    InternetCloseHandle(hInternet);

    return true;
}

// Основной обработчик оконных сообщений
LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam) {
    static wchar_t timeBuffer[9];  // Буфер для времени
    static HBITMAP hBitmap = NULL;  // Хранение битмапа изображения
    std::chrono::system_clock::time_point now;  // Переменная для текущего времени
    std::time_t nowTime;  // Переменная для преобразованного времени

    switch (uMsg) {
    case WM_CREATE:
        // Скачивание изображения
        if (DownloadImageFromURL(L"https://i.pinimg.com/originals/56/cb/5f/56cb5ff3d83e4159c447b04d5d3a333e.jpg", L"background.bmp")) {
            hBitmap = (HBITMAP)LoadImage(NULL, L"background.bmp", IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE);
        }
        else {
            MessageBox(hwnd, L"Не удалось скачать изображение!", L"Ошибка", MB_OK | MB_ICONERROR);
        }
        SetTimer(hwnd, 1, 1000, NULL);  // Таймер обновления времени каждую секунду
        return 0;

    case WM_TIMER:
        now = std::chrono::system_clock::now();  // Получение текущего времени
        nowTime = std::chrono::system_clock::to_time_t(now);
        std::tm localTime;
        localtime_s(&localTime, &nowTime);  // Преобразование времени в локальное
        wcsftime(timeBuffer, sizeof(timeBuffer) / sizeof(wchar_t), L"%H:%M:%S", &localTime);  // Форматирование времени
        InvalidateRect(hwnd, NULL, TRUE);  // Перерисовка окна
        return 0;

    case WM_PAINT: {
        PAINTSTRUCT ps;
        HDC hdc = BeginPaint(hwnd, &ps);

        // Отображение фона (если изображение загружено)
        if (hBitmap) {
            HDC hdcMem = CreateCompatibleDC(hdc);
            SelectObject(hdcMem, hBitmap);

            BITMAP bitmap;
            GetObject(hBitmap, sizeof(bitmap), &bitmap);
            StretchBlt(hdc, 0, 0, ps.rcPaint.right, ps.rcPaint.bottom, hdcMem, 0, 0, bitmap.bmWidth, bitmap.bmHeight, SRCCOPY);

            DeleteDC(hdcMem);
        }

        // Отображение времени поверх фона
        SetTextColor(hdc, RGB(255, 255, 255));  // Белый цвет текста
        SetBkMode(hdc, TRANSPARENT);  // Прозрачный фон для текста
        HFONT hFont = CreateFont(30, 0, 0, 0, FW_BOLD, FALSE, FALSE, FALSE, DEFAULT_CHARSET,
            OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY,
            DEFAULT_PITCH | FF_SWISS, L"Arial");
        SelectObject(hdc, hFont);

        RECT rect;
        GetClientRect(hwnd, &rect);  // Получение размеров окна
        DrawText(hdc, timeBuffer, -1, &rect, DT_CENTER | DT_VCENTER | DT_SINGLELINE);  // Отображение времени по центру

        DeleteObject(hFont);
        EndPaint(hwnd, &ps);
        return 0;
    }

    case WM_DESTROY:
        PostQuitMessage(0);  // Завершение приложения
        return 0;

    default:
        return DefWindowProc(hwnd, uMsg, wParam, lParam);  // Стандартная обработка сообщений
    }
}

// Точка входа в приложение
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE, LPSTR, int nCmdShow) {
    const wchar_t CLASS_NAME[] = L"Sample Window Class";

    WNDCLASS wc = {};
    wc.lpfnWndProc = WindowProc;
    wc.hInstance = hInstance;
    wc.lpszClassName = CLASS_NAME;

    // Регистрация класса окна
    RegisterClass(&wc);

    // Создание окна
    HWND hwnd = CreateWindowEx(
        0,
        CLASS_NAME,
        L"My Window",
        WS_POPUP,
        CW_USEDEFAULT, CW_USEDEFAULT, 800, 600,
        NULL,
        NULL,
        hInstance,
        NULL
    );

    if (!hwnd) return 0;

    // Показ окна
    ShowWindow(hwnd, nCmdShow);

    // Основной цикл обработки сообщений
    MSG msg = {};
    while (GetMessage(&msg, NULL, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    return 0;
}
