// main.cpp

#include <windows.h>
#include <windowsx.h>
#include <gdiplus.h>
#include <commctrl.h>
#include <richedit.h>
#include <string>
#include <vector>
#include <sstream>
#include "resource.h" // Ensure you have this header for resource IDs

#pragma comment(lib, "Gdiplus.lib")
#pragma comment(lib, "Comctl32.lib")
#pragma comment(lib, "Msftedit.lib")

using namespace Gdiplus;

// Constants for splitters
#define SPLITTER_WIDTH 5
#define MIN_PANEL_WIDTH 150
#define MIN_PANEL_HEIGHT 100

// IDs for menu items
#define ID_FILE_NEW 9001
#define ID_FILE_OPEN 9002
#define ID_FILE_SAVE 9003
#define ID_FILE_EXIT 9004
#define ID_HELP_ABOUT 9005

// Toolbar button IDs
#define IDT_RUN 1001
#define IDT_DEBUG 1002
#define IDT_BUILD 1003

// Global variables
HINSTANCE hInstGlobal;
ULONG_PTR gdiplusToken;

// Forward declarations
LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
void InitializeGDIPlus();
void ShutdownGDIPlus();
void InitMainMenu(HWND hWnd);
void InitToolbar(HWND hWnd);
void InitProjectExplorer(HWND hWndParent);
void InitCodeEditor(HWND hWndParent);
void InitOutputConsole(HWND hWndParent);
void InitDebuggerPanel(HWND hWndParent);
void ResizeLayout(HWND hWnd, int width, int height);
HWND CreateTabControl(HWND hParent);
void AddNewTab(HWND hTab);
void SelectTab(HWND hTab, int index);

// Entry point
int APIENTRY wWinMain(_In_ HINSTANCE hInstance,
                     _In_opt_ HINSTANCE hPrevInstance,
                     _In_ LPWSTR    lpCmdLine,
                     _In_ int       nCmdShow)
{
    // Initialize GDI+
    InitializeGDIPlus();

    // Initialize common controls
    INITCOMMONCONTROLSEX icex;
    icex.dwSize = sizeof(icex);
    icex.dwICC = ICC_WIN95_CLASSES | ICC_TAB_CLASSES | ICC_TREEVIEW_CLASSES | ICC_BAR_CLASSES;
    InitCommonControlsEx(&icex);

    // Register the window class
    const wchar_t szWindowClass[] = L"MainWindowClass";
    const wchar_t szTitle[] = L"Simple IDE";

    WNDCLASSEX wcex;
    ZeroMemory(&wcex, sizeof(WNDCLASSEX));

    wcex.cbSize = sizeof(WNDCLASSEX);
    wcex.style          = CS_HREDRAW | CS_VREDRAW;
    wcex.lpfnWndProc    = WndProc;
    wcex.cbClsExtra     = 0;
    wcex.cbWndExtra     = 0;
    wcex.hInstance      = hInstance;
    wcex.hIcon          = LoadIcon(NULL, IDI_APPLICATION);
    wcex.hCursor        = LoadCursor(NULL, IDC_ARROW);
    wcex.hbrBackground  = (HBRUSH)(COLOR_WINDOW+1);
    wcex.lpszMenuName   = NULL; // Menu will be created manually
    wcex.lpszClassName  = szWindowClass;
    wcex.hIconSm        = LoadIcon(NULL, IDI_APPLICATION);

    if (!RegisterClassEx(&wcex))
    {
        MessageBox(NULL,
            L"Call to RegisterClassEx failed!",
            szTitle,
            NULL);

        ShutdownGDIPlus();
        return 1;
    }

    hInstGlobal = hInstance;

    // Create the window
    HWND hWnd = CreateWindow(
        szWindowClass,
        szTitle,
        WS_OVERLAPPEDWINDOW | WS_VISIBLE,
        CW_USEDEFAULT, CW_USEDEFAULT,
        1200, 800,
        NULL,
        NULL,
        hInstance,
        NULL
    );

    if (!hWnd)
    {
        MessageBox(NULL,
            L"Call to CreateWindow failed!",
            szTitle,
            NULL);

        ShutdownGDIPlus();
        return 1;
    }

    // Main message loop
    MSG msg;
    while (GetMessage(&msg, NULL, 0, 0))
    {
        if (!IsDialogMessage(hWnd, &msg))
        {
            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }
    }

    // Shutdown GDI+
    ShutdownGDIPlus();

    return (int) msg.wParam;
}

// Initialize GDI+
void InitializeGDIPlus()
{
    GdiplusStartupInput gdiplusStartupInput;
    GdiplusStartup(&gdiplusToken, &gdiplusStartupInput, NULL);
}

// Shutdown GDI+
void ShutdownGDIPlus()
{
    GdiplusShutdown(gdiplusToken);
}

// Window Procedure
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    static HWND hMenu, hToolbar, hProjectExplorer, hTabControl, hCodeEditor, hOutputConsole, hDebuggerPanel;

    switch (message)
    {
    case WM_CREATE:
        {
            // Initialize Menu
            InitMainMenu(hWnd);

            // Initialize Toolbar
            InitToolbar(hWnd);

            // Initialize Panels
            hProjectExplorer = CreateWindowEx(0, WC_TREEVIEW, L"Project Explorer",
                WS_CHILD | WS_VISIBLE | WS_BORDER | TVS_HASLINES | TVS_LINESATROOT | TVS_HASBUTTONS,
                0, 0, 200, 600, hWnd, (HMENU)100, hInstGlobal, NULL);

            // Initialize Tab Control for Code Editor
            hTabControl = CreateTabControl(hWnd);
            AddNewTab(hTabControl); // Add initial tab

            // Initialize Output Console
            hOutputConsole = InitOutputConsole(hWnd);

            // Initialize Debugger Panel (Stub)
            hDebuggerPanel = InitDebuggerPanel(hWnd);
        }
        break;
    case WM_SIZE:
        {
            int width = LOWORD(lParam);
            int height = HIWORD(lParam);
            ResizeLayout(hWnd, width, height);
        }
        break;
    case WM_COMMAND:
        {
            int wmId = LOWORD(wParam);
            // Parse the menu selections:
            switch (wmId)
            {
            case ID_FILE_NEW:
                AddNewTab(hTabControl);
                break;
            case ID_FILE_OPEN:
                // Implement file open functionality
                MessageBox(hWnd, L"Open File functionality not implemented.", L"Info", MB_OK | MB_ICONINFORMATION);
                break;
            case ID_FILE_SAVE:
                // Implement file save functionality
                MessageBox(hWnd, L"Save File functionality not implemented.", L"Info", MB_OK | MB_ICONINFORMATION);
                break;
            case ID_FILE_EXIT:
                DestroyWindow(hWnd);
                break;
            case ID_HELP_ABOUT:
                MessageBox(hWnd, L"Simple IDE v1.0\nCreated with Win32 API.", L"About", MB_OK | MB_ICONINFORMATION);
                break;
            case IDT_RUN:
                // Implement run functionality
                MessageBox(hWnd, L"Run functionality not implemented.", L"Info", MB_OK | MB_ICONINFORMATION);
                break;
            case IDT_DEBUG:
                // Implement debug functionality
                MessageBox(hWnd, L"Debug functionality not implemented.", L"Info", MB_OK | MB_ICONINFORMATION);
                break;
            case IDT_BUILD:
                // Implement build functionality
                MessageBox(hWnd, L"Build functionality not implemented.", L"Info", MB_OK | MB_ICONINFORMATION);
                break;
            default:
                break;
            }
        }
        break;
    case WM_NOTIFY:
        {
            // Handle notifications from controls if needed
        }
        break;
    case WM_DESTROY:
        PostQuitMessage(0);
        break;
    case WM_SIZECHILD:
        // Custom message to handle child resizing
        break;
    default:
        return DefWindowProc(hWnd, message, wParam, lParam);
        break;
    }

    return 0;
}

// Initialize the main menu
void InitMainMenu(HWND hWnd)
{
    HMENU hMenubar = CreateMenu();

    // File Menu
    HMENU hFile = CreateMenu();
    AppendMenu(hFile, MF_STRING, ID_FILE_NEW, L"&New");
    AppendMenu(hFile, MF_STRING, ID_FILE_OPEN, L"&Open...");
    AppendMenu(hFile, MF_STRING, ID_FILE_SAVE, L"&Save");
    AppendMenu(hFile, MF_SEPARATOR, 0, NULL);
    AppendMenu(hFile, MF_STRING, ID_FILE_EXIT, L"E&xit");
    AppendMenu(hMenubar, MF_POPUP, (UINT_PTR)hFile, L"&File");

    // Edit Menu (Placeholder)
    HMENU hEdit = CreateMenu();
    AppendMenu(hEdit, MF_STRING, 0, L"&Undo");
    AppendMenu(hEdit, MF_STRING, 0, L"&Redo");
    AppendMenu(hEdit, MF_SEPARATOR, 0, NULL);
    AppendMenu(hEdit, MF_STRING, 0, L"C&ut");
    AppendMenu(hEdit, MF_STRING, 0, L"&Copy");
    AppendMenu(hEdit, MF_STRING, 0, L"&Paste");
    AppendMenu(hMenubar, MF_POPUP, (UINT_PTR)hEdit, L"&Edit");

    // Help Menu
    HMENU hHelp = CreateMenu();
    AppendMenu(hHelp, MF_STRING, ID_HELP_ABOUT, L"&About");
    AppendMenu(hMenubar, MF_POPUP, (UINT_PTR)hHelp, L"&Help");

    SetMenu(hWnd, hMenubar);
}

// Initialize the toolbar
void InitToolbar(HWND hWnd)
{
    // Create toolbar
    HWND hToolbar = CreateWindowEx(0, TOOLBARCLASSNAME, NULL,
        WS_CHILD | WS_VISIBLE | TBSTYLE_TOOLBAR,
        0, 0, 0, 0, hWnd, (HMENU)101, hInstGlobal, NULL);

    // Send the TB_BUTTONSTRUCTSIZE message, which is required for
    // backward compatibility.
    SendMessage(hToolbar, TB_BUTTONSTRUCTSIZE, (WPARAM)sizeof(TBBUTTON), 0);

    // Add buttons to the toolbar
    TBBUTTON tbb[3] = {0};

    // Run Button
    tbb[0].iBitmap = 0;
    tbb[0].idCommand = IDT_RUN;
    tbb[0].fsState = TBSTATE_ENABLED;
    tbb[0].fsStyle = TBSTYLE_BUTTON;
    tbb[0].iString = (INT_PTR)L"Run";

    // Debug Button
    tbb[1].iBitmap = 1;
    tbb[1].idCommand = IDT_DEBUG;
    tbb[1].fsState = TBSTATE_ENABLED;
    tbb[1].fsStyle = TBSTYLE_BUTTON;
    tbb[1].iString = (INT_PTR)L"Debug";

    // Build Button
    tbb[2].iBitmap = 2;
    tbb[2].idCommand = IDT_BUILD;
    tbb[2].fsState = TBSTATE_ENABLED;
    tbb[2].fsStyle = TBSTYLE_BUTTON;
    tbb[2].iString = (INT_PTR)L"Build";

    SendMessage(hToolbar, TB_ADDBUTTONS, (WPARAM)3, (LPARAM)&tbb);

    // Set toolbar images (simple placeholders)
    HIMAGELIST hImageList = ImageList_Create(16, 16, ILC_COLOR32, 3, 0);
    // Normally, you would load actual bitmaps here
    ImageList_AddIcon(hImageList, LoadIcon(NULL, IDI_APPLICATION));
    ImageList_AddIcon(hImageList, LoadIcon(NULL, IDI_INFORMATION));
    ImageList_AddIcon(hImageList, LoadIcon(NULL, IDI_WARNING));

    SendMessage(hToolbar, TB_SETIMAGELIST, 0, (LPARAM)hImageList);
}

// Create a Tab Control
HWND CreateTabControl(HWND hParent)
{
    HWND hTab = CreateWindowEx(0, WC_TABCONTROL, NULL,
        WS_CHILD | WS_VISIBLE | WS_CLIPSIBLINGS | WS_BORDER,
        200, 40, 1000, 500, hParent, (HMENU)102, hInstGlobal, NULL);

    return hTab;
}

// Add a new tab to the Tab Control
void AddNewTab(HWND hTab)
{
    TCITEM tie;
    tie.mask = TCIF_TEXT;
    static int tabCount = 1;
    std::wstring tabName = L"File" + std::to_wstring(tabCount++) + L".cpp";
    tie.pszText = const_cast<LPWSTR>(tabName.c_str());

    int index = TabCtrl_InsertItem(hTab, TabCtrl_GetItemCount(hTab), &tie);

    // Create a Rich Edit control for the code editor
    HWND hEditor = CreateWindowEx(WS_EX_CLIENTEDGE, MSFTEDIT_CLASS, NULL,
        WS_CHILD | WS_VISIBLE | WS_TABSTOP | ES_MULTILINE | ES_AUTOVSCROLL | ES_SCROLL,
        0, 0, 0, 0, hTab, (HMENU)(2000 + index), hInstGlobal, NULL);

    // Set font for the editor
    LOGFONT lf = {0};
    lf.lfHeight = 16;
    lf.lfWeight = FW_NORMAL;
    wcscpy_s(lf.lfFaceName, L"Consolas");
    HFONT hFont = CreateFontIndirect(&lf);
    SendMessage(hEditor, WM_SETFONT, (WPARAM)hFont, TRUE);
}

// Resize and arrange the layout
void ResizeLayout(HWND hWnd, int width, int height)
{
    // Assuming the toolbar height is 30 and menu height is handled by the system
    int toolbarHeight = 30;

    // Resize toolbar
    HWND hToolbar = FindWindowEx(hWnd, NULL, TOOLBARCLASSNAME, NULL);
    if (hToolbar)
    {
        SetWindowPos(hToolbar, NULL, 0, 0, width, toolbarHeight, SWP_NOZORDER);
    }

    // Resize Project Explorer
    HWND hProjectExplorer = FindWindowEx(hWnd, NULL, WC_TREEVIEW, NULL);
    if (hProjectExplorer)
    {
        SetWindowPos(hProjectExplorer, NULL, 0, toolbarHeight, 200, height - toolbarHeight - 200, SWP_NOZORDER);
    }

    // Resize Tab Control
    HWND hTabControl = FindWindowEx(hWnd, NULL, WC_TABCONTROL, NULL);
    if (hTabControl)
    {
        SetWindowPos(hTabControl, NULL, 200, toolbarHeight, width - 200, height - toolbarHeight - 200, SWP_NOZORDER);
    }

    // Resize Output Console
    HWND hOutputConsole = FindWindowEx(hWnd, NULL, MSFTEDIT_CLASS, NULL);
    if (hOutputConsole)
    {
        SetWindowPos(hOutputConsole, NULL, 200, height - 200, width - 200, 200, SWP_NOZORDER);
    }

    // Resize Debugger Panel
    HWND hDebuggerPanel = FindWindowEx(hWnd, NULL, MSFTEDIT_CLASS, NULL);
    if (hDebuggerPanel)
    {
        SetWindowPos(hDebuggerPanel, NULL, width - 300, toolbarHeight, 300, height - toolbarHeight - 200, SWP_NOZORDER);
    }
}

// Initialize the Output Console
HWND InitOutputConsole(HWND hWndParent)
{
    HWND hOutput = CreateWindowEx(WS_EX_CLIENTEDGE, MSFTEDIT_CLASS, NULL,
        WS_CHILD | WS_VISIBLE | WS_TABSTOP | ES_MULTILINE | ES_READONLY | ES_AUTOVSCROLL | ES_WANTRETURN | WS_VSCROLL,
        200, 600, 1000, 200, hWndParent, (HMENU)103, hInstGlobal, NULL);

    // Set font for the console
    LOGFONT lf = {0};
    lf.lfHeight = 14;
    lf.lfWeight = FW_NORMAL;
    wcscpy_s(lf.lfFaceName, L"Consolas");
    HFONT hFont = CreateFontIndirect(&lf);
    SendMessage(hOutput, WM_SETFONT, (WPARAM)hFont, TRUE);

    // Initialize Rich Edit (if needed)
    SendMessage(hOutput, EM_SETBKGNDCOLOR, 0, (LPARAM)RGB(0, 0, 0));
    SendMessage(hOutput, EM_SETLIMITTEXT, (WPARAM)0, 0); // No text limit

    return hOutput;
}

// Initialize the Debugger Panel (Stub)
HWND InitDebuggerPanel(HWND hWndParent)
{
    HWND hDebugger = CreateWindowEx(0, MSFTEDIT_CLASS, L"Debugger Panel",
        WS_CHILD | WS_VISIBLE | WS_BORDER | ES_MULTILINE | ES_READONLY | WS_VSCROLL,
        900, 40, 300, 500, hWndParent, (HMENU)104, hInstGlobal, NULL);

    // Set font for the debugger panel
    LOGFONT lf = {0};
    lf.lfHeight = 12;
    lf.lfWeight = FW_NORMAL;
    wcscpy_s(lf.lfFaceName, L"Consolas");
    HFONT hFont = CreateFontIndirect(&lf);
    SendMessage(hDebugger, WM_SETFONT, (WPARAM)hFont, TRUE);

    // Add some placeholder text
    SetWindowText(hDebugger, L"Debugger Panel\nNot Implemented.");

    return hDebugger;
}

// Create a Rich Edit control as Code Editor
HWND InitCodeEditor(HWND hWndParent)
{
    HWND hEditor = CreateWindowEx(WS_EX_CLIENTEDGE, MSFTEDIT_CLASS, NULL,
        WS_CHILD | WS_VISIBLE | WS_TABSTOP | ES_MULTILINE | ES_AUTOVSCROLL | ES_WANTRETURN | WS_VSCROLL,
        200, 40, 800, 500, hWndParent, (HMENU)105, hInstGlobal, NULL);

    // Set font for the editor
    LOGFONT lf = {0};
    lf.lfHeight = 16;
    lf.lfWeight = FW_NORMAL;
    wcscpy_s(lf.lfFaceName, L"Consolas");
    HFONT hFont = CreateFontIndirect(&lf);
    SendMessage(hEditor, WM_SETFONT, (WPARAM)hFont, TRUE);

    return hEditor;
}
Сборка начата в 22:31...
1>------ Сборка начата: проект: САПР1.1, Конфигурация: Debug x64 ------
1>САПР1.1.cpp
1>C:\Users\User\source\repos\САПР1.1\САПР1.1\САПР1.1.cpp(182,43): error C2440: =: невозможно преобразовать "void" в "HWND"
1>    C:\Users\User\source\repos\САПР1.1\САПР1.1\САПР1.1.cpp(182,43):
1>    Выражение, имеющее тип void, нельзя преобразовать в другой тип
1>C:\Users\User\source\repos\САПР1.1\САПР1.1\САПР1.1.cpp(185,43): error C2440: =: невозможно преобразовать "void" в "HWND"
1>    C:\Users\User\source\repos\САПР1.1\САПР1.1\САПР1.1.cpp(185,43):
1>    Выражение, имеющее тип void, нельзя преобразовать в другой тип
1>C:\Users\User\source\repos\САПР1.1\САПР1.1\САПР1.1.cpp(243,10): error C2065: WM_SIZECHILD: необъявленный идентификатор
1>C:\Users\User\source\repos\САПР1.1\САПР1.1\САПР1.1.cpp(243,10): error C2131: выражение не определяется константой
1>    C:\Users\User\source\repos\САПР1.1\САПР1.1\САПР1.1.cpp(243,10):
1>    обнаружено неконстантное (под)выражение
1>C:\Users\User\source\repos\САПР1.1\САПР1.1\САПР1.1.cpp(243,10): error C2051: значение выражения для варианта выбора не является константой
1>C:\Users\User\source\repos\САПР1.1\САПР1.1\САПР1.1.cpp(291,33): error C2065: TBSTYLE_TOOLBAR: необъявленный идентификатор
1>C:\Users\User\source\repos\САПР1.1\САПР1.1\САПР1.1.cpp(290,21): error C2660: CreateWindowExW: функция не принимает 11 аргументов
1>    C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\winuser.h(4437,1):
1>     см. объявление "CreateWindowExW"
1>    C:\Users\User\source\repos\САПР1.1\САПР1.1\САПР1.1.cpp(290,21):
1>    при попытке сопоставить список аргументов "(int, const wchar_t [16], int, int, int, int, int, HWND, HMENU, HINSTANCE, int)"
1>C:\Users\User\source\repos\САПР1.1\САПР1.1\САПР1.1.cpp(357,78): error C2065: ES_SCROLL: необъявленный идентификатор
1>C:\Users\User\source\repos\САПР1.1\САПР1.1\САПР1.1.cpp(358,27): warning C4312: приведение типов: преобразование из "int" в "HMENU" большего размера
1>C:\Users\User\source\repos\САПР1.1\САПР1.1\САПР1.1.cpp(356,20): error C2660: CreateWindowExW: функция не принимает 11 аргументов
1>    C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\um\winuser.h(4437,1):
1>     см. объявление "CreateWindowExW"
1>    C:\Users\User\source\repos\САПР1.1\САПР1.1\САПР1.1.cpp(356,20):
1>    при попытке сопоставить список аргументов "(long, const wchar_t [12], int, int, int, int, int, HWND, HMENU, HINSTANCE, int)"
1>C:\Users\User\source\repos\САПР1.1\САПР1.1\САПР1.1.cpp(412,6): error C2556: HWND InitOutputConsole(HWND): перегруженная функция отличается от "void InitOutputConsole(HWND)" только возвращаемым типом
1>    C:\Users\User\source\repos\САПР1.1\САПР1.1\САПР1.1.cpp(48,6):
1>     см. объявление "InitOutputConsole"
1>C:\Users\User\source\repos\САПР1.1\САПР1.1\САПР1.1.cpp(412,6): error C2040: InitOutputConsole: "HWND (HWND)" отличается по уровням косвенного обращения от "void (HWND)"
1>C:\Users\User\source\repos\САПР1.1\САПР1.1\САПР1.1.cpp(434,6): error C2556: HWND InitDebuggerPanel(HWND): перегруженная функция отличается от "void InitDebuggerPanel(HWND)" только возвращаемым типом
1>    C:\Users\User\source\repos\САПР1.1\САПР1.1\САПР1.1.cpp(49,6):
1>     см. объявление "InitDebuggerPanel"
1>C:\Users\User\source\repos\САПР1.1\САПР1.1\САПР1.1.cpp(434,6): error C2040: InitDebuggerPanel: "HWND (HWND)" отличается по уровням косвенного обращения от "void (HWND)"
1>C:\Users\User\source\repos\САПР1.1\САПР1.1\САПР1.1.cpp(455,6): error C2556: HWND InitCodeEditor(HWND): перегруженная функция отличается от "void InitCodeEditor(HWND)" только возвращаемым типом
1>    C:\Users\User\source\repos\САПР1.1\САПР1.1\САПР1.1.cpp(47,6):
1>     см. объявление "InitCodeEditor"
1>C:\Users\User\source\repos\САПР1.1\САПР1.1\САПР1.1.cpp(455,6): error C2040: InitCodeEditor: "HWND (HWND)" отличается по уровням косвенного обращения от "void (HWND)"
1>Сборка проекта "САПР1.1.vcxproj" завершена с ошибкой.
========== Сборка: успешно выполнено — 0 , со сбоем — 1, в актуальном состоянии — 0, пропущено — 0 ==========
========== Сборка завершено в 22:31 и заняло 00,643 с ==========
